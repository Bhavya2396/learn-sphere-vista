/**
 * Story/Poem content and narration for Chapter 10
 */

// Narration state
let autoNarrationEnabled = true; // Changed to true for better user experience
let narrationDisabledByUser = false;
let currentStoryPart = 1;

// Debug flag to enable verbose logging if needed
const DEBUG_NARRATION = false;

// Build poem content strictly from provided text
const poemContent = {
    title: "рдХрд╡рд┐рддрд╛рдПрдБ",
    author: "рдЕрд░реБрдг рдХрдорд▓",
    content: `
        <div class="poem-text" id="poem-nae-ilake-mein">
рдХрд╡рд┐рддрд╛ (1): рдирдП рдЗрд▓рд╛рдХреЗ рдореЗрдВ\n(1) рдирдП рдЗрд▓рд╛рдХреЗ рдореЗрдВ рдЗрди рдирдП рдмрд╕рддреЗ рдЗрд▓рд╛рдХреЛрдВ рдореЗрдВ рдЬрд╣рд╛рдБ рд░реЛрдЬрд╝ рдмрди рд░рд╣реЗ рд╣реИрдВ рдирдП-рдирдП рдордХрд╛рди рдореИрдВ рдЕрдХрд╕рд░ рд░рд╛рд╕реНрддрд╛ рднреВрд▓ рдЬрд╛рддрд╛ рд╣реВрдБ Published рдзреЛрдЦрд╛ рджреЗ рдЬрд╛рддреЗ рд╣реИрдВ рдкреБрд░рд╛рдиреЗ рдирд┐рд╢рд╛рди рдЦреЛрдЬрддрд╛ рд╣реВрдБ рддрд╛рдХрддрд╛ рдкреАрдкрд▓ рдХрд╛ рдкреЗрдбрд╝ рдЦреЛрдЬрддрд╛ рд╣реВрдБ рдврд╣рд╛ рд╣реБрдЖ рдШрд░ рдФрд░ рдЬрд╝рдореАрди рдХрд╛ рдЦрд╛рд▓реА рдЯреБрдХ рдЬрд╣рд╛рдБ рд╕реЗ рдмрд╛рдПрдБ рдореБрдбрд╝рдирд╛ рдерд╛ рдореБрдЭреЗ рдлрд┐рд░ рджреЛ рдордХрд╛рди рдмрд╛рдж рдмрд┐рдирд╛ рд░рдВрдЧрд╡рд╛рд▓реЗ рд▓реЛрд╣реЗ рдХреЗ рдлрд╛рдЯрдХ рдХрд╛ рдШрд░ рдерд╛ рдЗрдХрдордВрдЬрд╝рд┐рд▓рд╛ рдФрд░ рдореИрдВ рд╣рд░ рдмрд╛рд░ рдПрдХ рдШрд░ рдкреАрдЫреЗ рдЪрд▓ рджреЗрддрд╛ рд╣реВрдБ\nрдпрд╛ рджреЛ рдШрд░ рдЖрдЧреЗ рдардХрдордХрд╛рддрд╛ рдпрд╣рд╛рдБ рд░реЛрдЬрд╝ рдХреБрдЫ рдмрди рд░рд╣рд╛ рд╣реИ рд░реЛрдЬрд╝ рдХреБрдЫ рдШрдЯ рд░рд╣рд╛ рд╣реИ рдпрд╣рд╛рдБ рд╕реНрдореГрддрд┐ рдХрд╛ рднрд░реЛрд╕рд╛ рдирд╣реАрдВ Reprint 2025-26 рдирдП рдЗрд▓рд╛рдХреЗ рдореЗрдВ/рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде/87 рдПрдХ рд╣реА рджрд┐рди рдореЗрдВ рдкреБрд░рд╛рдиреА рдкрдбрд╝ рдЬрд╛рддреА рд╣реИ рджреБрдирд┐рдпрд╛ рдЬреИрд╕реЗ рд╡рд╕рдВрдд рдХрд╛ рдЧрдпрд╛ рдкрддрдЭрдбрд╝ рдХреЛ рд▓реМрдЯрд╛ рд╣реВрдБ рдЬреИрд╕реЗ рдмреИрд╕рд╛рдЦ рдХрд╛ рдЧрдпрд╛ рднрд╛рджреЛрдВ рдХреЛ рд▓реМрдЯрд╛ рд╣реВрдБ рдЕрдм рдпрд╣реА рд╣реИ рдЙрдкрд╛рдп рдХрд┐ рд╣рд░ рджрд░рд╡рд╛рдЬрд╝рд╛ рдЦрдЯрдЦрдЯрд╛рдУ рдФрд░ рдкреВрдЫреЛ- рдХреНрдпрд╛ рдпрд╣реА рд╣реИ рд╡реЛ рдШрд░? рд╕рдордп рдмрд╣реБрдд рдХрдо рд╣реИ рддреБрдореНрд╣рд╛рд░реЗ рдкрд╛рд╕ рдЖ рдЪрд▓рд╛ рдкрд╛рдиреА рдврд╣рд╛ рдЖ рд░рд╣рд╛ рдЕрдХрд╛рд╕ рд╢рд╛рдпрдж рдкреБрдХрд╛рд░ рд▓реЗ рдХреЛрдИ рдкрд╣рдЪрд╛рдирд╛ рдКрдкрд░ рд╕реЗ рджреЗрдЦрдХрд░
        </div>
        <div class="poem-text" id="poem-khushboo-rachte-hain-haath">
рдХрд╡рд┐рддрд╛ (2): рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде\n(2) рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде рдХрдИ рдЧрд▓рд┐рдпреЛрдВ рдХреЗ рдмреАрдЪ рдХрдИ рдирд╛рд▓реЛрдВ рдХреЗ рдкрд╛рд░ рдХреВрдбрд╝реЗ-рдХрд░рдХрдЯ рдХреЗ рдвреЗрд░реЛрдВ рдХреЗ рдмрд╛рдж рдмрджрдмреВ рд╕реЗ рдлрдЯрддреЗ рдЬрд╛рддреЗ рдЗрд╕ рдЯреЛрд▓реЗ рдХреЗ рдЕрдВрджрд░ рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рдеред рдЙрднрд░реА рдирд╕реЛрдВрд╡рд╛рд▓реЗ рд╣рд╛рде рдШрд┐рд╕реЗ рдирд╛рдЦреВрдиреЛрдВрд╡рд╛рд▓реЗ рд╣рд╛рде рдкреАрдкрд▓ рдХреЗ рдкрддреНрддреЗ-рд╕реЗ рдирдП-рдирдП рд╣рд╛рде рдЬреВрд╣реА рдХреА рдбрд╛рд▓-рд╕реЗ рдЦреБрд╢рдмреВрджрд╛рд░ рд╣рд╛рде\nрдЧрдВрджреЗ рдХрдЯреЗ-рдкрд┐рдЯреЗ рд╣рд╛рде рдЬрд╝рдЦреНрдо рд╕реЗ рдлрдЯреЗ рд╣реБрдП рд╣рд╛рде рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рдеред рдпрд╣реАрдВ рдЗрд╕ рдЧрд▓реА рдореЗрдВ рдмрдирддреА рд╣реИрдВ рдореБрд▓реНрдХ рдХреА рдорд╢рд╣реВрд░ рдЕрдЧрд░рдмрддреНрддрд┐рдпрд╛рдБ рдЗрдиреНрд╣реАрдВ рдЧрдВрджреЗ рдореБрд╣рд▓реНрд▓реЛрдВ рдХреЗ рдЧрдВрджреЗ рд▓реЛрдЧ рдмрдирд╛рддреЗ рд╣реИрдВ рдХреЗрд╡рдбрд╝рд╛ рдЧреБрд▓рд╛рдм рдЦрд╕ рдФрд░ рд░рд╛рддрд░рд╛рдиреА рдЕрдЧрд░рдмрддреНрддрд┐рдпрд╛рдБ рджреБрдирд┐рдпрд╛ рдХреА рд╕рд╛рд░реА рдЧрдВрджрдЧреА рдХреЗ рдмреАрдЪ рджреБрдирд┐рдпрд╛ рдХреА рд╕рд╛рд░реА рдЦреБрд╢рдмреВ рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рдерд╛  рд░рдЪрддреЗ рд░рд╣рддреЗ рд╣реИрдВ рд╣рд╛рде рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде
        </div>
        <div class="comprehension-check">
            <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
            <div class="comprehension-question">1. рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рдЙрддреНрддрд░ рджреАрдЬрд┐рдП- (рдХ) рдирдП рдмрд╕рддреЗ рдЗрд▓рд╛рдХреЗ рдореЗрдВ рдХрд╡рд┐ рд░рд╛рд╕реНрддрд╛ рдХреНрдпреЛрдВ рднреВрд▓ рдЬрд╛рддрд╛ рд╣реИ? (рдЦ) рдХрд╡рд┐рддрд╛ рдореЗрдВ рдХреМрди-рдХреМрди рд╕реЗ рдкреБрд░рд╛рдиреЗ рдирд┐рд╢рд╛рдиреЛрдВ рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ? (рдЧ) рдХрд╡рд┐ рдПрдХ рдШрд░ рдкреАрдЫреЗ рдпрд╛ рджреЛ рдШрд░ рдЖрдЧреЗ рдХреНрдпреЛрдВ рдЪрд▓ рджреЗрддрд╛ рд╣реИ? (рдШ) 'рд╡рд╕рдВрдд рдХрд╛ рдЧрдпрд╛ рдкрддрдЭрдбрд╝' рдФрд░ 'рдмреИрд╕рд╛рдЦ рдХрд╛ рдЧрдпрд╛ рднрд╛рджреЛрдВ рдХреЛ рд▓реМрдЯрд╛' рд╕реЗ рдХреНрдпрд╛ рдЕрднрд┐рдкреНрд░рд╛рдп рд╣реИ? (рдЩ) рдХрд╡рд┐ рдиреЗ рдЗрд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ 'рд╕рдордп рдХреА рдХрдореА' рдХреА рдУрд░ рдХреНрдпреЛрдВ рдЗрд╢рд╛рд░рд╛ рдХрд┐рдпрд╛ рд╣реИ? (рдЪ) рдЗрд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ рдХрд╡рд┐ рдиреЗ рд╢рд╣рд░реЛрдВ рдХреА рдХрд┐рд╕ рд╡рд┐рдбрдВрдмрдирд╛ рдХреА рдУрд░ рд╕рдВрдХреЗрдд рдХрд┐рдпрд╛ рд╣реИ?</div>
            <div class="comprehension-question">2. рд╡реНрдпрд╛рдЦреНрдпрд╛ рдХреАрдЬрд┐рдП- (рдХ) рдпрд╣рд╛рдБ рд╕реНрдореГрддрд┐ рдХрд╛ рднрд░реЛрд╕рд╛ рдирд╣реАрдВ рдПрдХ рд╣реА рджрд┐рди рдореЗрдВ рдкреБрд░рд╛рдиреА рдкрдбрд╝ рдЬрд╛рддреА рд╣реИ рджреБрдирд┐рдпрд╛ (рдЦ) рд╕рдордп рдмрд╣реБрдд рдХрдо рд╣реИ рддреБрдореНрд╣рд╛рд░реЗ рдкрд╛рд╕ рдЖ рдЪрд▓рд╛ рдкрд╛рдиреА рдврд╣рд╛ рдЖ рд░рд╣рд╛ рдЕрдХрд╛рд╕ рд╢рд╛рдпрдж рдкреБрдХрд╛рд░ рд▓реЗ рдХреЛрдИ рдкрд╣рдЪрд╛рдирд╛ рдКрдкрд░ рд╕реЗ рджреЗрдЦрдХрд░</div>
            <div class="comprehension-question">рдпреЛрдЧреНрдпрддрд╛-рд╡рд┐рд╕реНрддрд╛рд░: рдкрд╛рда рдореЗрдВ рд╣рд┐рдВрджреА рдорд╣реАрдиреЛрдВ рдХреЗ рдХреБрдЫ рдирд╛рдо рдЖрдП рд╣реИрдВред рдЖрдк рд╕рднреА рд╣рд┐рдВрджреА рдорд╣реАрдиреЛрдВ рдХреЗ рдирд╛рдо рдХреНрд░рдо рд╕реЗ рд▓рд┐рдЦрд┐рдПред</div>
            <div class="comprehension-question">(2) рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде 1. рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рдЙрддреНрддрд░ рджреАрдЬрд┐рдП (рдХ) 'рдЦреБрд╢рдмреВ рд░рдЪрдиреЗрд╡рд╛рд▓реЗ рд╣рд╛рде' рдХреИрд╕реА рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдореЗрдВ рддрдерд╛ рдХрд╣рд╛рдБ-рдХрд╣рд╛рдБ рд░рд╣рддреЗ рд╣реИрдВ? (рдЦ) рдХрд╡рд┐рддрд╛ рдореЗрдВ рдХрд┐рддрдиреЗ рддрд░рд╣ рдХреЗ рд╣рд╛рдереЛрдВ рдХреА рдЪрд░реНрдЪрд╛ рд╣реБрдИ рд╣реИ? (рдЧ) рдХрд╡рд┐ рдиреЗ рдпрд╣ рдХреНрдпреЛрдВ рдХрд╣рд╛ рд╣реИ рдХрд┐ 'рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде'? (рдШ) рдЬрд╣рд╛рдБ рдЕрдЧрд░рдмрддреНрддрд┐рдпрд╛рдБ рдмрдирддреА рд╣реИрдВ, рд╡рд╣рд╛рдБ рдХрд╛ рдорд╛рд╣реМрд▓ рдХреИрд╕рд╛ рд╣реЛрддрд╛ рд╣реИ? (рдЩ) рдЗрд╕ рдХрд╡рд┐рддрд╛ рдХреЛ рд▓рд┐рдЦрдиреЗ рдХрд╛ рдореБрдЦреНрдп рдЙрджреНрджреЗрд╢реНрдп рдХреНрдпрд╛ рд╣реИ?</div>
            <div class="comprehension-question">2. рд╡реНрдпрд╛рдЦреНрдпрд╛ рдХреАрдЬрд┐рдП- (рдХ) (i) рдкреАрдкрд▓ рдХреЗ рдкрддреНрддреЗ рд╕реЗ рдирдП-рдирдП рд╣рд╛рде рдЬреВрд╣реА рдХреА рдбрд╛рд▓ рд╕реЗ рдЦреБрд╢рдмреВрджрд╛рд░ рд╣рд╛рде (ii) рджреБрдирд┐рдпрд╛ рдХреА рд╕рд╛рд░реА рдЧрдВрджрдЧреА рдХреЗ рдмреАрдЪ рджреБрдирд┐рдпрд╛ рдХреА рд╕рд╛рд░реА рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд░рд╣рддреЗ рд╣реИрдВ рд╣рд╛рде (рдЦ) рдХрд╡рд┐ рдиреЗ рдЗрд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ 'рдмрд╣реБрд╡рдЪрди' рдХрд╛ рдкреНрд░рдпреЛрдЧ рдЕрдзрд┐рдХ рдХрд┐рдпрд╛ рд╣реИ? рдЗрд╕рдХрд╛ рдХреНрдпрд╛ рдХрд╛рд░рдг рд╣реИ? (рдЧ) рдХрд╡рд┐ рдиреЗ рд╣рд╛рдереЛрдВ рдХреЗ рд▓рд┐рдП рдХреМрди-рдХреМрди рд╕реЗ рд╡рд┐рд╢реЗрд╖рдгреЛрдВ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд┐рдпрд╛ рд╣реИ?</div>
        </div>
    `
};

// Story parts for the two poems
const storyParts = [
    {
        title: "рдирдП рдЗрд▓рд╛рдХреЗ рдореЗрдВ",
        content: `
            <h3>рдХрд╡рд┐рддрд╛ (1): рдирдП рдЗрд▓рд╛рдХреЗ рдореЗрдВ</h3>
            <p> рдирдП <span class="highlight-vocab">рдЗрд▓рд╛рдХреЗ<span class="vocab-tooltip">рдХреНрд╖реЗрддреНрд░</span></span> рдореЗрдВ</p>
            <p>рдЗрди рдирдП рдмрд╕рддреЗ рдЗрд▓рд╛рдХреЛрдВ рдореЗрдВ</p>
            <p>рдЬрд╣рд╛рдБ рд░реЛрдЬрд╝ рдмрди рд░рд╣реЗ рд╣реИрдВ рдирдП-рдирдП рдордХрд╛рди</p>
            <p>рдореИрдВ <span class="highlight-vocab">рдЕрдХрд╕рд░<span class="vocab-tooltip">рдкреНрд░рд╛рдпрдГ, рдмрд╣реБрдзрд╛</span></span> рд░рд╛рд╕реНрддрд╛ рднреВрд▓ рдЬрд╛рддрд╛ рд╣реВрдБ</p>
            <p>рдзреЛрдЦрд╛ рджреЗ рдЬрд╛рддреЗ рд╣реИрдВ рдкреБрд░рд╛рдиреЗ рдирд┐рд╢рд╛рди</p>
            <p>рдЦреЛрдЬрддрд╛ рд╣реВрдБ <span class="highlight-vocab">рддрд╛рдХрддрд╛<span class="vocab-tooltip">рджреЗрдЦрддрд╛</span></span> рдкреАрдкрд▓ рдХрд╛ рдкреЗрдбрд╝</p>
            <p>рдЦреЛрдЬрддрд╛ рд╣реВрдБ <span class="highlight-vocab">рдврд╣рд╛<span class="vocab-tooltip">рдЧрд┐рд░рд╛ рд╣реБрдЖ, рдзреНрд╡рд╕реНрдд</span></span> рд╣реБрдЖ рдШрд░</p>
            <p>рдФрд░ рдЬрд╝рдореАрди рдХрд╛ рдЦрд╛рд▓реА рдЯреБрдХ</p>
            <p>рдЬрд╣рд╛рдБ рд╕реЗ рдмрд╛рдПрдБ рдореБрдбрд╝рдирд╛ рдерд╛ рдореБрдЭреЗ</p>
            <p>рдлрд┐рд░ рджреЛ рдордХрд╛рди рдмрд╛рдж</p>
            <p>рдмрд┐рдирд╛ рд░рдВрдЧрд╡рд╛рд▓реЗ рд▓реЛрд╣реЗ рдХреЗ рдлрд╛рдЯрдХ рдХрд╛ рдШрд░ рдерд╛</p>
            <p>рдЗрдХрдордВрдЬрд╝рд┐рд▓рд╛</p>
            <p>рдФрд░ рдореИрдВ рд╣рд░ рдмрд╛рд░ рдПрдХ рдШрд░ рдкреАрдЫреЗ рдЪрд▓ рджреЗрддрд╛ рд╣реВрдБ</p>
            <p>рдпрд╛ рджреЛ рдШрд░ рдЖрдЧреЗ <span class="highlight-vocab">рдардХрдордХрд╛рддрд╛<span class="vocab-tooltip">рдзреАрд░реЗ-рдзреАрд░реЗ, рдбрдЧрдордЧрд╛рддреЗ рд╣реБрдП</span></span></p>
            <p>рдпрд╣рд╛рдБ рд░реЛрдЬрд╝ рдХреБрдЫ рдмрди рд░рд╣рд╛ рд╣реИ</p>
            <p>рд░реЛрдЬрд╝ рдХреБрдЫ рдШрдЯ рд░рд╣рд╛ рд╣реИ</p>
            <p>рдпрд╣рд╛рдБ <span class="highlight-vocab">рд╕реНрдореГрддрд┐<span class="vocab-tooltip">рдпрд╛рдж</span></span> рдХрд╛ рднрд░реЛрд╕рд╛ рдирд╣реАрдВ</p>
            <p>рдПрдХ рд╣реА рджрд┐рди рдореЗрдВ рдкреБрд░рд╛рдиреА рдкрдбрд╝ рдЬрд╛рддреА рд╣реИ рджреБрдирд┐рдпрд╛</p>
            <p>рдЬреИрд╕реЗ <span class="highlight-vocab">рд╡рд╕рдВрдд<span class="vocab-tooltip">рдЫрд╣ рдЛрддреБрдУрдВ рдореЗрдВ рд╕реЗ рдПрдХ</span></span> рдХрд╛ рдЧрдпрд╛ <span class="highlight-vocab">рдкрддрдЭрдбрд╝<span class="vocab-tooltip">рдПрдХ рдЛрддреБ рдЬрдм рдкреЗрдбрд╝реЛрдВ рдХреЗ рдкрддреНрддреЗ рдЭрдбрд╝рддреЗ рд╣реИрдВ</span></span> рдХреЛ рд▓реМрдЯрд╛ рд╣реВрдБ</p>
            <p>рдЬреИрд╕реЗ <span class="highlight-vocab">рдмреИрд╕рд╛рдЦ<span class="vocab-tooltip">рдЪреИрдд рдХреЗ рдмрд╛рдж рдЖрдиреЗ рд╡рд╛рд▓рд╛ рдорд╣реАрдирд╛</span></span> рдХрд╛ рдЧрдпрд╛ <span class="highlight-vocab">рднрд╛рджреЛрдВ<span class="vocab-tooltip">рд╕рд╛рд╡рди рдХреЗ рдмрд╛рдж рдЖрдиреЗ рд╡рд╛рд▓рд╛ рдорд╣реАрдирд╛</span></span> рдХреЛ рд▓реМрдЯрд╛ рд╣реВрдБ</p>
            <p>рдЕрдм рдпрд╣реА рд╣реИ рдЙрдкрд╛рдп рдХрд┐</p>
            <p>рд╣рд░ рджрд░рд╡рд╛рдЬрд╝рд╛ рдЦрдЯрдЦрдЯрд╛рдУ рдФрд░ рдкреВрдЫреЛ-</p>
            <p>рдХреНрдпрд╛ рдпрд╣реА рд╣реИ рд╡реЛ рдШрд░?</p>
            <p>рд╕рдордп рдмрд╣реБрдд рдХрдо рд╣реИ рддреБрдореНрд╣рд╛рд░реЗ рдкрд╛рд╕</p>
            <p>рдЖ рдЪрд▓рд╛ рдкрд╛рдиреА рдврд╣рд╛ рдЖ рд░рд╣рд╛ <span class="highlight-vocab">рдЕрдХрд╛рд╕<span class="vocab-tooltip">рдЖрдХрд╛рд╢</span></span></p>
            <p>рд╢рд╛рдпрдж рдкреБрдХрд╛рд░ рд▓реЗ рдХреЛрдИ рдкрд╣рдЪрд╛рдирд╛</p>
            <p>рдКрдкрд░ рд╕реЗ рджреЗрдЦрдХрд░</p>
        `
    },
    {
        title: "рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде",
        content: `
            <h3>рдХрд╡рд┐рддрд╛ (2): рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде</h3>
            <p> рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде</p>
            <p>рдХрдИ рдЧрд▓рд┐рдпреЛрдВ рдХреЗ рдмреАрдЪ</p>
            <p>рдХрдИ <span class="highlight-vocab">рдирд╛рд▓реЛрдВ<span class="vocab-tooltip">рдирд╛рд▓реА, рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдХрд╛ рдорд╛рд░реНрдЧ</span></span> рдХреЗ рдкрд╛рд░</p>
            <p><span class="highlight-vocab">рдХреВрдбрд╝реЗ-рдХрд░рдХрдЯ<span class="vocab-tooltip">рдХрдЪрд░рд╛, рд░рджреНрджреА</span></span> рдХреЗ рдвреЗрд░реЛрдВ рдХреЗ рдмрд╛рдж</p>
            <p>рдмрджрдмреВ рд╕реЗ рдлрдЯрддреЗ рдЬрд╛рддреЗ рдЗрд╕ <span class="highlight-vocab">рдЯреЛрд▓реЗ<span class="vocab-tooltip">рдореЛрд╣рд▓реНрд▓рд╛, рдмрд╕реНрддреА</span></span> рдХреЗ рдЕрдВрджрд░</p>
            <p>рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде</p>
            <p>рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рдеред</p>
            <p>рдЙрднрд░реА рдирд╕реЛрдВрд╡рд╛рд▓реЗ рд╣рд╛рде</p>
            <p>рдШрд┐рд╕реЗ рдирд╛рдЦреВрдиреЛрдВрд╡рд╛рд▓реЗ рд╣рд╛рде</p>
            <p>рдкреАрдкрд▓ рдХреЗ рдкрддреНрддреЗ-рд╕реЗ рдирдП-рдирдП рд╣рд╛рде</p>
            <p>рдЬреВрд╣реА рдХреА рдбрд╛рд▓-рд╕реЗ рдЦреБрд╢рдмреВрджрд╛рд░ рд╣рд╛рде</p>
            <p>рдЧрдВрджреЗ рдХрдЯреЗ-рдкрд┐рдЯреЗ рд╣рд╛рде</p>
            <p><span class="highlight-vocab">рдЬрд╝рдЦреНрдо<span class="vocab-tooltip">рдЪреЛрдЯ, рдШрд╛рд╡</span></span> рд╕реЗ рдлрдЯреЗ рд╣реБрдП рд╣рд╛рде</p>
            <p>рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде</p>
            <p>рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рдеред</p>
            <p>рдпрд╣реАрдВ рдЗрд╕ рдЧрд▓реА рдореЗрдВ рдмрдирддреА рд╣реИрдВ</p>
            <p><span class="highlight-vocab">рдореБрд▓реНрдХ<span class="vocab-tooltip">рджреЗрд╢</span></span> рдХреА рдорд╢рд╣реВрд░ рдЕрдЧрд░рдмрддреНрддрд┐рдпрд╛рдБ</p>
            <p>рдЗрдиреНрд╣реАрдВ рдЧрдВрджреЗ рдореБрд╣рд▓реНрд▓реЛрдВ рдХреЗ рдЧрдВрджреЗ рд▓реЛрдЧ рдмрдирд╛рддреЗ рд╣реИрдВ</p>
            <p><span class="highlight-vocab">рдХреЗрд╡рдбрд╝рд╛<span class="vocab-tooltip">рдПрдХ рд╕реБрдЧрдВрдзрд┐рдд рдкреМрдзрд╛</span></span> рдЧреБрд▓рд╛рдм <span class="highlight-vocab">рдЦрд╕<span class="vocab-tooltip">рдПрдХ рд╕реБрдЧрдВрдзрд┐рдд рдШрд╛рд╕</span></span> рдФрд░ рд░рд╛рддрд░рд╛рдиреА рдЕрдЧрд░рдмрддреНрддрд┐рдпрд╛рдБ</p>
            <p>рджреБрдирд┐рдпрд╛ рдХреА рд╕рд╛рд░реА рдЧрдВрджрдЧреА рдХреЗ рдмреАрдЪ</p>
            <p>рджреБрдирд┐рдпрд╛ рдХреА рд╕рд╛рд░реА рдЦреБрд╢рдмреВ</p>
            <p>рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде</p>
            <p>рд░рдЪрддреЗ рд░рд╣рддреЗ рд╣реИрдВ рд╣рд╛рде</p>
            <p>рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде</p>
        `
    }
];

// Initialize on load
document.addEventListener('DOMContentLoaded', function() {
    // Load the first poem by default
    showStoryPart(1);
});

// Track highlight timeouts to clear them when needed
window.highlightTimeouts = [];

// Show the selected poem part (1 or 2)
function showStoryPart(partNumber) {
    if (DEBUG_NARRATION) console.log(`[DEBUG] showStoryPart(${partNumber}) called`);
    
    // Validate part number (1-based index)
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}. Must be between 1 and ${storyParts.length}`);
        return;
    }
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) {
        console.error('Story content container not found');
        return;
    }
    
    // Check if we're actually switching parts (to avoid redundant operations)
    const isSwitchingParts = partNumber !== currentStoryPart;
    
    // Update current story part
    currentStoryPart = partNumber;
    
    // Update the static navigation buttons to show active state
    const navButtons = document.querySelectorAll('.story-nav-btn');
    navButtons.forEach((btn, index) => {
        btn.classList.toggle('active', index + 1 === partNumber);
        btn.setAttribute('aria-pressed', index + 1 === partNumber);
    });
    
    // Clean up narration properly without stopping if auto-narration is enabled
    if (window.highlightTimeouts) {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
        window.highlightTimeouts = [];
    }
    
    // Clear paragraph highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Clear any existing content
    storyContent.innerHTML = '';
    
    // Get the selected part (0-based index)
    const selectedPart = storyParts[partNumber - 1];
    
    // Create part container
    const partContainer = document.createElement('div');
    partContainer.className = 'story-part active'; // Add 'active' class to make it visible
    partContainer.innerHTML = selectedPart.content;
    
    // Create interactive button inside the poem
    const poemButton = document.createElement('button');
    poemButton.className = 'interactive-btn poem-action-btn';
    poemButton.textContent = 'ЁЯУЭ рдЯрд┐рдкреНрдкрдгреА рдЬреЛрдбрд╝реЗрдВ';
    poemButton.onclick = function() {
        addPoemNote(partNumber);
    };
    
    // Add button inside the poem container
    partContainer.appendChild(document.createElement('br'));
    partContainer.appendChild(document.createElement('br'));
    partContainer.appendChild(poemButton);
    
    storyContent.appendChild(partContainer);
    
    // Start narration for the new part if auto-narration is enabled and we're switching parts
    if (isSwitchingParts && autoNarrationEnabled && !narrationDisabledByUser) {
        // Add a small delay to ensure DOM is ready
        setTimeout(() => {
            if (DEBUG_NARRATION) console.log(`[DEBUG] Auto-starting narration for newly switched part ${partNumber}`);
            readStoryPartAloud(partNumber, false);
        }, 100);
    }
}

// Read the selected story part aloud with paragraph highlighting
function readStoryPartAloud(partNumber, isManualCall = false) {
    if (DEBUG_NARRATION) console.log(`[DEBUG] readStoryPartAloud(${partNumber}, ${isManualCall}) called`);
    
    // Update current part being narrated
    currentStoryPart = partNumber;
    
    // Validate part number
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    // If this is a manual call, update the narration state
    if (isManualCall) {
        narrationDisabledByUser = false;
        autoNarrationEnabled = true;
    }
    
    // If narration is disabled by user, don't proceed
    if (narrationDisabledByUser) return;
    
    // Process the story part immediately
    processStoryPartForNarration(partNumber, isManualCall);
}

// Process and narrate the story part
function processStoryPartForNarration(partNumber, isManualCall = true) {
    if (DEBUG_NARRATION) console.log(`[DEBUG] processStoryPartForNarration(${partNumber}, ${isManualCall}) called`);
    
    const part = storyParts[partNumber - 1];
    if (!part) {
        console.error(`Story part ${partNumber} not found`);
        return;
    }
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) return;
    
    // Get all paragraphs in the current part
    const paragraphs = storyContent.querySelectorAll('.story-part.active p');
    if (!paragraphs || paragraphs.length === 0) {
        if (DEBUG_NARRATION) console.log(`[DEBUG] No paragraphs found in part ${partNumber}`);
        return;
    }
    
    // Stop any ongoing narration and clean up
    stopNarration();
    
    // Extract text content to read
    let storyTextContent = '';
    
    // Add title
    storyTextContent += `${part.title}. `;
    
    // Filter valid paragraphs and add their content
    const validParagraphs = Array.from(paragraphs).filter(p => {
        // Skip if empty
        if (!p || !p.textContent.trim()) return false;
        // Skip if inside a vocabulary note or comprehension check
        if (p.closest('.vocabulary-note') || p.closest('.comprehension-check')) return false;
        return true;
    });
    
    if (DEBUG_NARRATION) console.log(`[DEBUG] Found ${validParagraphs.length} valid paragraphs for narration`);
    
    // Process paragraph text
    if (validParagraphs.length > 0) {
        const paragraphTexts = validParagraphs.map((p, idx) => {
            // Clone paragraph to work with
            const pClone = p.cloneNode(true);
            
            // Remove tooltip spans entirely so they're not read
            const tooltips = pClone.querySelectorAll('.vocab-tooltip');
            tooltips.forEach(tooltip => tooltip.remove());
            
            // Keep only the main words from highlight-vocab elements (without tooltip text)
            const highlightElements = pClone.querySelectorAll('.highlight-vocab');
            highlightElements.forEach(highlight => {
                // Get only the main text content without any nested elements
                const mainText = highlight.childNodes[0].textContent.trim();
                
                // Replace the highlight-vocab element with just the word
                if (highlight.parentNode) {
                    highlight.parentNode.replaceChild(document.createTextNode(mainText), highlight);
                }
            });
            
            // Get clean text
            let text = pClone.textContent.trim();
            // Normalize whitespace
            text = text.replace(/\s+/g, ' ');
            
            // Log for debugging
            console.log(`Processing paragraph ${idx+1}: "${text}"`);
            
            return text;
        }).filter(text => text.length > 0);
        
        // Join paragraphs with a period and space to ensure proper separation
        storyTextContent += paragraphTexts.join('. ');
    }
    
    // Read the content aloud using chunking for better stability
    if (window.narrator && storyTextContent) {
        try {
            console.log("Full text to narrate:", storyTextContent);
            console.log("Total paragraphs to narrate:", validParagraphs.length);
            
            // Add visual indicator that reading is happening
            const readingIndicator = createReadingIndicator(partNumber);
            const partContainer = storyContent.querySelector('.story-part.active');
            if (partContainer && readingIndicator) {
                partContainer.appendChild(readingIndicator);
            }
            
            // Special handling for direct narration to ensure all text is read
            if (partNumber === 1 || partNumber === 2) { // For both poems to ensure all lines are read
                console.log(`Using special paragraph-by-paragraph narration for poem ${partNumber}`);
                
                // Directly read each paragraph sequentially
                let currentIndex = 0;
                
                const readNextParagraph = () => {
                    if (currentIndex >= validParagraphs.length) {
                        console.log("Finished reading all paragraphs");
            return;
        }
                    
                    const paragraph = validParagraphs[currentIndex];
                    console.log(`Reading paragraph ${currentIndex+1}/${validParagraphs.length}`);
        
        // Highlight the current paragraph
                    document.querySelectorAll('.paragraph-highlight').forEach(p => {
                        p.classList.remove('paragraph-highlight');
                    });
        paragraph.classList.add('paragraph-highlight');
        
                    // Extract text properly without tooltips
                    // Clone the paragraph to avoid modifying the original
                    const pClone = paragraph.cloneNode(true);
                    
                    // Remove all tooltip spans
                    const tooltips = pClone.querySelectorAll('.vocab-tooltip');
                    tooltips.forEach(tooltip => tooltip.remove());
                    
                    // Get the cleaned text without tooltips
                    let text = pClone.textContent.trim();
                    
                    // Speak the paragraph
        if (window.narrator) {
            window.narrator.onEndCallback = () => {
                            currentIndex++;
                            setTimeout(() => {
                    readNextParagraph();
                            }, 300);
                        };
                        
                        window.narrator.speak(text);
        }
    };
    
    // Start reading
    readNextParagraph();
            } else {
                // Regular handling for other parts
                // Split text into chunks for better narration
                const chunks = splitTextIntoChunks(storyTextContent);
                console.log(`Split text into ${chunks.length} chunks`);
                
                // Register narration end event
                if (window.narrator.onEndCallback) {
                    window.narrator.onEndCallback = null;
                }
                
                window.narrator.onEndCallback = function() {
                    // Clean up reading indicator
                    const indicator = document.getElementById(`reading-indicator-${partNumber}`);
                    if (indicator) {
                        indicator.classList.add('fade-out');
                        setTimeout(() => {
                            if (indicator.parentNode) indicator.remove();
                        }, 500);
                    }
                };
                
                // Speak text chunks sequentially
                speakTextChunksSequentially(chunks, validParagraphs);
            }
        } catch (error) {
            console.error("Error starting narration:", error);
        }
    }
}

// Create a reading indicator element
function createReadingIndicator(partNumber) {
    const readingIndicator = document.createElement('div');
    readingIndicator.className = 'reading-indicator';
    readingIndicator.id = `reading-indicator-${partNumber}`;
    
    // Special indicator for the second poem
    if (partNumber === 2) {
        readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдЦреБрд╢рдмреВ рд░рдЪрддреЗ рд╣реИрдВ рд╣рд╛рде рдХрд╡рд┐рддрд╛ рдкрдврд╝реА рдЬрд╛ рд░рд╣реА рд╣реИ...';
    } else {
        readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдкрдврд╝рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...';
    }
    
    // Add stop button
    const stopButton = document.createElement('button');
    stopButton.className = 'interactive-btn stop-narration-btn';
    stopButton.innerHTML = 'тП╣я╕П рдкрдврд╝рдирд╛ рд░реЛрдХреЗрдВ';
    stopButton.onclick = stopNarration;
    readingIndicator.appendChild(stopButton);
    
    // Make the indicator more visible
    readingIndicator.style.padding = '10px';
    readingIndicator.style.margin = '15px 0';
    
    return readingIndicator;
}

// Stop ongoing narration
function stopNarration() {
    // Cancel speech synthesis directly
    if (window.speechSynthesis) {
        window.speechSynthesis.cancel();
    }
    
    // Use narrator's stop method if available
    if (window.narrator) {
        window.narrator.stop();
    }
    
    // Clear any existing timeouts
    if (window.highlightTimeouts) {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
        window.highlightTimeouts = [];
    }
    
    // Remove paragraph highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Remove reading indicators
    document.querySelectorAll('.reading-indicator').forEach(indicator => {
        indicator.remove();
    });
}

// Split text into manageable chunks for more reliable narration
function splitTextIntoChunks(text, chunkSize = 150) {
    // Try to split at sentence boundaries (including Hindi danda)
    const sentences = text.match(/[^.!?\u0964]+[.!?\u0964]+/g) || [];
    
    if (sentences.length === 0) {
        return [text];
    }
    
    const chunks = [];
    let currentChunk = '';
    
    sentences.forEach(sentence => {
        // If adding this sentence would make the chunk too long, start a new chunk
        if (currentChunk.length + sentence.length > chunkSize) {
            if (currentChunk) {
                chunks.push(currentChunk);
            }
            currentChunk = sentence;
        } else {
            currentChunk += sentence;
        }
    });
    
    // Add the last chunk if it's not empty
    if (currentChunk) {
        chunks.push(currentChunk);
    }
    
    return chunks.length ? chunks : [text];
}

// Speak text chunks sequentially with paragraph highlighting
function speakTextChunksSequentially(chunks, paragraphs, index = 0) {
    if (index >= chunks.length) return;
    
    try {
        // Create utterance for this chunk
        const utterance = new SpeechSynthesisUtterance(chunks[index]);
        
        // Apply voice settings if available
        if (window.narrator && window.narrator.voice) {
            utterance.voice = window.narrator.voice;
        }
        
        // Highlight paragraphs progressively
        highlightParagraphsForChunk(paragraphs, index, chunks.length);
        
        // Set event handlers
        utterance.onend = () => {
            // Continue to next chunk with minimal delay
            setTimeout(() => {
                speakTextChunksSequentially(chunks, paragraphs, index + 1);
            }, 50);
        };
        
        utterance.onerror = (event) => {
            if (DEBUG_NARRATION) console.log(`[DEBUG] Error speaking chunk: ${event.error}`);
            // Try next chunk even on error
            setTimeout(() => {
                speakTextChunksSequentially(chunks, paragraphs, index + 1);
            }, 100);
        };
        
        // Store current utterance in narrator
        if (window.narrator) {
            window.narrator.currentUtterance = utterance;
        }
        
        // Speak the chunk
        window.speechSynthesis.speak(utterance);
    } catch (e) {
        console.error("Error in sequential narration:", e);
        // Try next chunk
        setTimeout(() => {
            speakTextChunksSequentially(chunks, paragraphs, index + 1);
        }, 100);
    }
}

// Highlight paragraphs progressively during narration
function highlightParagraphsForChunk(paragraphs, chunkIndex, totalChunks) {
    // Remove existing highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Calculate which paragraphs to highlight based on progress
    const progress = chunkIndex / totalChunks;
    const paragraphToHighlight = Math.floor(progress * paragraphs.length);
    
    // Highlight the current paragraph
    if (paragraphs[paragraphToHighlight]) {
        paragraphs[paragraphToHighlight].classList.add('paragraph-highlight');
        
        // Scroll to paragraph if needed
        const storyContent = document.getElementById('storyContent');
        if (storyContent) {
            const rect = paragraphs[paragraphToHighlight].getBoundingClientRect();
            const containerRect = storyContent.getBoundingClientRect();
            
            if (rect.top < containerRect.top || rect.bottom > containerRect.bottom) {
                storyContent.scrollTop = paragraphs[paragraphToHighlight].offsetTop - 100;
            }
        }
    }
}

function highlightVocabulary() {
    // Only highlight vocabulary without audio
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = 'рд╢рдмреНрджрд╛рд░реНрде рд╣рд╛рдЗрд▓рд╛рдЗрдЯ (рд╕реВрдЪреА рдиреАрдЪреЗ рднрд╛рд╖рд╛ рдЕрдзреНрдпрдпрди рдЦрдВрдб рдореЗрдВ рдЙрдкрд▓рдмреНрдз)ред';
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}

function togglePrintMode() {
    document.body.classList.toggle('print-mode');
    const isPrintMode = document.body.classList.contains('print-mode');
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = isPrintMode ? 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдкреНрд░рд┐рдВрдЯ рдлрд╝рдВрдХреНрд╢рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред' : 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред';
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}

// Function to add note for the poem
function addPoemNote(poemNumber) {
    const poemTitle = storyParts[poemNumber - 1].title;
    
    // Create note container
    const noteContainer = document.createElement('div');
    noteContainer.className = 'poem-note-container';
    
    // Create note form
    noteContainer.innerHTML = `
        <div class="poem-note-form">
            <h4>рдХрд╡рд┐рддрд╛ "${poemTitle}" рдкрд░ рдЯрд┐рдкреНрдкрдгреА</h4>
            <textarea class="poem-note-input" placeholder="рдЕрдкрдиреА рдЯрд┐рдкреНрдкрдгреА рдпрд╣рд╛рдВ рд▓рд┐рдЦреЗрдВ..." rows="4"></textarea>
            <div class="note-actions">
                <button class="interactive-btn save-note-btn">рд╕рд╣реЗрдЬреЗрдВ</button>
                <button class="interactive-btn cancel-note-btn">рд░рджреНрдж рдХрд░реЗрдВ</button>
            </div>
        </div>
    `;
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) return;
    
    // Find the poem button and add the note form after it
    const poemButton = storyContent.querySelector('.poem-action-btn');
    if (poemButton) {
        poemButton.style.display = 'none'; // Hide the button while adding note
        poemButton.insertAdjacentElement('afterend', noteContainer);
        
        // Focus on textarea
        const textarea = noteContainer.querySelector('.poem-note-input');
        if (textarea) textarea.focus();
        
        // Add event listeners to buttons
        const saveBtn = noteContainer.querySelector('.save-note-btn');
        if (saveBtn) {
            saveBtn.addEventListener('click', function() {
                const noteText = textarea.value.trim();
                if (noteText) {
                    // Save the note and display it
                    saveAndDisplayNote(noteText, poemNumber);
                    
                    // Show feedback
                    const feedbackMsg = document.createElement('div');
                    feedbackMsg.className = 'feedback-message success show';
                    feedbackMsg.textContent = 'рдЯрд┐рдкреНрдкрдгреА рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рд╣реЗрдЬреА рдЧрдИ!';
                    storyContent.appendChild(feedbackMsg);
                    setTimeout(() => {
                        feedbackMsg.classList.remove('show');
                        setTimeout(() => feedbackMsg.remove(), 500);
                    }, 3000);
                    
                    // Remove the note form
                    noteContainer.remove();
                    
                    // Show the button again
                    poemButton.style.display = 'inline-block';
                } else {
                    // Show error if note is empty
                    const errorMsg = document.createElement('div');
                    errorMsg.className = 'feedback-message error show';
                    errorMsg.textContent = 'рдХреГрдкрдпрд╛ рдЯрд┐рдкреНрдкрдгреА рд▓рд┐рдЦреЗрдВред';
                    noteContainer.appendChild(errorMsg);
                    setTimeout(() => {
                        errorMsg.classList.remove('show');
                        setTimeout(() => errorMsg.remove(), 500);
                    }, 3000);
                }
            });
        }
        
        // Cancel button handler
        const cancelBtn = noteContainer.querySelector('.cancel-note-btn');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function() {
                noteContainer.remove();
                poemButton.style.display = 'inline-block'; // Show the button again
            });
        }
    }
}

// Function to save and display the note
function saveAndDisplayNote(noteText, poemNumber) {
    // Create note display container
    const noteDisplay = document.createElement('div');
    noteDisplay.className = 'poem-note-display';
    
    // Add note content
    noteDisplay.innerHTML = `
        <div class="poem-note-content">
            <h4>рдЖрдкрдХреА рдЯрд┐рдкреНрдкрдгреА:</h4>
            <p>${noteText}</p>
            <div class="note-actions">
                <button class="interactive-btn edit-note-btn">рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ</button>
                <button class="interactive-btn delete-note-btn">рд╣рдЯрд╛рдПрдБ</button>
            </div>
        </div>
    `;
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) return;
    
    // Find the poem button and add the note display before it
    const poemButton = storyContent.querySelector('.poem-action-btn');
    if (poemButton) {
        poemButton.insertAdjacentElement('beforebegin', noteDisplay);
        poemButton.textContent = 'ЁЯУЭ рдЯрд┐рдкреНрдкрдгреА рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ'; // Change button text
        
        // Edit button handler
        const editBtn = noteDisplay.querySelector('.edit-note-btn');
        if (editBtn) {
            editBtn.addEventListener('click', function() {
                // Hide the note display
                noteDisplay.style.display = 'none';
                
                // Call the add note function again to create a new form, but with existing content
                addPoemNote(poemNumber);
                
                // Pre-fill the textarea with existing note
                const textarea = document.querySelector('.poem-note-input');
                if (textarea) {
                    textarea.value = noteText;
                }
            });
        }
        
        // Delete button handler
        const deleteBtn = noteDisplay.querySelector('.delete-note-btn');
        if (deleteBtn) {
            deleteBtn.addEventListener('click', function() {
                // Ask for confirmation
                if (confirm('рдХреНрдпрд╛ рдЖрдк рд╡рд╛рдХрдИ рдЗрд╕ рдЯрд┐рдкреНрдкрдгреА рдХреЛ рд╣рдЯрд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?')) {
                    noteDisplay.remove();
                    poemButton.textContent = 'ЁЯУЭ рдЯрд┐рдкреНрдкрдгреА рдЬреЛрдбрд╝реЗрдВ'; // Reset button text
                }
            });
        }
    }
}

// Toggle Read Aloud functionality for the current poem
function toggleReadAloud() {
    if (DEBUG_NARRATION) console.log(`[DEBUG] toggleReadAloud() called`);
    
    // Check if already speaking
    const isSpeaking = window.speechSynthesis && window.speechSynthesis.speaking;
    
    // If already reading, stop
    if (isSpeaking || (window.narrator && window.narrator.currentUtterance)) {
        if (DEBUG_NARRATION) console.log(`[DEBUG] Stopping ongoing narration`);
        stopNarration();
        narrationDisabledByUser = true;
        return;
    }
    
    // Get the currently active poem part
    const activeNavBtn = document.querySelector('.story-nav-btn.active');
    let currentPartNumber = 1; // Default to first poem
    
    if (activeNavBtn) {
        // Find which poem is active based on the active button
        const navButtons = document.querySelectorAll('.story-nav-btn');
        navButtons.forEach((button, index) => {
            if (button.classList.contains('active')) {
                currentPartNumber = index + 1;
            }
        });
    }
    
    if (DEBUG_NARRATION) console.log(`[DEBUG] Starting narration for part ${currentPartNumber}`);
    
    // Enable narration
    narrationDisabledByUser = false;
    autoNarrationEnabled = true;
    
    // Start reading the current poem
    readStoryPartAloud(currentPartNumber, true);
}