/**
 * Story content and functionality for Rahim Ke Dohe
 */

// Global variables to track narration state
let autoNarrationEnabled = false;
let narrationDisabledByUser = false;

// Story parts data
const storyParts = [
    {
        title: "рд▓реЗрдЦрдХ рдкрд░рд┐рдЪрдп",
        content: `
            <p>рд░рд╣реАрдо рдХрд╛ рдЬрдиреНрдо рд▓рд╛рд╣реМрд░ (рдЕрдм рдкрд╛рдХрд┐рд╕реНрддрд╛рди) рдореЗрдВ рд╕рдиреН 1556 рдореЗрдВ рд╣реБрдЖред рдЗрдирдХрд╛ рдкреВрд░рд╛ рдирд╛рдо рдЕрдмреНрджреБрд░реНрд░рд╣реАрдо рдЦрд╛рдирдЦрд╛рдирд╛ рдерд╛ред рд░рд╣реАрдо рдЕрд░рдмреА, рдлрд╝рд╛рд░рд╕реА, рд╕рдВрд╕реНрдХреГрдд рдФрд░ рд╣рд┐рдВрджреА рдХреЗ рдЕрдЪреНрдЫреЗ рдЬрд╛рдирдХрд╛рд░ рдереЗред</p>
            
            <p>рдЗрдирдХреА рдиреАрддрд┐рдкрд░рдХ рдЙрдХреНрддрд┐рдпреЛрдВ рдкрд░ рд╕рдВрд╕реНрдХреГрдд рдХрд╡рд┐рдпреЛрдВ рдХреА рд╕реНрдкрд╖реНрдЯ рдЫрд╛рдк рдкрд░рд┐рд▓рдХреНрд╖рд┐рдд рд╣реЛрддреА рд╣реИред рд░рд╣реАрдо рдордзреНрдпрдпреБрдЧреАрди рджрд░рдмрд╛рд░реА рд╕рдВрд╕реНрдХреГрддрд┐ рдХреЗ рдкреНрд░рддрд┐рдирд┐рдзрд┐ рдХрд╡рд┐ рдорд╛рдиреЗ рдЬрд╛рддреЗ рд╣реИрдВред рдЕрдХрдмрд░ рдХреЗ рджрд░рдмрд╛рд░ рдореЗрдВ рд╣рд┐рдВрджреА рдХрд╡рд┐рдпреЛрдВ рдореЗрдВ рдЗрдирдХрд╛ рдорд╣рддреНрддреНрд╡рдкреВрд░реНрдг рд╕реНрдерд╛рди рдерд╛ред</p>
            
            <div class="vocabulary-note">
                <div class="word">рдиреАрддрд┐рдкрд░рдХ</div>
                <div class="definition">рдиреИрддрд┐рдХрддрд╛ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд</div>
            </div>
            
            <p>рд░рд╣реАрдо рдЕрдХрдмрд░ рдХреЗ рдирд╡рд░рддреНрдиреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдереЗред рд░рд╣реАрдо рдХреЗ рдХрд╛рд╡реНрдп рдХрд╛ рдореБрдЦреНрдп рд╡рд┐рд╖рдп рд╢реНрд░реГрдВрдЧрд╛рд░, рдиреАрддрд┐ рдФрд░ рднрдХреНрддрд┐ рд╣реИред рд░рд╣реАрдо рдмрд╣реБрдд рд▓реЛрдХрдкреНрд░рд┐рдп рдХрд╡рд┐ рдереЗред рдЗрдирдХреЗ рджреЛрд╣реЗ рд╕рд░реНрд╡рд╕рд╛рдзрд╛рд░рдг рдХреЛ рдЖрд╕рд╛рдиреА рд╕реЗ рдпрд╛рдж рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВред</p>
            
            <div class="vocabulary-note">
                <div class="word">рдирд╡рд░рддреНрди</div>
                <div class="definition">рдиреМ рд░рддреНрди, рдЕрдХрдмрд░ рдХреЗ рджрд░рдмрд╛рд░ рдХреЗ рдиреМ рдкреНрд░рдореБрдЦ рд╡реНрдпрдХреНрддрд┐</div>
            </div>
            
            <p>рдЗрдирдХреЗ рдиреАрддрд┐рдкрд░рдХ рджреЛрд╣реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдкреНрд░рдЪрд▓рд┐рдд рд╣реИрдВ, рдЬрд┐рдирдореЗрдВ рджреИрдирд┐рдХ рдЬреАрд╡рди рдХреЗ рджреГрд╖реНрдЯрд╛рдВрдд рджреЗрдХрд░ рдХрд╡рд┐ рдиреЗ рдЙрдиреНрд╣реЗрдВ рд╕рд╣рдЬ, рд╕рд░рд▓ рдФрд░ рдмреЛрдзрдЧрдореНрдп рдмрдирд╛ рджрд┐рдпрд╛ рд╣реИред рд░рд╣реАрдо рдХреЛ рдЕрд╡рдзреА рдФрд░ рдмреНрд░рдЬ рджреЛрдиреЛрдВ рднрд╛рд╖рд╛рдУрдВ рдкрд░ рд╕рдорд╛рди рдЕрдзрд┐рдХрд╛рд░ рдерд╛ред</p>
            
            <div class="vocabulary-note">
                <div class="word">рджреГрд╖реНрдЯрд╛рдВрдд</div>
                <div class="definition">рдЙрджрд╛рд╣рд░рдг, рдирдореВрдирд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдмреЛрдзрдЧрдореНрдп</div>
                <div class="definition">рд╕рдордЭрдиреЗ рдпреЛрдЧреНрдп</div>
            </div>
            
            <p>рдЗрдиреНрд╣реЛрдВрдиреЗ рдЕрдкрдиреЗ рдХрд╛рд╡реНрдп рдореЗрдВ рдкреНрд░рднрд╛рд╡рдкреВрд░реНрдг рднрд╛рд╖рд╛ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд┐рдпрд╛ рд╣реИред</p>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рд░рд╣реАрдо рдХрд╛ рдЬрдиреНрдо рдХрд╣рд╛рдБ рдФрд░ рдХрдм рд╣реБрдЖ рдерд╛?</div>
                <div class="comprehension-question">2. рд░рд╣реАрдо рдХрд┐рд╕рдХреЗ рдирд╡рд░рддреНрдиреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдереЗ?</div>
                <div class="comprehension-question">3. рд░рд╣реАрдо рдХреЗ рдХрд╛рд╡реНрдп рдХрд╛ рдореБрдЦреНрдп рд╡рд┐рд╖рдп рдХреНрдпрд╛ рдерд╛?</div>
                <div class="comprehension-question">4. рд░рд╣реАрдо рдХреЛ рдХрд┐рди рднрд╛рд╖рд╛рдУрдВ рдкрд░ рдЕрдзрд┐рдХрд╛рд░ рдерд╛?</div>
            </div>
        `
    },
    {
        title: "рдХрд╡рд┐рддрд╛",
        content: `
            <div class="poem-text">
                рд░рд╣рд┐рдорди рдзрд╛рдЧрд╛ рдкреНрд░реЗрдо рдХрд╛, рдордд рддреЛрдбрд╝реЛ рдЪрдЯрдХрд╛рдпред<br>
                рдЯреВрдЯреЗ рд╕реЗ рдлрд┐рд░ рдирд╛ рдорд┐рд▓реЗ, рдорд┐рд▓реЗ рдЧрд╛рдБрда рдкрд░рд┐ рдЬрд╛рдпредред<br><br>
                
                рд░рд╣рд┐рдорди рдирд┐рдЬ рдорди рдХреА рдмрд┐рдерд╛, рдорди рд╣реА рд░рд╛рдЦреЛ рдЧреЛрдп рд╕реБрдирд┐ рдЕрдард┐рд▓реИрд╣реИрдВ рд▓реЛрдЧ рд╕рдм, рдмрд╛рдБрдЯрд┐ рди рд▓реИрд╣реИрдВ рдХреЛрдпредред<br><br>
                
                рдПрдХреИ рд╕рд╛рдзреЗ рд╕рдм рд╕рдзреИ, рд╕рдм рд╕рд╛рдзреЗ рд╕рдм рдЬрд╛рдпред рд░рд╣рд┐рдорди рдореВрд▓рд╣рд┐рдВ рд╕реАрдВрдЪрд┐рдмреЛ, рдлреВрд▓реИ рдлрд▓реИ рдЕрдШрд╛рдпредред<br><br>
                
                рдЪрд┐рддреНрд░рдХреВрдЯ рдореЗрдВ рд░рдорд┐ рд░рд╣реЗ, рд░рд╣рд┐рдорди рдЕрд╡рдз-рдирд░реЗрд╕ред рдЬрд╛ рдкрд░ рдмрд┐рдкрджрд╛ рдкрдбрд╝рдд рд╣реИ, рд╕реЛ рдЖрд╡рдд рдпрд╣ рджреЗрд╕редред<br><br>
                
                рджреАрд░рдШ рджреЛрд╣рд╛ рдЕрд░рде рдХреЗ, рдЖрдЦрд░ рдереЛрд░реЗ рдЖрд╣рд┐рдВред рдЬреНрдпреЛрдВ рд░рд╣реАрдо рдирдЯ рдХреБрдВрдбрд▓реА, рд╕рд┐рдорд┐рдЯрд┐ рдХреВрджрд┐ рдЪрдврд╝рд┐ рдЬрд╛рд╣рд┐рдВредред<br><br>
                
                рдзрдирд┐ рд░рд╣реАрдо рдЬрд▓ рдкрдВрдХ рдХреЛ рд▓рдШреБ рдЬрд┐рдп рдкрд┐рдЕрдд рдЕрдШрд╛рдпред рдЙрджрдзрд┐ рдмрдбрд╝рд╛рдИ рдХреМрди рд╣реИ, рдЬрдЧрдд рдкрд┐рдЖрд╕реЛ рдЬрд╛рдпредред<br><br>
                
                рдирд╛рдж рд░реАрдЭрд┐ рддрди рджреЗрдд рдореГрдЧ, рдирд░ рдзрди рд╣реЗрдд рд╕рдореЗрддред рддреЗ рд░рд╣реАрдо рдкрд╢реБ рд╕реЗ рдЕрдзрд┐рдХ, рд░реАрдЭреЗрд╣реБ рдХрдЫреВ рди рджреЗрддредред<br><br>
                
                рдмрд┐рдЧрд░реА рдмрд╛рдд рдмрдиреИ рдирд╣реАрдВ, рд▓рд╛рдЦ рдХрд░реМ рдХрд┐рди рдХреЛрдпред рд░рд╣рд┐рдорди рдлрд╛рдЯреЗ рджреВрдз рдХреЛ, рдордереЗ рди рдорд╛рдЦрди рд╣реЛрдп редред<br><br>
                
                рд░рд╣рд┐рдорди рджреЗрдЦрд┐ рдмрдбрд╝реЗрди рдХреЛ, рд▓рдШреБ рди рджреАрдЬрд┐рдпреЗ рдбрд╛рд░рд┐ред рдЬрд╣рд╛рдБ рдХрд╛рдо рдЖрд╡реЗ рд╕реБрдИ, рдХрд╣рд╛ рдХрд░реЗ рддрд░рд╡рд╛рд░рд┐редред<br><br>
                
                рд░рд╣рд┐рдорди рдирд┐рдЬ рд╕рдВрдкрддрд┐ рдмрд┐рдирд╛, рдХреЛрдЙ рди рдмрд┐рдкрддрд┐ рд╕рд╣рд╛рдпред рдмрд┐рдиреБ рдкрд╛рдиреА рдЬреНрдпреЛрдВ рдЬрд▓рдЬ рдХреЛ, рдирд╣рд┐рдВ рд░рд╡рд┐ рд╕рдХреЗ рдмрдЪрд╛рдпредред<br><br>
                
                рд░рд╣рд┐рдорди рдкрд╛рдиреА рд░рд╛рдЦрд┐рдП, рдмрд┐рдиреБ рдкрд╛рдиреА рд╕рдм рд╕реВрдиред рдкрд╛рдиреА рдЧрдП рди рдКрдмрд░реИ, рдореЛрддреА, рдорд╛рдиреБрд╖, рдЪреВрди редред<br>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЪрдЯрдХрд╛рдп</div>
                <div class="definition">рдЪрдЯрдХрд╛рдХрд░</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдмрд┐рдерд╛</div>
                <div class="definition">рд╡реНрдпрдерд╛, рджреБрдГрдЦ, рд╡реЗрджрдирд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЧреЛрдп</div>
                <div class="definition">рдЫрд┐рдкрд╛рдХрд░</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЕрдард┐рд▓реИрд╣реИрдВ</div>
                <div class="definition">рдЗрдард▓рд╛рдирд╛, рдордЬрд╝рд╛рдХ рдЙрдбрд╝рд╛рдирд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рд╕реАрдВрдЪрд┐рдмреЛ</div>
                <div class="definition">рд╕рд┐рдВрдЪрд╛рдИ рдХрд░рдирд╛, рдкреМрдзреЛрдВ рдореЗрдВ рдкрд╛рдиреА рджреЗрдирд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЕрдШрд╛рдп</div>
                <div class="definition">рддреГрдкреНрдд</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЕрд░рде</div>
                <div class="definition">рдорд╛рдпрдиреЗ, рдЖрд╢рдп</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдереЛрд░реЗ</div>
                <div class="definition">рдереЛрдбрд╝рд╛, рдХрдо</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдкрдВрдХ</div>
                <div class="definition">рдХреАрдЪрдбрд╝</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЙрджрдзрд┐</div>
                <div class="definition">рд╕рд╛рдЧрд░</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдирд╛рдж</div>
                <div class="definition">рдзреНрд╡рдирд┐</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рд░реАрдЭрд┐</div>
                <div class="definition">рдореЛрд╣рд┐рдд рд╣реЛрдХрд░</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдмрд┐рдЧрд░реА</div>
                <div class="definition">рдмрд┐рдЧрдбрд╝реА рд╣реБрдИ</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдлрд╛рдЯреЗ рджреВрдз</div>
                <div class="definition">рдлрдЯрд╛ рд╣реБрдЖ рджреВрдз</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдордереЗ</div>
                <div class="definition">рдмрд┐рд▓реЛрдирд╛, рдордердирд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЖрд╡реЗ</div>
                <div class="definition">рдЖрдирд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдирд┐рдЬ</div>
                <div class="definition">рдЕрдкрдирд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдмрд┐рдкрддрд┐</div>
                <div class="definition">рдореБрд╕реАрдмрдд, рд╕рдВрдХрдЯ</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдкрд┐рдЖрд╕реЛ</div>
                <div class="definition">рдкреНрдпрд╛рд╕рд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЪрд┐рддреНрд░рдХреВрдЯ</div>
                <div class="definition">рд╡рдирд╡рд╛рд╕ рдХреЗ рд╕рдордп рд╢реНрд░реА рд░рд╛рдордЪрдВрджреНрд░ рдЬреА рд╕реАрддрд╛ рдФрд░ рд▓рдХреНрд╖реНрдордг рдХреЗ рд╕рд╛рде рдХреБрдЫ рд╕рдордп рддрдХ рдЪрд┐рддреНрд░рдХреВрдЯ рдореЗрдВ рд░рд╣реЗ рдереЗред</div>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдкреНрд░реЗрдо рдХрд╛ рдзрд╛рдЧрд╛ рдЯреВрдЯрдиреЗ рдкрд░ рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?</div>
                <div class="comprehension-question">2. рд╣рдореЗрдВ рдЕрдкрдирд╛ рджреБрдГрдЦ рджреВрд╕рд░реЛрдВ рдкрд░ рдХреНрдпреЛрдВ рдирд╣реАрдВ рдкреНрд░рдХрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдП?</div>
                <div class="comprehension-question">3. рдПрдХ рдХреЛ рд╕рд╛рдзрдиреЗ рд╕реЗ рд╕рдм рдХреИрд╕реЗ рд╕рдз рдЬрд╛рддрд╛ рд╣реИ?</div>
                <div class="comprehension-question">4. рдкрд╛рдиреА рдХреЗ рдорд╣рддреНрддреНрд╡ рдХреЛ рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рд╕рдордЭрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ?</div>
            </div>
        `
    }
];

// Show a specific part of the story
function showStoryPart(partNumber) {
    if (partNumber < 1 || partNumber > storyParts.length) return;
    
    console.log(`Loading story part ${partNumber}`);
    
    // Update navigation buttons
    document.querySelectorAll('.story-nav-btn').forEach((btn, index) => {
        btn.classList.toggle('active', index + 1 === partNumber);
        btn.setAttribute('aria-pressed', index + 1 === partNumber ? 'true' : 'false');
    });
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) {
        console.error('Story content container not found');
        return;
    }
    
    // Create a container for this part if it doesn't exist
    let partContainer = document.getElementById(`storyPart${partNumber}`);
    if (!partContainer) {
        partContainer = document.createElement('div');
        partContainer.id = `storyPart${partNumber}`;
        partContainer.className = 'story-part';
        storyContent.appendChild(partContainer);
    }
    
    // Hide all parts and show the selected one
    document.querySelectorAll('.story-part').forEach(part => {
        part.classList.remove('active');
    });
    partContainer.classList.add('active');
    
    // Load content if not already loaded
    if (!partContainer.innerHTML.trim()) {
        const part = storyParts[partNumber - 1];
        if (!part) {
            console.error(`Story part ${partNumber} not found`);
            return;
        }
        
        partContainer.innerHTML = `
            <h3 class="story-part-title">${part.title}</h3>
            ${part.content}
        `;
        
        // Add event listeners to vocabulary terms
        partContainer.querySelectorAll('.highlight-vocab').forEach(term => {
            term.addEventListener('click', function() {
                const word = this.textContent.split('\n')[0].trim();
                const definition = this.querySelector('.vocab-tooltip').textContent;
                
                if (window.narrator) {
                    window.narrator.speak(`${word}: ${definition}`);
                }
            });
        });
        
        // Add read aloud button for this part
        const readAloudBtn = document.createElement('button');
        readAloudBtn.className = 'interactive-btn read-part-btn';
        readAloudBtn.innerHTML = 'ЁЯФК рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ';
        readAloudBtn.setAttribute('aria-label', `рднрд╛рдЧ ${partNumber} рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ`);
        readAloudBtn.onclick = function() { readStoryPartAloud(partNumber, true); }; // true = manual call
        
        // Add button to the end of the part
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'button-container';
        buttonContainer.appendChild(readAloudBtn);
        partContainer.appendChild(buttonContainer);
    }
    
    // Scroll to top of story
    storyContent.scrollTop = 0;
    
    // Stop any ongoing narration when switching parts
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration due to part switch');
        window.narrator.stop();
        
        // Clear any reading indicators from previous parts
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Clear any paragraph highlights from previous parts
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
    }
    
    // Announce part change with narrator if available
    if (window.narrator) {
        // Small delay to ensure the previous narration has stopped
        setTimeout(() => {
            // Automatically start reading the new part when switching within story module
            console.log(`Auto-starting narration for story part ${partNumber}`);
            readStoryPartAloud(partNumber, false); // false = automatic call
        }, 100);
    }
}

// Read a specific story part aloud
function readStoryPartAloud(partNumber, isManualCall = true) {
    console.log(`Reading story part ${partNumber} aloud (manual: ${isManualCall})`);
    
    // Enable auto-narration only when user manually starts reading
    if (isManualCall) {
        autoNarrationEnabled = true;
        narrationDisabledByUser = false; // Re-enable auto-narration when user manually starts
    }
    
    // Track user interaction for speech synthesis
    if (typeof trackUserInteraction === 'function') {
        trackUserInteraction();
    }
    
    // Stop any ongoing narration first to avoid interruption errors
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration before starting new one');
        window.narrator.stop();
    }
    
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    const part = storyParts[partNumber - 1];
    if (!part) {
        console.error(`Story part ${partNumber} not found`);
        return;
    }
    
    // Extract plain text from the story part
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = part.content;
    
    // Get all paragraphs and remove vocabulary notes
    const paragraphs = tempDiv.querySelectorAll('p');
    
    // Get poem text if it exists
    const poemText = tempDiv.querySelector('.poem-text');
    
    // Filter out empty paragraphs and those that are part of vocabulary notes
    const validParagraphs = Array.from(paragraphs).filter(p => {
        // Skip if it's empty
        if (p.textContent.trim().length === 0) return false;
        
        // Skip if it's inside a vocabulary note
        if (p.closest('.vocabulary-note')) return false;
        
        // Skip if it's inside a comprehension check
        if (p.closest('.comprehension-check')) return false;
        
        // Skip if it's a button or interactive element
        if (p.closest('button') || p.tagName === 'BUTTON') return false;
        
        return true;
    });
    
    // Extract text content to read
    let storyText = '';
    
    // Add title
    storyText += `${part.title}. `;
    
    // Add paragraph content
    if (validParagraphs.length > 0) {
        storyText += validParagraphs
            .map(p => {
                let text = p.textContent.trim();
                // Remove vocabulary tooltip content that might be included
                text = text.replace(/\s+/g, ' '); // Normalize whitespace
                return text;
            })
            .filter(text => text.length > 0) // Remove empty strings
            .join(' ');
    }
    
    // Add poem content if it exists
    if (poemText) {
        if (storyText.length > 0) {
            storyText += " ";
        }
        storyText += poemText.textContent.replace(/\s+/g, ' ').trim();
    }
    
    console.log(`Prepared text for narration (${storyText.length} characters)`);
    
    // Read the text aloud
    if (window.narrator && window.narrator.enabled) {
        try {
            // Show reading indicator
            const partContainer = document.getElementById(`storyPart${partNumber}`);
            if (partContainer) {
                // Remove any existing reading indicators
                const existingIndicators = partContainer.querySelectorAll('.reading-indicator');
                existingIndicators.forEach(indicator => indicator.remove());
                
                // Create new reading indicator
                const readingIndicator = document.createElement('div');
                readingIndicator.className = 'reading-indicator';
                readingIndicator.id = `reading-indicator-${partNumber}`;
                readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдкрдврд╝рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...';
                
                // Find button container or create one if it doesn't exist
                let buttonContainer = partContainer.querySelector('.button-container');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.className = 'button-container';
                    partContainer.appendChild(buttonContainer);
                }
                
                buttonContainer.appendChild(readingIndicator);
                
                // Add stop button
                const stopButton = document.createElement('button');
                stopButton.className = 'interactive-btn stop-narration-btn';
                stopButton.innerHTML = 'тП╣я╕П рдкрдврд╝рдирд╛ рд░реЛрдХреЗрдВ';
                stopButton.onclick = stopNarration;
                readingIndicator.appendChild(stopButton);
                
                // Remove indicator when narration ends or after timeout
                window.readingTimeout = setTimeout(() => {
                    if (readingIndicator.parentNode) {
                        readingIndicator.classList.add('fade-out');
                        setTimeout(() => readingIndicator.remove(), 500);
                    }
                }, Math.min(storyText.length * 100, 60000)); // Dynamic timeout based on text length, max 1 minute
            }
            
            // Register narration end event
            if (window.narrator.onEndCallback) {
                window.narrator.onEndCallback = null;
            }
            
            window.narrator.onEndCallback = function() {
                const indicator = document.getElementById(`reading-indicator-${partNumber}`);
                if (indicator) {
                    indicator.classList.add('fade-out');
                    setTimeout(() => {
                        if (indicator.parentNode) indicator.remove();
                    }, 500);
                }
                
                if (window.readingTimeout && typeof clearTimeout === 'function') {
                    clearTimeout(window.readingTimeout);
                }
            };
            
            // Start narration
            window.narrator.speak(storyText);
            console.log('Narration started');
            
            // Highlight paragraphs as they are being read
            const elementsToHighlight = [...validParagraphs];
            if (poemText) {
                elementsToHighlight.push(poemText);
            }
            highlightParagraphsSequentially(elementsToHighlight);
            
        } catch (error) {
            console.error('Error starting narration:', error);
            alert('рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╡рд╛рдЪрди рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
        }
    } else {
        console.error('Narrator not available');
        alert('рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕реНрдкреАрдЪ рд╕рд┐рдВрдереЗрд╕рд┐рд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред');
    }
}

// Stop ongoing narration
function stopNarration() {
    if (window.narrator) {
        window.narrator.stop();
        console.log('Narration stopped');
        
        // Disable auto-narration when user manually stops
        autoNarrationEnabled = false;
        narrationDisabledByUser = true; // Mark that user has disabled narration
        
        // Remove all reading indicators
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Remove all paragraph highlights
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
        
        // Clear any timeouts
        if (window.readingTimeout && typeof clearTimeout === 'function') {
            clearTimeout(window.readingTimeout);
        }
        
        if (window.highlightTimeouts && typeof clearTimeout === 'function') {
            window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
            window.highlightTimeouts = [];
        }
    }
}

// Highlight paragraphs sequentially as they are being read
function highlightParagraphsSequentially(paragraphs) {
    // Clear any existing highlight timeouts
    if (window.highlightTimeouts && typeof clearTimeout === 'function') {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
    }
    
    window.highlightTimeouts = [];
    
    // Remove any existing highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Calculate approximate time per paragraph based on length
    const totalTextLength = paragraphs.reduce((sum, p) => sum + p.textContent.length, 0);
    let cumulativeLength = 0;
    
    // Estimate total reading time (about 15 characters per second)
    const totalReadingTime = totalTextLength / 15 * 1000;
    
    // Highlight each paragraph at the appropriate time
    paragraphs.forEach((paragraph, index) => {
        const textLength = paragraph.textContent.length;
        const startPercentage = cumulativeLength / totalTextLength;
        cumulativeLength += textLength;
        
        // Calculate when to highlight this paragraph
        const highlightTime = startPercentage * totalReadingTime;
        
        // Set timeout to add highlight
        const highlightTimeout = setTimeout(() => {
            // Remove highlight from previous paragraphs
            if (index > 0) {
                paragraphs[index - 1].classList.remove('paragraph-highlight');
            }
            
            // Add highlight to current paragraph
            paragraph.classList.add('paragraph-highlight');
            
            // Scroll to the paragraph
            paragraph.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, highlightTime);
        
        window.highlightTimeouts.push(highlightTimeout);
    });
    
    // Clear highlights when done
    const clearHighlightsTimeout = setTimeout(() => {
        paragraphs.forEach(p => p.classList.remove('paragraph-highlight'));
    }, totalReadingTime + 1000);
    
    window.highlightTimeouts.push(clearHighlightsTimeout);
}

// Highlight vocabulary words in the text
function highlightVocabulary() {
    const vocabTerms = document.querySelectorAll('.highlight-vocab');
    
    vocabTerms.forEach(term => {
        term.classList.toggle('active-highlight');
    });
    
    // Show a message that vocabulary highlighting is toggled
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = 'рд╢рдмреНрджрд╛рд░реНрде рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╣реИрдВред рдЕрд░реНрде рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╢рдмреНрджреЛрдВ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}

// Toggle print-friendly mode
function togglePrintMode() {
    document.body.classList.toggle('print-mode');
    
    // Show a message that print mode is toggled
    const isPrintMode = document.body.classList.contains('print-mode');
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = isPrintMode ? 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдкреНрд░рд┐рдВрдЯ рдлрд╝рдВрдХреНрд╢рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред' : 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}
