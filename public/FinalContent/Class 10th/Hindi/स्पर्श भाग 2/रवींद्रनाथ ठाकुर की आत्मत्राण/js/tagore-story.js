/**
 * Story content and functionality for Ravindranath Tagore's Atmatran
 */

// Global variables to track narration state
let autoNarrationEnabled = false;
let narrationDisabledByUser = false;

// Story parts data
const storyParts = [
    {
        title: "рд▓реЗрдЦрдХ рдкрд░рд┐рдЪрдп",
        content: `
            <p>рд░рд╡реАрдВрджреНрд░рдирд╛рде рдард╛рдХреБрд░ рдХрд╛ рдЬрдиреНрдо 6 рдордИ 1861 рдХреЛ рдмрдВрдЧрд╛рд▓ рдХреЗ рдПрдХ рд╕рдВрдкрдиреНрди рдкрд░рд┐рд╡рд╛рд░ рдореЗрдВ рд╣реБрдЖ рдерд╛ред рд╡реЗ рдиреЛрдмреЗрд▓ рдкреБрд░рд╕реНрдХрд╛рд░ рдкрд╛рдиреЗ рд╡рд╛рд▓реЗ рдкрд╣рд▓реЗ рднрд╛рд░рддреАрдп рд╣реИрдВред рдЗрдирдХреА рд╢рд┐рдХреНрд╖рд╛-рджреАрдХреНрд╖рд╛ рдШрд░ рдкрд░ рд╣реА рд╣реБрдИ рдФрд░ рдЫреЛрдЯреА рдЙрдореНрд░ рдореЗрдВ рд╣реА рд╕реНрд╡рд╛рдзреНрдпрд╛рдп рд╕реЗ рдЕрдиреЗрдХ рд╡рд┐рд╖рдпреЛрдВ рдХрд╛ рдЬреНрдЮрд╛рди рдЕрд░реНрдЬрд┐рдд рдХрд░ рд▓рд┐рдпрд╛ред</p>
            
            <p>рдмреИрд░рд┐рд╕реНрдЯреНрд░реА рдкрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП рд╡рд┐рджреЗрд╢ рднреЗрдЬреЗ рдЧрдП рд▓реЗрдХрд┐рди рдмрд┐рдирд╛ рдкрд░реАрдХреНрд╖рд╛ рджрд┐рдП рд╣реА рд▓реМрдЯ рдЖрдПред рд░рд╡реАрдВрджреНрд░рдирд╛рде рдХреА рд░рдЪрдирд╛рдУрдВ рдореЗрдВ рд▓реЛрдХ-рд╕рдВрд╕реНрдХреГрддрд┐ рдХрд╛ рд╕реНрд╡рд░ рдкреНрд░рдореБрдЦ рд░реВрдк рд╕реЗ рдореБрдЦрд░рд┐рдд рд╣реЛрддрд╛ рд╣реИред рдкреНрд░рдХреГрддрд┐ рд╕реЗ рдЗрдиреНрд╣реЗрдВ рдЧрд╣рд░рд╛ рд▓рдЧрд╛рд╡ рдерд╛ред</p>
            
            <p>рдЗрдиреНрд╣реЛрдВрдиреЗ рд▓рдЧрднрдЧ рдПрдХ рд╣рдЬрд╝рд╛рд░ рдХрд╡рд┐рддрд╛рдПрдБ рдФрд░ рджреЛ рд╣рдЬрд╝рд╛рд░ рдЧреАрдд рд▓рд┐рдЦреЗ рд╣реИрдВред рдЪрд┐рддреНрд░рдХрд▓рд╛, рд╕рдВрдЧреАрдд рдФрд░ рднрд╛рд╡рдиреГрддреНрдп рдХреЗ рдкреНрд░рддрд┐ рдЗрдирдХреЗ рд╡рд┐рд╢реЗрд╖ рдЕрдиреБрд░рд╛рдЧ рдХреЗ рдХрд╛рд░рдг рд░рд╡реАрдВрджреНрд░ рд╕рдВрдЧреАрдд рдирд╛рдо рдХреА рдПрдХ рдЕрд▓рдЧ рдзрд╛рд░рд╛ рдХрд╛ рд╣реА рд╕реВрддреНрд░рдкрд╛рдд рд╣реЛ рдЧрдпрд╛ред</p>
            
            <p>рдЗрдиреНрд╣реЛрдВрдиреЗ рд╢рд╛рдВрддрд┐ рдирд┐рдХреЗрддрди рдирд╛рдо рдХреА рдПрдХ рд╢реИрдХреНрд╖рд┐рдХ рдФрд░ рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╕рдВрд╕реНрдерд╛ рдХреА рд╕реНрдерд╛рдкрдирд╛ рдХреАред рдпрд╣ рдЕрдкрдиреА рддрд░рд╣ рдХрд╛ рдЕрдиреВрдард╛ рд╕рдВрд╕реНрдерд╛рди рдорд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИред рдЕрдкрдиреА рдХрд╛рд╡реНрдп рдХреГрддрд┐ рдЧреАрддрд╛рдВрдЬрд▓рд┐ рдХреЗ рд▓рд┐рдП рдиреЛрдмреЗрд▓ рдкреБрд░рд╕реНрдХрд╛рд░ рд╕реЗ рд╕рдореНрдорд╛рдирд┐рдд рд╣реБрдПред</p>
            
            <p>рд░рд╡реАрдВрджреНрд░рдирд╛рде рдард╛рдХреБрд░ рдХреА рдЕрдиреНрдп рдкреНрд░рдореБрдЦ рдХреГрддрд┐рдпрд╛рдБ рд╣реИрдВ- рдиреИрд╡реИрджреНрдп, рдкреВрд░рдмреА, рдмрд▓рд╛рдХрд╛, рдХреНрд╖рдгрд┐рдХрд╛, рдЪрд┐рддреНрд░ рдФрд░ рд╕рд╛рдВрдзреНрдпрдЧреАрдд, рдХрд╛рдмреБрд▓реАрд╡рд╛рд▓рд╛ рдФрд░ рд╕реИрдХрдбрд╝реЛрдВ рдЕрдиреНрдп рдХрд╣рд╛рдирд┐рдпрд╛рдБ; рдЙрдкрдиреНрдпрд╛рд╕-рдЧреЛрд░рд╛, рдШрд░реЗ рдмрд╛рдЗрд░реЗ рдФрд░ рд░рд╡реАрдВрджреНрд░ рдХреЗ рдирд┐рдмрдВрдзред</p>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рд░рд╡реАрдВрджреНрд░рдирд╛рде рдард╛рдХреБрд░ рдХрд╛ рдЬрдиреНрдо рдХрдм рдФрд░ рдХрд╣рд╛рдБ рд╣реБрдЖ рдерд╛?</div>
                <div class="comprehension-question">2. рд░рд╡реАрдВрджреНрд░рдирд╛рде рдард╛рдХреБрд░ рдХреЛ рдХрд┐рд╕ рдХреГрддрд┐ рдХреЗ рд▓рд┐рдП рдиреЛрдмреЗрд▓ рдкреБрд░рд╕реНрдХрд╛рд░ рдорд┐рд▓рд╛?</div>
                <div class="comprehension-question">3. рд╢рд╛рдВрддрд┐ рдирд┐рдХреЗрддрди рдХреНрдпрд╛ рд╣реИ?</div>
                <div class="comprehension-question">4. рд░рд╡реАрдВрджреНрд░рдирд╛рде рдард╛рдХреБрд░ рдХреА рдХреБрдЫ рдкреНрд░рдореБрдЦ рд░рдЪрдирд╛рдУрдВ рдХреЗ рдирд╛рдо рдмрддрд╛рдЗрдПред</div>
            </div>
        `
    },
    {
        title: "рдХрд╡рд┐рддрд╛",
        content: `
            <div class="poem-text">
                рд╡рд┐рдкрджрд╛рдУрдВ рд╕реЗ рдореБрдЭреЗ рдмрдЪрд╛рдУ, рдпрд╣ рдореЗрд░реА рдкреНрд░рд╛рд░реНрдердирд╛ рдирд╣реАрдВ<br>
                рдХреЗрд╡рд▓ рдЗрддрдирд╛ рд╣реЛ (рдХрд░реБрдгрд╛рдордп) рдХрднреА рди рд╡рд┐рдкрджрд╛ рдореЗрдВ рдкрд╛рдКрдБ рднрдпред<br><br>
                
                рджреБрдГрдЦ-рддрд╛рдк рд╕реЗ рд╡реНрдпрдерд┐рдд рдЪрд┐рддреНрдд рдХреЛ рди рджреЛ рд╕рд╛рдВрддреНрд╡рдирд╛ рдирд╣реАрдВ рд╕рд╣реА<br>
                рдкрд░ рдЗрддрдирд╛ рд╣реЛрд╡реЗ (рдХрд░реБрдгрд╛рдордп) рджреБрдЦ рдХреЛ рдореИрдВ рдХрд░ рд╕рдХреВрдБ рд╕рджрд╛ рдЬрдпред<br><br>
                
                рдХреЛрдИ рдХрд╣реАрдВ рд╕рд╣рд╛рдпрдХ рди рдорд┐рд▓реЗ рддреЛ рдЕрдкрдирд╛ рдмрд▓ рдкреМрд░реБрд╖ рди рд╣рд┐рд▓реЗ;<br>
                рд╣рд╛рдирд┐ рдЙрдард╛рдиреА рдкрдбрд╝реЗ рдЬрдЧрддреН рдореЗрдВ рд▓рд╛рдн рдЕрдЧрд░ рд╡рдВрдЪрдирд╛ рд░рд╣реА<br>
                рддреЛ рднреА рдорди рдореЗрдВ рдирд╛ рдорд╛рдиреВрдБ рдХреНрд╖рдпредред<br><br>
                
                рдореЗрд░рд╛ рддреНрд░рд╛рдг рдХрд░реЛ рдЕрдиреБрджрд┐рди рддреБрдо рдпрд╣ рдореЗрд░реА рдкреНрд░рд╛рд░реНрдердирд╛ рдирд╣реАрдВ<br>
                рдмрд╕ рдЗрддрдирд╛ рд╣реЛрд╡реЗ (рдХрд░реБрдгрд╛рдпрдо) рддрд░рдиреЗ рдХреА рд╣реЛ рд╢рдХреНрддрд┐ рдЕрдирд╛рдордпред<br><br>
                
                рдореЗрд░рд╛ рднрд╛рд░ рдЕрдЧрд░ рд▓рдШреБ рдХрд░рдХреЗ рди рджреЛ рд╕рд╛рдВрддреНрд╡рдирд╛ рдирд╣реАрдВ рд╕рд╣реАред<br>
                рдХреЗрд╡рд▓ рдЗрддрдирд╛ рд░рдЦрдирд╛ рдЕрдиреБрдирдп- рд╡рд╣рди рдХрд░ рд╕рдХреВрдБ рдЗрд╕рдХреЛ рдирд┐рд░реНрднрдпред<br><br>
                
                рдирдд рд╢рд┐рд░ рд╣реЛрдХрд░ рд╕реБрдЦ рдХреЗ рджрд┐рди рдореЗрдВ рддрд╡ рдореБрдЦ рдкрд╣рдЪрд╛рдиреВрдБ рдЫрд┐рди-рдЫрд┐рди рдореЗрдВред<br>
                рджреБрдГрдЦ-рд░рд╛рддреНрд░рд┐ рдореЗрдВ рдХрд░реЗ рд╡рдВрдЪрдирд╛ рдореЗрд░реА рдЬрд┐рд╕ рджрд┐рди рдирд┐рдЦрд┐рд▓ рдорд╣реА<br>
                рдЙрд╕ рджрд┐рди рдРрд╕рд╛ рд╣реЛ рдХрд░реБрдгрд╛рдордп, рддреБрдо рдкрд░ рдХрд░реВрдБ рдирд╣реАрдВ рдХреБрдЫ рд╕рдВрд╢рдп редред<br>
                <br>рдЕрдиреБрд╡рд╛рдж : рд╣рдЬрд╛рд░реАрдкреНрд░рд╕рд╛рдж рджреНрд╡рд┐рд╡реЗрджреА
            </div>
            
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдХрд╡рд┐ рдХрд┐рд╕рд╕реЗ рдФрд░ рдХреНрдпрд╛ рдкреНрд░рд╛рд░реНрдердирд╛ рдХрд░ рд░рд╣рд╛ рд╣реИ?</div>
                <div class="comprehension-question">2. рд╡рд┐рдкрджрд╛рдУрдВ рдХреЗ рд╕рдВрджрд░реНрдн рдореЗрдВ рдХрд╡рд┐ рдХреА рдХреНрдпрд╛ рдЗрдЪреНрдЫрд╛ рд╣реИ?</div>
                <div class="comprehension-question">3. рдХрд╡рд┐ рд╕рд╣рд╛рдпрддрд╛ рди рдорд┐рд▓рдиреЗ рдкрд░ рдХреНрдпрд╛ рдкреНрд░рд╛рд░реНрдердирд╛ рдХрд░рддрд╛ рд╣реИ?</div>
                <div class="comprehension-question">4. 'рдЖрддреНрдорддреНрд░рд╛рдг' рд╢реАрд░реНрд╖рдХ рдХреА рд╕рд╛рд░реНрдердХрддрд╛ рд╕рдордЭрд╛рдЗрдПред</div>
            </div>
        `
    }
];

// Show a specific part of the story
function showStoryPart(partNumber) {
    if (partNumber < 1 || partNumber > storyParts.length) return;
    
    console.log(`Loading story part ${partNumber}`);
    
    // Update navigation buttons
    document.querySelectorAll('.story-nav-btn').forEach((btn, index) => {
        btn.classList.toggle('active', index + 1 === partNumber);
        btn.setAttribute('aria-pressed', index + 1 === partNumber ? 'true' : 'false');
    });
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) {
        console.error('Story content container not found');
        return;
    }
    
    // Create a container for this part if it doesn't exist
    let partContainer = document.getElementById(`storyPart${partNumber}`);
    if (!partContainer) {
        partContainer = document.createElement('div');
        partContainer.id = `storyPart${partNumber}`;
        partContainer.className = 'story-part';
        storyContent.appendChild(partContainer);
    }
    
    // Hide all parts and show the selected one
    document.querySelectorAll('.story-part').forEach(part => {
        part.classList.remove('active');
    });
    partContainer.classList.add('active');
    
    // Load content if not already loaded
    if (!partContainer.innerHTML.trim()) {
        const part = storyParts[partNumber - 1];
        if (!part) {
            console.error(`Story part ${partNumber} not found`);
            return;
        }
        
        partContainer.innerHTML = `
            <h3 class="story-part-title">${part.title}</h3>
            ${part.content}
        `;
        
        // Vocabulary highlighting disabled
        
        // Add read aloud button for this part
        const readAloudBtn = document.createElement('button');
        readAloudBtn.className = 'interactive-btn read-part-btn';
        readAloudBtn.innerHTML = 'ЁЯФК рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ';
        readAloudBtn.setAttribute('aria-label', `рднрд╛рдЧ ${partNumber} рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ`);
        readAloudBtn.onclick = function() { readStoryPartAloud(partNumber, true); }; // true = manual call
        
        // Add button to the end of the part
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'button-container';
        buttonContainer.appendChild(readAloudBtn);
        partContainer.appendChild(buttonContainer);
    }
    
    // Scroll to top of story
    storyContent.scrollTop = 0;
    
    // Stop any ongoing narration when switching parts
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration due to part switch');
        window.narrator.stop();
        
        // Clear any reading indicators from previous parts
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Clear any paragraph highlights from previous parts
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
    }
    
    // Announce part change with narrator if available
    if (window.narrator) {
        // Small delay to ensure the previous narration has stopped
        setTimeout(() => {
            // Automatically start reading the new part when switching within story module
            console.log(`Auto-starting narration for story part ${partNumber}`);
            readStoryPartAloud(partNumber, false); // false = automatic call
        }, 100);
    }
}

// Read a specific story part aloud
function readStoryPartAloud(partNumber, isManualCall = true) {
    console.log(`Reading story part ${partNumber} aloud (manual: ${isManualCall})`);
    
    // Enable auto-narration only when user manually starts reading
    if (isManualCall) {
        autoNarrationEnabled = true;
        narrationDisabledByUser = false; // Re-enable auto-narration when user manually starts
    }
    
    // Track user interaction for speech synthesis
    if (typeof trackUserInteraction === 'function') {
        trackUserInteraction();
    }
    
    // Stop any ongoing narration first to avoid interruption errors
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration before starting new one');
        window.narrator.stop();
    }
    
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    const part = storyParts[partNumber - 1];
    if (!part) {
        console.error(`Story part ${partNumber} not found`);
        return;
    }
    
    // Extract plain text from the story part
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = part.content;
    
    // Get all paragraphs and remove vocabulary notes
    const paragraphs = tempDiv.querySelectorAll('p');
    
    // Get poem text if it exists
    const poemText = tempDiv.querySelector('.poem-text');
    
    // Filter out empty paragraphs and those that are part of vocabulary notes
    const validParagraphs = Array.from(paragraphs).filter(p => {
        // Skip if it's empty
        if (p.textContent.trim().length === 0) return false;
        
        // Skip if it's inside a vocabulary note
        if (p.closest('.vocabulary-note')) return false;
        
        // Skip if it's inside a comprehension check
        if (p.closest('.comprehension-check')) return false;
        
        // Skip if it's a button or interactive element
        if (p.closest('button') || p.tagName === 'BUTTON') return false;
        
        return true;
    });
    
    // Extract text content to read
    let storyText = '';
    
    // Add title
    storyText += `${part.title}. `;
    
    // Add paragraph content
    if (validParagraphs.length > 0) {
        storyText += validParagraphs
            .map(p => {
                let text = p.textContent.trim();
                // Remove vocabulary tooltip content that might be included
                text = text.replace(/\s+/g, ' '); // Normalize whitespace
                return text;
            })
            .filter(text => text.length > 0) // Remove empty strings
            .join(' ');
    }
    
    // Add poem content if it exists
    if (poemText) {
        if (storyText.length > 0) {
            storyText += " ";
        }
        storyText += poemText.textContent.replace(/\s+/g, ' ').trim();
    }
    
    console.log(`Prepared text for narration (${storyText.length} characters)`);
    
    // Read the text aloud
    if (window.narrator && window.narrator.enabled) {
        try {
            // Show reading indicator
            const partContainer = document.getElementById(`storyPart${partNumber}`);
            if (partContainer) {
                // Remove any existing reading indicators
                const existingIndicators = partContainer.querySelectorAll('.reading-indicator');
                existingIndicators.forEach(indicator => indicator.remove());
                
                // Create new reading indicator
                const readingIndicator = document.createElement('div');
                readingIndicator.className = 'reading-indicator';
                readingIndicator.id = `reading-indicator-${partNumber}`;
                readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдкрдврд╝рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...';
                
                // Find button container or create one if it doesn't exist
                let buttonContainer = partContainer.querySelector('.button-container');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.className = 'button-container';
                    partContainer.appendChild(buttonContainer);
                }
                
                buttonContainer.appendChild(readingIndicator);
                
                // Add stop button
                const stopButton = document.createElement('button');
                stopButton.className = 'interactive-btn stop-narration-btn';
                stopButton.innerHTML = 'тП╣я╕П рдкрдврд╝рдирд╛ рд░реЛрдХреЗрдВ';
                stopButton.onclick = stopNarration;
                readingIndicator.appendChild(stopButton);
                
                // Remove indicator when narration ends or after timeout
                window.readingTimeout = setTimeout(() => {
                    if (readingIndicator.parentNode) {
                        readingIndicator.classList.add('fade-out');
                        setTimeout(() => readingIndicator.remove(), 500);
                    }
                }, Math.min(storyText.length * 100, 60000)); // Dynamic timeout based on text length, max 1 minute
            }
            
            // Register narration end event
            if (window.narrator.onEndCallback) {
                window.narrator.onEndCallback = null;
            }
            
            window.narrator.onEndCallback = function() {
                const indicator = document.getElementById(`reading-indicator-${partNumber}`);
                if (indicator) {
                    indicator.classList.add('fade-out');
                    setTimeout(() => {
                        if (indicator.parentNode) indicator.remove();
                    }, 500);
                }
                
                if (window.readingTimeout && typeof clearTimeout === 'function') {
                    clearTimeout(window.readingTimeout);
                }
            };
            
            // Start narration
            window.narrator.speak(storyText);
            console.log('Narration started');
            
            // Highlight paragraphs as they are being read
            const elementsToHighlight = [...validParagraphs];
            if (poemText) {
                elementsToHighlight.push(poemText);
            }
            highlightParagraphsSequentially(elementsToHighlight);
            
        } catch (error) {
            console.error('Error starting narration:', error);
            alert('рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╡рд╛рдЪрди рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
        }
    } else {
        console.error('Narrator not available');
        alert('рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕реНрдкреАрдЪ рд╕рд┐рдВрдереЗрд╕рд┐рд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред');
    }
}

// Stop ongoing narration
function stopNarration() {
    if (window.narrator) {
        window.narrator.stop();
        console.log('Narration stopped');
        
        // Disable auto-narration when user manually stops
        autoNarrationEnabled = false;
        narrationDisabledByUser = true; // Mark that user has disabled narration
        
        // Remove all reading indicators
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Remove all paragraph highlights
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
        
        // Clear any timeouts
        if (window.readingTimeout && typeof clearTimeout === 'function') {
            clearTimeout(window.readingTimeout);
        }
        
        if (window.highlightTimeouts && typeof clearTimeout === 'function') {
            window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
            window.highlightTimeouts = [];
        }
    }
}

// Highlight paragraphs sequentially as they are being read
function highlightParagraphsSequentially(paragraphs) {
    // Clear any existing highlight timeouts
    if (window.highlightTimeouts && typeof clearTimeout === 'function') {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
    }
    
    window.highlightTimeouts = [];
    
    // Remove any existing highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Calculate approximate time per paragraph based on length
    const totalTextLength = paragraphs.reduce((sum, p) => sum + p.textContent.length, 0);
    let cumulativeLength = 0;
    
    // Estimate total reading time (about 15 characters per second)
    const totalReadingTime = totalTextLength / 15 * 1000;
    
    // Highlight each paragraph at the appropriate time
    paragraphs.forEach((paragraph, index) => {
        const textLength = paragraph.textContent.length;
        const startPercentage = cumulativeLength / totalTextLength;
        cumulativeLength += textLength;
        
        // Calculate when to highlight this paragraph
        const highlightTime = startPercentage * totalReadingTime;
        
        // Set timeout to add highlight
        const highlightTimeout = setTimeout(() => {
            // Remove highlight from previous paragraphs
            if (index > 0) {
                paragraphs[index - 1].classList.remove('paragraph-highlight');
            }
            
            // Add highlight to current paragraph
            paragraph.classList.add('paragraph-highlight');
            
            // Scroll to the paragraph
            paragraph.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, highlightTime);
        
        window.highlightTimeouts.push(highlightTimeout);
    });
    
    // Clear highlights when done
    const clearHighlightsTimeout = setTimeout(() => {
        paragraphs.forEach(p => p.classList.remove('paragraph-highlight'));
    }, totalReadingTime + 1000);
    
    window.highlightTimeouts.push(clearHighlightsTimeout);
}

// Vocabulary highlighting disabled
function highlightVocabulary() {
    // Function disabled
    console.log('Vocabulary highlighting has been disabled');
}

// Toggle print-friendly mode
function togglePrintMode() {
    document.body.classList.toggle('print-mode');
    
    // Show a message that print mode is toggled
    const isPrintMode = document.body.classList.contains('print-mode');
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = isPrintMode ? 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдкреНрд░рд┐рдВрдЯ рдлрд╝рдВрдХреНрд╢рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред' : 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}
