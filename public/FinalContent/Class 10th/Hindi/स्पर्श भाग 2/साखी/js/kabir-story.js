/**
 * Story content and functionality for Kabir Ke Sakhi
 */

// Global variables to track narration state
let autoNarrationEnabled = false;
let narrationDisabledByUser = false;

// Story parts data
const storyParts = [
    {
        title: "рд▓реЗрдЦрдХ рдкрд░рд┐рдЪрдп",
        content: `
            <p>рдХрдмреАрд░ рдХрд╛ рдЬрдиреНрдо 1398 рдореЗрдВ рдХрд╛рд╢реА рдореЗрдВ рд╣реБрдЖ рдорд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИ рдФрд░ рдЙрдиреНрд╣реЛрдВрдиреЗ 120 рд╡рд░реНрд╖ рдХреА рдЖрдпреБ рдкрд╛рдИ рдереАред рд╡реЗ
            рдЧреБрд░реБ рд░рд╛рдорд╛рдирдВрдж рдХреЗ рд╢рд┐рд╖реНрдп рдереЗред рдЕрдкрдиреЗ рдЬреАрд╡рди рдХреЗ рдЕрдВрддрд┐рдо рдХреБрдЫ рд╡рд░реНрд╖ рдЙрдиреНрд╣реЛрдВрдиреЗ рдордЧрд╣рд░ рдореЗрдВ рдмрд┐рддрд╛рдП, рдЬрд╣рд╛рдБ рд╡реЗ рдЪрд┐рд░рдирд┐рджреНрд░рд╛ рдореЗрдВ рд▓реАрди рд╣реЛ рдЧрдПред</p>
            
            <p>рдХрдмреАрд░ рдХрд╛ рдЖрд╡рд┐рд░реНрднрд╛рд╡ рдРрд╕реЗ рд╕рдордп рдореЗрдВ рд╣реБрдЖ рдЬрдм рд░рд╛рдЬрдиреАрддрд┐рдХ, рдзрд╛рд░реНрдорд┐рдХ рдФрд░ рд╕рд╛рдорд╛рдЬрд┐рдХ рдХреНрд░рд╛рдВрддрд┐рдпрд╛рдБ рдЕрдкрдиреЗ рдЪрд░рдо рдкрд░ рдереАрдВред рд╡реЗ рдХреНрд░рд╛рдВрддрджрд░реНрд╢реА рдХрд╡рд┐ рдереЗ рдЬрд┐рдирдХреА рдХрд╡рд┐рддрд╛ рдореЗрдВ рдЧрд╣рд░реА <span class="highlight-vocab">рд╕рд╛рдорд╛рдЬрд┐рдХ рдЪреЗрддрдирд╛<span class="vocab-tooltip">рд╕рдорд╛рдЬ рдХреЗ рдкреНрд░рддрд┐ рдЬрд╛рдЧрд░реВрдХрддрд╛</span></span> рдЭрд▓рдХрддреА рд╣реИред</p>
            
            <div class="vocabulary-note">
                <div class="word">рд╕рд╛рдорд╛рдЬрд┐рдХ рдЪреЗрддрдирд╛</div>
                <div class="definition">рд╕рдорд╛рдЬ рдХреЗ рдкреНрд░рддрд┐ рдЬрд╛рдЧрд░реВрдХрддрд╛</div>
            </div>
            
            <p>рдЙрдиреНрд╣реЛрдВрдиреЗ рдзрд░реНрдо рдХреЗ <span class="highlight-vocab">рдЖрдбрдВрдмрд░реЛрдВ<span class="vocab-tooltip">рджрд┐рдЦрд╛рд╡рд╛, рдкрд╛рдЦрдВрдб</span></span> рдкрд░ рддреАрдЦреА рдЪреЛрдЯ рдХреА рдФрд░ рдЖрддреНрдорд╛-рдкрд░рдорд╛рддреНрдорд╛ рдХреЗ рд╡рд┐рд░рд╣-рдорд┐рд▓рди рдХреЗ рднрд╛рд╡рдкреВрд░реНрдг рдЧреАрдд рдЧрд╛рдПред рд╡реЗ рд╢рд╛рд╕реНрддреНрд░реАрдп рдЬреНрдЮрд╛рди рд╕реЗ рдЕрдзрд┐рдХ рдЕрдиреБрднрд╡ рдХреЗ рдЬреНрдЮрд╛рди рдХреЛ рдорд╣рддреНрд╡ рджреЗрддреЗ рдереЗред</p>
            
            <div class="vocabulary-note">
                <div class="word">рдЖрдбрдВрдмрд░</div>
                <div class="definition">рджрд┐рдЦрд╛рд╡рд╛, рдкрд╛рдЦрдВрдб</div>
            </div>
            
            <p>рдХрдмреАрд░ рдХрд╛ рдорд╛рдирдирд╛ рдерд╛ рдХрд┐ рдИрд╢реНрд╡рд░ рдПрдХ рд╣реИ, <span class="highlight-vocab">рдирд┐рд░реНрд╡рд┐рдХрд╛рд░<span class="vocab-tooltip">рд╡рд┐рдХрд╛рд░реЛрдВ рд╕реЗ рд░рд╣рд┐рдд</span></span> рд╣реИ рдФрд░ <span class="highlight-vocab">рдЕрд░реВрдк<span class="vocab-tooltip">рдЬрд┐рд╕рдХрд╛ рдХреЛрдИ рд░реВрдк рди рд╣реЛ</span></span> рд╣реИред рдЙрдирдХреА рднрд╛рд╖рд╛ рдкреВрд░реНрд╡реА рдЬрдирдкрдж рдХреА рднрд╛рд╖рд╛ рдереА рдФрд░ рдЙрдиреНрд╣реЛрдВрдиреЗ рд╕рдмрдж рдФрд░ рд╕рд╛рдЦрд┐рдпреЛрдВ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЬрди-рдЬрди рддрдХ рдЕрдкрдиреА рдмрд╛рдд рдкрд╣реБрдВрдЪрд╛рдИред</p>
            
            <div class="vocabulary-note">
                <div class="word">рдирд┐рд░реНрд╡рд┐рдХрд╛рд░</div>
                <div class="definition">рд╡рд┐рдХрд╛рд░реЛрдВ рд╕реЗ рд░рд╣рд┐рдд</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЕрд░реВрдк</div>
                <div class="definition">рдЬрд┐рд╕рдХрд╛ рдХреЛрдИ рд░реВрдк рди рд╣реЛ</div>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдХрдмреАрд░ рдХрд╛ рдЬрдиреНрдо рдХрд╣рд╛рдБ рдФрд░ рдХрдм рд╣реБрдЖ рдерд╛?</div>
                <div class="comprehension-question">2. рдХрдмреАрд░ рдХрд┐рд╕рдХреЗ рд╢рд┐рд╖реНрдп рдереЗ?</div>
                <div class="comprehension-question">3. рдХрдмреАрд░ рдХреА рдХрд╡рд┐рддрд╛ рдХреА рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ рдХреНрдпрд╛ рдереАрдВ?</div>
                <div class="comprehension-question">4. рдХрдмреАрд░ рдХрд╛ рдИрд╢реНрд╡рд░ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреНрдпрд╛ рдорд╛рдирдирд╛ рдерд╛?</div>
            </div>
        `
    },
    {
        title: "рдХрд╡рд┐рддрд╛",
        content: `
            <div class="poem-text">
                рдРрд╕реА рдмрд╛рдБрдгреА рдмреЛрд▓рд┐рдпреЗ, рдорди рдХрд╛ рдЖрдкрд╛ рдЦреЛрдЗред<br>
                рдЕрдкрдирд╛ рддрди рд╕реАрддрд▓ рдХрд░реИ, рдФрд░рди рдХреМрдВ рд╕реБрдЦ рд╣реЛрдЗредред<br><br>
                
                рдХрд╕реНрддреВрд░реА рдХреБрдВрдбрд▓рд┐ рдмрд╕реИ, рдореГрдЧ рдвреВрдБрдвреИ рдмрди рдорд╛рдБрд╣рд┐ред<br>
                рдРрд╕реИрдВ рдШрдЯрд┐ рдШрдЯрд┐ рд░рд╛рдБрдо рд╣реИ, рджреБрдирд┐рдпрд╛рдБ рджреЗрдЦреЗ рдирд╛рдБрд╣рд┐рдВредред<br><br>
                
                рдЬрдм рдореИрдВ рдерд╛ рддрдм рд╣рд░рд┐ рдирд╣реАрдВ, рдЕрдм рд╣рд░рд┐ рд╣реИрдВ рдореИрдВ рдирд╛рдБрд╣рд┐ред<br>
                рд╕рдм рдЕрдБрдзрд┐рдпрд╛рд░рд╛ рдорд┐рдЯрд┐ рдЧрдпрд╛, рдЬрдм рджреАрдкрдХ рджреЗрдЦреНрдпрд╛ рдорд╛рдБрд╣рд┐редред<br><br>
                
                рд╕реБрдЦрд┐рдпрд╛ рд╕рдм рд╕рдВрд╕рд╛рд░ рд╣реИ, рдЦрд╛рдпреИ рдЕрд░реВ рд╕реЛрд╡реИред<br>
                рджреБрдЦрд┐рдпрд╛ рджрд╛рд╕ рдХрдмреАрд░ рд╣реИ, рдЬрд╛рдЧреИ рдЕрд░реВ рд░реЛрд╡реИредред<br><br>
                
                рдмрд┐рд░рд╣ рднреБрд╡рдВрдЧрдо рддрди рдмрд╕реИ, рдордВрддреНрд░ рди рд▓рд╛рдЧреИ рдХреЛрдЗред<br>
                рд░рд╛рдо рдмрд┐рдпреЛрдЧреА рдирд╛ рдЬрд┐рд╡реИ, рдЬрд┐рд╡реИ рддреЛ рдмреМрд░рд╛ рд╣реЛрдЗредред<br><br>
                
                рдирд┐рдВрджрдХ рдиреЗрдбрд╝рд╛ рд░рд╛рдЦрд┐рдпреЗ, рдЖрдБрдЧрдгрд┐ рдХреБрдЯреА рдмрдБрдзрд╛рдЗред<br>
                рдмрд┐рди рд╕рд╛рдмрдг рдкрд╛рдБрдгреАрдВ рдмрд┐рдирд╛, рдирд┐рд░рдорд▓ рдХрд░реИ рд╕реБрднрд╛рдЗредред<br><br>
                
                рдкреЛрдереА рдкрдврд╝рд┐ рдкрдврд╝рд┐ рдЬрдЧ рдореБрд╡рд╛, рдкрдВрдбрд┐рдд рднрдпрд╛ рди рдХреЛрдЗред<br>
                рдРрдХреИ рдЕрд╖рд┐рд░ рдкреАрд╡ рдХрд╛, рдкрдврд╝реЗ рд╕реБ рдкрдВрдбрд┐рдд рд╣реЛрдЗредред<br><br>
                
                рд╣рдо рдШрд░ рдЬрд╛рд▓реНрдпрд╛ рдЖрдкрдгрд╛рдБ, рд▓рд┐рдпрд╛ рдореБрд░рд╛рдбрд╝рд╛ рд╣рд╛рдерд┐ред<br>
                рдЕрдм рдШрд░ рдЬрд╛рд▓реМрдВ рддрд╛рд╕ рдХрд╛, рдЬреЗ рдЪрд▓реИ рд╣рдорд╛рд░реЗ рд╕рд╛рдерд┐редред<br>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдмрд╛рдБрдгреА</div>
                <div class="definition">рдмреЛрд▓реА</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЖрдкрд╛</div>
                <div class="definition">рдЕрд╣рдВ (рдЕрд╣рдВрдХрд╛рд░)</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдХреБрдВрдбрд▓рд┐</div>
                <div class="definition">рдирд╛рднрд┐</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдШрдЯрд┐ рдШрдЯрд┐</div>
                <div class="definition">рдШрдЯ-рдШрдЯ рдореЗрдВ / рдХрдг-рдХрдг рдореЗрдВ</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рднреБрд╡рдВрдЧрдо</div>
                <div class="definition">рднреБрдЬрдВрдЧ / рд╕рд╛рдБрдк</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдмреМрд░рд╛</div>
                <div class="definition">рдкрд╛рдЧрд▓</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдиреЗрдбрд╝рд╛</div>
                <div class="definition">рдирд┐рдХрдЯ</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЖрдБрдЧрдгрд┐</div>
                <div class="definition">рдЖрдБрдЧрди</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рд╕рд╛рдмрдг</div>
                <div class="definition">рд╕рд╛рдмреБрди</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЕрд╖рд┐рд░</div>
                <div class="definition">рдЕрдХреНрд╖рд░</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдкреАрд╡</div>
                <div class="definition">рдкреНрд░рд┐рдп</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдореБрд░рд╛рдбрд╝рд╛</div>
                <div class="definition">рдЬрд▓рддреА рд▓рдХрдбрд╝реА</div>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдореАрдареА рд╡рд╛рдгреА рдмреЛрд▓рдиреЗ рд╕реЗ рдХреНрдпрд╛ рд▓рд╛рдн рд╣реЛрддрд╛ рд╣реИ?</div>
                <div class="comprehension-question">2. рдИрд╢реНрд╡рд░ рдХрд╣рд╛рдБ рдирд┐рд╡рд╛рд╕ рдХрд░рддреЗ рд╣реИрдВ рдлрд┐рд░ рднреА рд▓реЛрдЧ рдЙрдиреНрд╣реЗрдВ рдХреНрдпреЛрдВ рдирд╣реАрдВ рджреЗрдЦ рдкрд╛рддреЗ?</div>
                <div class="comprehension-question">3. рдХрдмреАрд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдХреМрди рд╕реБрдЦреА рд╣реИ рдФрд░ рдХреМрди рджреБрдЦреА рд╣реИ?</div>
                <div class="comprehension-question">4. рдкрдВрдбрд┐рдд рдХреМрди рд╣реИ?</div>
            </div>
        `
    }
];

// Show a specific part of the story
function showStoryPart(partNumber) {
    if (partNumber < 1 || partNumber > storyParts.length) return;
    
    console.log(`Loading story part ${partNumber}`);
    
    // Update navigation buttons
    document.querySelectorAll('.story-nav-btn').forEach((btn, index) => {
        btn.classList.toggle('active', index + 1 === partNumber);
        btn.setAttribute('aria-pressed', index + 1 === partNumber ? 'true' : 'false');
    });
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) {
        console.error('Story content container not found');
        return;
    }
    
    // Create a container for this part if it doesn't exist
    let partContainer = document.getElementById(`storyPart${partNumber}`);
    if (!partContainer) {
        partContainer = document.createElement('div');
        partContainer.id = `storyPart${partNumber}`;
        partContainer.className = 'story-part';
        storyContent.appendChild(partContainer);
    }
    
    // Hide all parts and show the selected one
    document.querySelectorAll('.story-part').forEach(part => {
        part.classList.remove('active');
    });
    partContainer.classList.add('active');
    
    // Load content if not already loaded
    if (!partContainer.innerHTML.trim()) {
        const part = storyParts[partNumber - 1];
        if (!part) {
            console.error(`Story part ${partNumber} not found`);
            return;
        }
        
        partContainer.innerHTML = `
            <h3 class="story-part-title">${part.title}</h3>
            ${part.content}
        `;
        
        // Add event listeners to vocabulary terms
        partContainer.querySelectorAll('.highlight-vocab').forEach(term => {
            term.addEventListener('click', function() {
                const word = this.textContent.split('\n')[0].trim();
                const definition = this.querySelector('.vocab-tooltip').textContent;
                
                if (window.narrator) {
                    window.narrator.speak(`${word}: ${definition}`);
                }
            });
        });
        
        // Add read aloud button for this part
        const readAloudBtn = document.createElement('button');
        readAloudBtn.className = 'interactive-btn read-part-btn';
        readAloudBtn.innerHTML = 'ЁЯФК рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ';
        readAloudBtn.setAttribute('aria-label', `рднрд╛рдЧ ${partNumber} рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ`);
        readAloudBtn.onclick = function() { readStoryPartAloud(partNumber, true); }; // true = manual call
        
        // Add button to the end of the part
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'button-container';
        buttonContainer.appendChild(readAloudBtn);
        partContainer.appendChild(buttonContainer);
    }
    
    // Scroll to top of story
    storyContent.scrollTop = 0;
    
    // Stop any ongoing narration when switching parts
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration due to part switch');
        window.narrator.stop();
        
        // Clear any reading indicators from previous parts
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Clear any paragraph highlights from previous parts
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
    }
    
    // Announce part change with narrator if available
    if (window.narrator) {
        // Small delay to ensure the previous narration has stopped
        setTimeout(() => {
            // Automatically start reading the new part when switching within story module
            console.log(`Auto-starting narration for story part ${partNumber}`);
            readStoryPartAloud(partNumber, false); // false = automatic call
        }, 100);
    }
}

// Read a specific story part aloud
function readStoryPartAloud(partNumber, isManualCall = true) {
    console.log(`Reading story part ${partNumber} aloud (manual: ${isManualCall})`);
    
    // Enable auto-narration only when user manually starts reading
    if (isManualCall) {
        autoNarrationEnabled = true;
        narrationDisabledByUser = false; // Re-enable auto-narration when user manually starts
    }
    
    // Track user interaction for speech synthesis
    if (typeof trackUserInteraction === 'function') {
        trackUserInteraction();
    }
    
    // Stop any ongoing narration first to avoid interruption errors
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration before starting new one');
        window.narrator.stop();
    }
    
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    const part = storyParts[partNumber - 1];
    if (!part) {
        console.error(`Story part ${partNumber} not found`);
        return;
    }
    
    // Extract plain text from the story part
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = part.content;
    
    // Get all paragraphs and remove vocabulary notes
    const paragraphs = tempDiv.querySelectorAll('p');
    
    // Get poem text if it exists
    const poemText = tempDiv.querySelector('.poem-text');
    
    // Filter out empty paragraphs and those that are part of vocabulary notes
    const validParagraphs = Array.from(paragraphs).filter(p => {
        // Skip if it's empty
        if (p.textContent.trim().length === 0) return false;
        
        // Skip if it's inside a vocabulary note
        if (p.closest('.vocabulary-note')) return false;
        
        // Skip if it's inside a comprehension check
        if (p.closest('.comprehension-check')) return false;
        
        // Skip if it's a button or interactive element
        if (p.closest('button') || p.tagName === 'BUTTON') return false;
        
        return true;
    });
    
    // Extract text content to read
    let storyText = '';
    
    // Add title
    storyText += `${part.title}. `;
    
    // Add paragraph content
    if (validParagraphs.length > 0) {
        storyText += validParagraphs
            .map(p => {
                let text = p.textContent.trim();
                // Remove vocabulary tooltip content that might be included
                text = text.replace(/\s+/g, ' '); // Normalize whitespace
                return text;
            })
            .filter(text => text.length > 0) // Remove empty strings
            .join(' ');
    }
    
    // Add poem content if it exists
    if (poemText) {
        if (storyText.length > 0) {
            storyText += " ";
        }
        storyText += poemText.textContent.replace(/\s+/g, ' ').trim();
    }
    
    console.log(`Prepared text for narration (${storyText.length} characters)`);
    
    // Read the text aloud
    if (window.narrator && window.narrator.enabled) {
        try {
            // Show reading indicator
            const partContainer = document.getElementById(`storyPart${partNumber}`);
            if (partContainer) {
                // Remove any existing reading indicators
                const existingIndicators = partContainer.querySelectorAll('.reading-indicator');
                existingIndicators.forEach(indicator => indicator.remove());
                
                // Create new reading indicator
                const readingIndicator = document.createElement('div');
                readingIndicator.className = 'reading-indicator';
                readingIndicator.id = `reading-indicator-${partNumber}`;
                readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдкрдврд╝рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...';
                
                // Find button container or create one if it doesn't exist
                let buttonContainer = partContainer.querySelector('.button-container');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.className = 'button-container';
                    partContainer.appendChild(buttonContainer);
                }
                
                buttonContainer.appendChild(readingIndicator);
                
                // Add stop button
                const stopButton = document.createElement('button');
                stopButton.className = 'interactive-btn stop-narration-btn';
                stopButton.innerHTML = 'тП╣я╕П рдкрдврд╝рдирд╛ рд░реЛрдХреЗрдВ';
                stopButton.onclick = stopNarration;
                readingIndicator.appendChild(stopButton);
                
                // Remove indicator when narration ends or after timeout
                window.readingTimeout = setTimeout(() => {
                    if (readingIndicator.parentNode) {
                        readingIndicator.classList.add('fade-out');
                        setTimeout(() => readingIndicator.remove(), 500);
                    }
                }, Math.min(storyText.length * 100, 60000)); // Dynamic timeout based on text length, max 1 minute
            }
            
            // Register narration end event
            if (window.narrator.onEndCallback) {
                window.narrator.onEndCallback = null;
            }
            
            window.narrator.onEndCallback = function() {
                const indicator = document.getElementById(`reading-indicator-${partNumber}`);
                if (indicator) {
                    indicator.classList.add('fade-out');
                    setTimeout(() => {
                        if (indicator.parentNode) indicator.remove();
                    }, 500);
                }
                
                if (window.readingTimeout && typeof clearTimeout === 'function') {
                    clearTimeout(window.readingTimeout);
                }
            };
            
            // Start narration
            window.narrator.speak(storyText);
            console.log('Narration started');
            
            // Highlight paragraphs as they are being read
            const elementsToHighlight = [...validParagraphs];
            if (poemText) {
                elementsToHighlight.push(poemText);
            }
            highlightParagraphsSequentially(elementsToHighlight);
            
        } catch (error) {
            console.error('Error starting narration:', error);
            alert('рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╡рд╛рдЪрди рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
        }
    } else {
        console.error('Narrator not available');
        alert('рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕реНрдкреАрдЪ рд╕рд┐рдВрдереЗрд╕рд┐рд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред');
    }
}

// Stop ongoing narration
function stopNarration() {
    if (window.narrator) {
        window.narrator.stop();
        console.log('Narration stopped');
        
        // Disable auto-narration when user manually stops
        autoNarrationEnabled = false;
        narrationDisabledByUser = true; // Mark that user has disabled narration
        
        // Remove all reading indicators
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Remove all paragraph highlights
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
        
        // Clear any timeouts
        if (window.readingTimeout && typeof clearTimeout === 'function') {
            clearTimeout(window.readingTimeout);
        }
        
        if (window.highlightTimeouts && typeof clearTimeout === 'function') {
            window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
            window.highlightTimeouts = [];
        }
    }
}

// Highlight paragraphs sequentially as they are being read
function highlightParagraphsSequentially(paragraphs) {
    // Clear any existing highlight timeouts
    if (window.highlightTimeouts && typeof clearTimeout === 'function') {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
    }
    
    window.highlightTimeouts = [];
    
    // Remove any existing highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Calculate approximate time per paragraph based on length
    const totalTextLength = paragraphs.reduce((sum, p) => sum + p.textContent.length, 0);
    let cumulativeLength = 0;
    
    // Estimate total reading time (about 15 characters per second)
    const totalReadingTime = totalTextLength / 15 * 1000;
    
    // Highlight each paragraph at the appropriate time
    paragraphs.forEach((paragraph, index) => {
        const textLength = paragraph.textContent.length;
        const startPercentage = cumulativeLength / totalTextLength;
        cumulativeLength += textLength;
        
        // Calculate when to highlight this paragraph
        const highlightTime = startPercentage * totalReadingTime;
        
        // Set timeout to add highlight
        const highlightTimeout = setTimeout(() => {
            // Remove highlight from previous paragraphs
            if (index > 0) {
                paragraphs[index - 1].classList.remove('paragraph-highlight');
            }
            
            // Add highlight to current paragraph
            paragraph.classList.add('paragraph-highlight');
            
            // Scroll to the paragraph
            paragraph.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, highlightTime);
        
        window.highlightTimeouts.push(highlightTimeout);
    });
    
    // Clear highlights when done
    const clearHighlightsTimeout = setTimeout(() => {
        paragraphs.forEach(p => p.classList.remove('paragraph-highlight'));
    }, totalReadingTime + 1000);
    
    window.highlightTimeouts.push(clearHighlightsTimeout);
}

// Highlight vocabulary words in the text
function highlightVocabulary() {
    const vocabTerms = document.querySelectorAll('.highlight-vocab');
    
    vocabTerms.forEach(term => {
        term.classList.toggle('active-highlight');
    });
    
    // Show a message that vocabulary highlighting is toggled
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = 'рд╢рдмреНрджрд╛рд░реНрде рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╣реИрдВред рдЕрд░реНрде рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╢рдмреНрджреЛрдВ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}

// Toggle print-friendly mode
function togglePrintMode() {
    document.body.classList.toggle('print-mode');
    
    // Show a message that print mode is toggled
    const isPrintMode = document.body.classList.contains('print-mode');
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = isPrintMode ? 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдкреНрд░рд┐рдВрдЯ рдлрд╝рдВрдХреНрд╢рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред' : 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}
