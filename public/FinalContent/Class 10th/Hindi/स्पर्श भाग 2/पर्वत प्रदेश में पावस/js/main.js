/**
 * Main functionality for Parvat Pradesh Me Pavas interactive learning module
 */

// Global Variables
let progress = 0;
let score = 0;
let modulesCompleted = [];
let currentModule = 'intro';
let audioEnabled = true;
let narrator = null;
let timeStarted = Date.now();
let userInteracted = false;

// Global narration state management
let globalNarrationState = {
    isEnabled: false,
    disabledByUser: false,
    currentModule: null,
    currentPart: null
};

// Initialize on load
window.addEventListener('load', () => {
    initializeNarrator();
    updateTimer();
    setInterval(updateTimer, 1000);
    
    // Add global user interaction tracking
    document.addEventListener('click', trackUserInteraction, { once: true });
    document.addEventListener('keydown', trackUserInteraction, { once: true });
    document.addEventListener('touchstart', trackUserInteraction, { once: true });
    
    // Don't speak immediately - wait for user interaction
});

// Initialize Narrator
function initializeNarrator() {
    if ('speechSynthesis' in window) {
        console.log('Initializing narrator...');
        narrator = {
            synth: window.speechSynthesis,
            enabled: true,
            voice: null,
            isSafari: /^((?!chrome|android).)*safari/i.test(navigator.userAgent),
            isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,
            currentUtterance: null,
            onEndCallback: null,
            
            speak: function(text) {
                if (!this.enabled) return;
                
                // Ensure narrator is properly initialized
                if (!this.synth) {
                    console.error('Speech synthesis not available');
                    return;
                }
                
                // Check if user has interacted (required for autoplay policy)
                if (!userInteracted) {
                    console.log('Speech synthesis blocked - waiting for user interaction');
                    this.showFallbackMessage(text);
                    return;
                }
                
                // Cancel any ongoing speech
                this.synth.cancel();
                
                // Pre-process text for better narration quality
                const processedText = this.preprocessText(text);
                
                // Create new utterance
                const utterance = new SpeechSynthesisUtterance(processedText);
                
                // Set voice parameters based on browser
                this.optimizeVoiceParameters(utterance);
                
                // Select appropriate voice if available
                if (!this.voice) {
                    // Initialize voices if not done already
                    this.initializeVoices();
                }
                
                if (this.voice) {
                    utterance.voice = this.voice;
                }
                
                // Add error handling
                utterance.onerror = (event) => {
                    console.error('Speech synthesis error:', event);
                    if (event.error === 'not-allowed') {
                        console.log('Speech synthesis not allowed - showing fallback message');
                        userInteracted = false; // Reset interaction flag
                        this.showFallbackMessage(processedText);
                    } else if (event.error === 'interrupted') {
                        console.log('Speech synthesis was interrupted - this is normal when switching content');
                        // Don't show fallback message for interruptions as they're expected
                    } else {
                        console.log('Speech synthesis error - showing fallback message');
                        this.showFallbackMessage(processedText);
                    }
                };
                
                // Store current utterance for reference
                this.currentUtterance = utterance;
                
                // Set up end event handler
                utterance.onend = (event) => {
                    console.log('Speech ended');
                    // Clear current utterance reference
                    this.currentUtterance = null;
                    if (this.onEndCallback && typeof this.onEndCallback === 'function') {
                        this.onEndCallback();
                    }
                };
                
                // Safari/iOS specific handling
                if (this.isSafari || this.isIOS) {
                    this.speakForSafari(utterance, processedText);
                } else {
                    // Speak the text for other browsers
                    this.synth.speak(utterance);
                }
            },
            
            // Safari-specific speech handling
            speakForSafari: function(utterance, text) {
                // Safari has issues with long text, so we'll chunk it
                const chunks = this.chunkText(text);
                
                // Queue each chunk with a slight delay between them
                let i = 0;
                const speakNextChunk = () => {
                    if (i < chunks.length && this.enabled) {
                        const chunkUtterance = new SpeechSynthesisUtterance(chunks[i]);
                        // Copy properties from original utterance
                        chunkUtterance.voice = utterance.voice;
                        chunkUtterance.rate = utterance.rate;
                        chunkUtterance.pitch = utterance.pitch;
                        chunkUtterance.volume = utterance.volume;
                        
                        // Set up to speak next chunk when this one ends
                        chunkUtterance.onend = () => {
                            i++;
                            if (i < chunks.length) {
                                setTimeout(speakNextChunk, 50); // Small delay between chunks
                            } else {
                                // Last chunk finished, trigger the end callback
                                console.log('Safari speech completed');
                                if (this.onEndCallback && typeof this.onEndCallback === 'function') {
                                    this.onEndCallback();
                                }
                            }
                        };
                        
                        chunkUtterance.onerror = (event) => {
                            console.error('Speech synthesis error in chunk:', event);
                            i++;
                            if (i < chunks.length) {
                                setTimeout(speakNextChunk, 50);
                            } else {
                                // Last chunk errored, still trigger the end callback
                                if (this.onEndCallback && typeof this.onEndCallback === 'function') {
                                    this.onEndCallback();
                                }
                            }
                        };
                        
                        this.synth.speak(chunkUtterance);
                    }
                };
                
                speakNextChunk();
            },
            
            // Break text into smaller chunks for better Safari performance
            chunkText: function(text) {
                // Split by sentences and ensure chunks aren't too long
                const sentences = text.match(/[^.!?]+[.!?]+/g) || [text];
                const chunks = [];
                let currentChunk = '';
                
                sentences.forEach(sentence => {
                    // If adding this sentence would make the chunk too long, start a new chunk
                    if (currentChunk.length + sentence.length > 200) {
                        if (currentChunk) chunks.push(currentChunk);
                        currentChunk = sentence;
                    } else {
                        currentChunk += sentence;
                    }
                });
                
                if (currentChunk) chunks.push(currentChunk);
                return chunks.length ? chunks : [text];
            },
            
            // Preprocess text for better speech quality
            preprocessText: function(text) {
                // Remove emojis
                text = text.replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{1F900}-\u{1F9FF}\u{1F1E0}-\u{1F1FF}]/gu, '');
                
                // Replace abbreviations and symbols for better pronunciation in Hindi
                let processed = text
                    .replace(/рдбреЙ\./g, "рдбреЙрдХреНрдЯрд░ ")
                    .replace(/рд╢реНрд░реА\./g, "рд╢реНрд░реАрдорд╛рди ")
                    .replace(/рд╕рдВ\./g, "рд╕рдВрд╡рдд ")
                    .replace(/рдкреГ\./g, "рдкреГрд╖реНрда ")
                    .replace(/\&/g, " рдФрд░ ")
                    .replace(/\$/g, " рд░реБрдкрдпреЗ ")
                    .replace(/\%/g, " рдкреНрд░рддрд┐рд╢рдд ")
                    .replace(/ЁЯФК/g, "")
                    .replace(/ЁЯУЪ/g, "")
                    .replace(/ЁЯУЭ/g, "")
                    .replace(/ЁЯУЦ/g, "")
                    .replace(/тЭУ/g, "")
                    .replace(/ЁЯОп/g, "")
                    .replace(/ЁЯФд/g, "")
                    .replace(/ЁЯЧгя╕П/g, "")
                    .replace(/ЁЯУК/g, "")
                    .replace(/ЁЯФЗ/g, "");
                
                // Add pauses at punctuation for more natural speech
                processed = this.addNaturalPauses(processed);
                
                return processed;
            },
            
            // Set optimal voice parameters based on browser
            optimizeVoiceParameters: function(utterance) {
                if (this.isSafari || this.isIOS) {
                    // Safari/iOS needs different parameters
                    utterance.rate = 0.9;   // Slightly slower
                    utterance.pitch = 1.0;  // Normal pitch
                    utterance.volume = 1.0; // Full volume
                } else {
                    // Chrome/Firefox/Edge parameters
                    utterance.rate = 0.85;  // Slightly slower for better clarity
                    utterance.pitch = 1.05; // Slightly higher pitch for female voice
                    utterance.volume = 1.0; // Full volume
                }
            },
            
            initializeVoices: function() {
                // Get available voices
                const voices = this.synth.getVoices();
                console.log('Available voices:', voices.map(v => v.name + ' (' + v.lang + ')'));
                
                // Try to find a Hindi voice
                let preferredVoice = voices.find(voice => 
                    voice.lang.startsWith('hi') || // Hindi voices
                    voice.name.includes('Hindi')
                );
                
                // If no Hindi voice is available, try to find an Indian English voice
                if (!preferredVoice) {
                    preferredVoice = voices.find(voice => 
                        voice.name.includes('Indian') || 
                        voice.name.includes('India')
                    );
                }
                
                // Fall back to any English voice if no Hindi or Indian English voice is available
                if (!preferredVoice) {
                    preferredVoice = voices.find(voice => voice.lang.startsWith('en'));
                }
                
                // Use any available voice as last resort
                if (!preferredVoice && voices.length > 0) {
                    preferredVoice = voices[0];
                }
                
                if (preferredVoice) {
                    this.voice = preferredVoice;
                    console.log('Selected voice:', preferredVoice.name);
                } else {
                    console.warn('No suitable voice found for narration');
                }
            },
            
            addNaturalPauses: function(text) {
                // Add extra spaces at punctuation for more natural speech pauses
                return text
                    .replace(/\.\s/g, '.  ')
                    .replace(/\!\s/g, '!  ')
                    .replace(/\?\s/g, '?  ')
                    .replace(/,\s/g, ',  ')
                    .replace(/;\s/g, ';  ')
                    .replace(/:\s/g, ':  ')
                    .replace(/ред\s/g, 'ред  '); // For Hindi punctuation
            },
            
            stop: function() {
                this.synth.cancel();
                
                // Clear current utterance reference
                this.currentUtterance = null;
                
                // Clear any callbacks
                if (this.onEndCallback) {
                    this.onEndCallback = null;
                }
                
                console.log('Speech synthesis stopped');
            },
            
            toggle: function() {
                this.enabled = !this.enabled;
                if (!this.enabled) this.stop();
                return this.enabled;
            },
            
            showFallbackMessage: function(text) {
                // Create a fallback message box if speech fails
                const fallback = document.createElement('div');
                fallback.className = 'narrator-fallback';
                fallback.innerHTML = `
                    <div class="fallback-header">
                        <h4>рд╡рд╛рдЪрдХ рдХрд╣рддреЗ рд╣реИрдВ:</h4>
                        <button class="fallback-close" onclick="this.parentNode.parentNode.remove()">├Ч</button>
                    </div>
                    <p>${text}</p>
                `;
                document.body.appendChild(fallback);
                
                // Auto-remove after 8 seconds
                setTimeout(() => {
                    if (fallback.parentNode) {
                        fallback.classList.add('fade-out');
                        setTimeout(() => fallback.remove(), 500);
                    }
                }, 8000);
            }
        };
        
        // Make narrator available globally for other modules
        window.narrator = narrator;
        
        // Handle voices being loaded asynchronously in some browsers
        if (window.speechSynthesis.onvoiceschanged !== undefined) {
            window.speechSynthesis.onvoiceschanged = function() {
                narrator.initializeVoices();
            };
        } else {
            // For Safari which doesn't always fire onvoiceschanged
            setTimeout(() => {
                if (!narrator.voice) {
                    narrator.initializeVoices();
                }
            }, 1000);
        }
        
    } else {
        console.warn('Speech synthesis not supported in this browser');
    }
}

// Update Timer
function updateTimer() {
    const elapsed = Math.floor((Date.now() - timeStarted) / 1000);
    const minutes = Math.floor(elapsed / 60);
    const seconds = elapsed % 60;
    document.getElementById('timeSpent').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
}

// Track user interaction for speech synthesis
function trackUserInteraction() {
    if (!userInteracted) {
        userInteracted = true;
        console.log('User interaction detected - speech synthesis enabled');
    }
    return userInteracted;
}

// Module Navigation
function showModule(moduleId) {
    console.log(`Showing module: ${moduleId}`);
    
    // Stop any ongoing narration when switching modules
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration due to module switch');
        window.narrator.stop();
        
        // Clear any reading indicators from previous modules
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Clear any paragraph highlights from previous modules
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
        
        // Clear any timeouts
        if (window.readingTimeout && typeof clearTimeout === 'function') {
            clearTimeout(window.readingTimeout);
        }
        
        if (window.highlightTimeouts && typeof clearTimeout === 'function') {
            window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
            window.highlightTimeouts = [];
        }
    }
    
    // Hide all modules
    document.querySelectorAll('.module').forEach(m => m.classList.remove('active'));
    
    // Show selected module
    const moduleElement = document.getElementById(moduleId);
    if (!moduleElement) {
        console.error(`Module element not found: ${moduleId}`);
        return;
    }
    
    moduleElement.classList.add('active');
    
    // Update navigation
    document.querySelectorAll('.nav-item').forEach(n => {
        n.classList.remove('active');
        n.setAttribute('aria-pressed', 'false');
    });
    
    // Find and update the clicked nav item
    const navItems = document.querySelectorAll('.nav-item');
    for (let item of navItems) {
        if (item.onclick && item.onclick.toString().includes(moduleId)) {
            item.classList.add('active');
            item.setAttribute('aria-pressed', 'true');
            break;
        }
    }
    
    // Track completion
    if (!modulesCompleted.includes(moduleId)) {
        modulesCompleted.push(moduleId);
        updateProgress();
        showAchievement(`рдореЙрдбреНрдпреВрд▓ рдкреВрд░реНрдг: ${getModuleName(moduleId)}`);
    }
    
    currentModule = moduleId;
    
    // Handle specific module initialization
    switch(moduleId) {
        case 'story':
            // Always show Part 1 when entering the story module
            if (typeof showStoryPart === 'function') {
                showStoryPart(1);
            }
            break;
        case 'prereading':
            console.log('Initializing prereading module');
            // Auto-update progress for reflection section
            if (typeof saveReflection === 'function') {
                setTimeout(saveReflection, 2000); // Delay to ensure the module is visible
            }
            break;
        case 'thinking-text':
            console.log('Initializing thinking-text module');
            break;
        case 'thinking-language':
            console.log('Initializing thinking-language module');
            // Auto-update progress for expression practice section since answers are shown
            if (typeof updateProgress === 'function') {
                updateProgress('language', 100);
            }
            break;
        case 'activities':
            console.log('Initializing activities module');
            break;
    }
    
    // Automatically start narrating the new module content
    setTimeout(() => {
        startModuleNarration(moduleId);
    }, 200); // Small delay to ensure module is fully loaded
    
    // Scroll to top
    window.scrollTo(0, 0);
}

// Start module narration automatically
function startModuleNarration(moduleId) {
    if (!window.narrator || !window.narrator.enabled) {
        console.log('Narrator not available or disabled');
        return;
    }
    
    switch(moduleId) {
        case 'intro':
            if (window.narrator) {
                // Get the intro content
                const introModule = document.getElementById('intro');
                if (introModule) {
                    const contentBlocks = introModule.querySelectorAll('.content-block');
                    let introContent = "рдкрд░реНрд╡рдд рдкреНрд░рджреЗрд╢ рдореЗрдВ рдкрд╛рд╡рд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред ";
                    
                    // Extract text from content blocks
                    contentBlocks.forEach(block => {
                        const paragraphs = block.querySelectorAll('p');
                        paragraphs.forEach(p => {
                            introContent += p.textContent + " ";
                        });
                    });
                    
                    // Speak the full intro content
                    window.narrator.speak(introContent);
                } else {
                    // Fallback if module not found
                    window.narrator.speak("рдкрд░реНрд╡рдд рдкреНрд░рджреЗрд╢ рдореЗрдВ рдкрд╛рд╡рд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдпрд╣ рдкрд╛рда рд╕реБрдорд┐рддреНрд░рд╛рдирдВрджрди рдкрдВрдд рдХреЗ рдЬреАрд╡рди рдФрд░ рдЙрдирдХреА рдХрд╡рд┐рддрд╛ рдХрд╛ рдЕрдиреНрд╡реЗрд╖рдг рдХрд░рддрд╛ рд╣реИред");
                }
            }
            break;
            
        case 'prereading':
            if (window.narrator) {
                // Get the prereading content
                const prereadingModule = document.getElementById('prereading');
                if (prereadingModule) {
                    const contentBlocks = prereadingModule.querySelectorAll('.content-block');
                    let prereadingContent = "рдЖрдЗрдП рд╢реБрд░реВ рдХрд░реЗрдВред ";
                    
                    // Extract text from content blocks
                    contentBlocks.forEach(block => {
                        const paragraphs = block.querySelectorAll('p');
                        paragraphs.forEach(p => {
                            prereadingContent += p.textContent + " ";
                        });
                    });
                    
                    // Add the activity title
                    const activityTitle = prereadingModule.querySelector('.activity-title');
                    if (activityTitle) {
                        prereadingContent += activityTitle.textContent + "ред ";
                    }
                    
                    // Speak the full prereading content
                    speakInSequence(prereadingContent);
                } else {
                    // Fallback if module not found
                    window.narrator.speak("рдкрд╛рда рдкреНрд░рд╡реЗрд╢ рдЦрдВрдб рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдпрд╣рд╛рдВ рд╣рдо рдкрд░реНрд╡рдд рдкреНрд░рджреЗрд╢ рдореЗрдВ рдкрд╛рд╡рд╕ рдХрд╡рд┐рддрд╛ рдХреЗ рд╕рдВрджрд░реНрдн рдФрд░ рдорд╣рддреНрд╡ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░реЗрдВрдЧреЗред");
                }
            }
            break;
            
        case 'story':
            // Automatically start reading the first part of the story
            if (typeof readStoryPartAloud === 'function') {
                readStoryPartAloud(1, false); // false = automatic call
            }
            break;
            
        case 'thinking-text':
            if (window.narrator) {
                window.narrator.speak("рдкреНрд░рд╢реНрди-рдЕрднреНрдпрд╛рд╕ рдЦрдВрдб рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдпрд╣рд╛рдВ рдЖрдк рдХрд╡рд┐рддрд╛ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдХреЗ рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рдЙрддреНрддрд░ рджреЗрдВрдЧреЗред");
            }
            break;
            
        case 'thinking-language':
            if (window.narrator) {
                window.narrator.speak("рднрд╛рд╖рд╛ рдЕрдзреНрдпрдпрди рдЦрдВрдб рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдпрд╣рд╛рдВ рдЖрдк рд╢рдмреНрджреЛрдВ рдФрд░ рдЙрдирдХреЗ рдкреНрд░рдЪрд▓рд┐рдд рд░реВрдкреЛрдВ рдХрд╛ рдЕрдзреНрдпрдпрди рдХрд░реЗрдВрдЧреЗред");
            }
            break;
            
        case 'activities':
            if (window.narrator) {
                window.narrator.speak("рдЧрддрд┐рд╡рд┐рдзрд┐ рдЦрдВрдб рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдпрд╣рд╛рдВ рдЖрдк рд╡рд┐рднрд┐рдиреНрди рдХреНрд░рд┐рдпрд╛рдХрд▓рд╛рдкреЛрдВ рдореЗрдВ рднрд╛рдЧ рд▓реЗрдВрдЧреЗред");
            }
            break;
            
        default:
            console.log(`No specific narration defined for module: ${moduleId}`);
            break;
    }
}

// Get a friendly name for a module
function getModuleName(moduleId) {
    switch (moduleId) {
        case 'intro': return 'рдкрд░рд┐рдЪрдп';
        case 'prereading': return 'рдкрд╛рда рдкреНрд░рд╡реЗрд╢';
        case 'story': return 'рдХрд╡рд┐рддрд╛';
        case 'thinking-text': return 'рдкреНрд░рд╢реНрди рдЕрднреНрдпрд╛рд╕';
        case 'thinking-language': return 'рднрд╛рд╖рд╛ рдЕрдзреНрдпрдпрди';
        case 'activities': return 'рдЧрддрд┐рд╡рд┐рдзрд┐рдпрд╛рдВ';
        default: return moduleId;
    }
}

// Update Progress
function updateProgress() {
    progress = (modulesCompleted.length / 6) * 100;
    const progressBar = document.getElementById('progressBar');
    progressBar.style.width = progress + '%';
    progressBar.textContent = Math.round(progress) + '%';
    document.getElementById('modulesComplete').textContent = modulesCompleted.length;
    
    // Update ARIA values
    const progressBarContainer = document.querySelector('.progress-bar');
    if (progressBarContainer) {
        progressBarContainer.setAttribute('aria-valuenow', Math.round(progress));
    }
}

// Show Achievement
function showAchievement(text) {
    const popup = document.getElementById('achievementPopup');
    document.getElementById('achievementDesc').textContent = text;
    popup.classList.add('show');
    
    score += 10;
    document.getElementById('totalScore').textContent = score;
    
    setTimeout(() => {
        popup.classList.remove('show');
    }, 3000);
    
    // Note: No narration here - achievements should not be announced
}

// Start Journey
function startJourney() {
    trackUserInteraction(); // Enable speech synthesis
    showModule('prereading');
    if (narrator) {
        // Get the prereading content for a more complete narration
        const prereadingModule = document.getElementById('prereading');
        if (prereadingModule) {
            const contentBlocks = prereadingModule.querySelectorAll('.content-block');
            let prereadingContent = "рдкрд░реНрд╡рдд рдкреНрд░рджреЗрд╢ рдореЗрдВ рдкрд╛рд╡рд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдЖрдЗрдП рдкрд╛рда рдкреНрд░рд╡реЗрд╢ рд╕реЗ рд╢реБрд░реВ рдХрд░рддреЗ рд╣реИрдВ рдФрд░ рдЗрд╕ рдХрд╡рд┐рддрд╛ рдХреЗ рдЕрд░реНрде рдФрд░ рдорд╣рддреНрд╡ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирддреЗ рд╣реИрдВред ";
            
            // Extract text from content blocks
            contentBlocks.forEach(block => {
                const paragraphs = block.querySelectorAll('p');
                paragraphs.forEach(p => {
                    prereadingContent += p.textContent + " ";
                });
            });
            
            // Speak the full content using the sequence function
            speakInSequence(prereadingContent);
        } else {
            // Fallback if module not found
            narrator.speak("рдкрд░реНрд╡рдд рдкреНрд░рджреЗрд╢ рдореЗрдВ рдкрд╛рд╡рд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдЖрдЗрдП рдкрд╛рда рдкреНрд░рд╡реЗрд╢ рд╕реЗ рд╢реБрд░реВ рдХрд░рддреЗ рд╣реИрдВ рдФрд░ рдЗрд╕ рдХрд╡рд┐рддрд╛ рдХреЗ рдЕрд░реНрде рдФрд░ рдорд╣рддреНрд╡ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирддреЗ рд╣реИрдВред");
        }
    }
}

// Toggle Audio
function toggleAudio() {
    trackUserInteraction(); // Enable speech synthesis when user interacts with audio controls
    if (!narrator) return;
    
    const btn = document.getElementById('audioBtn');
    audioEnabled = narrator.toggle();
    btn.textContent = audioEnabled ? 'ЁЯФК' : 'ЁЯФЗ';
    btn.classList.toggle('muted', !audioEnabled);
    btn.setAttribute('aria-label', audioEnabled ? 'рд╡рд╛рдЪрди рдмрдВрдж рдХрд░реЗрдВ' : 'рд╡рд╛рдЪрди рд╢реБрд░реВ рдХрд░реЗрдВ');
}

// Toggle Print Mode
function togglePrintMode() {
    document.body.classList.toggle('print-mode');
    
    if (document.body.classList.contains('print-mode')) {
        if (narrator) {
            narrator.speak("рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреГрд╖реНрда рдЕрдм рдкреНрд░рд┐рдВрдЯрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдЕрдиреБрдХреВрд▓рд┐рдд рд╣реИред");
        }
    } else {
        if (narrator) {
            narrator.speak("рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред");
        }
    }
}

// Function to speak longer text in sequence by breaking it into sentences
function speakInSequence(text) {
    if (!window.narrator) return;
    
    // Break the text into sentences
    const sentences = text.match(/[^.!?ред]+[.!?ред]+/g) || [text];
    
    // Function to speak sentences sequentially
    function speakNextSentence(index = 0) {
        if (index >= sentences.length) return;
        
        // Set callback for when this sentence ends
        window.narrator.onEndCallback = function() {
            // Small pause between sentences
            setTimeout(() => {
                speakNextSentence(index + 1);
            }, 200);
        };
        
        // Speak the current sentence
        window.narrator.speak(sentences[index]);
    }
    
    // Start speaking the first sentence
    speakNextSentence(0);
}

// Highlight Vocabulary
function highlightVocabulary() {
    document.querySelectorAll('.highlight-vocab').forEach(vocab => {
        vocab.style.background = '#ffeb3b';
    });
    
    if (narrator) {
        narrator.speak("рд╢рдмреНрджрд╛рд░реНрде рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╣реИрдВред рдЙрди рдкрд░ рдорд╛рдЙрд╕ рд▓рд╛рдХрд░ рдЙрдирдХреЗ рдЕрд░реНрде рджреЗрдЦреЗрдВред");
    }
}

// Handle reflection progress - Auto-updates progress when the reflection section is viewed
function saveReflection() {
    // Auto-update progress when user views the reflection section
    score += 15;
    document.getElementById('totalScore').textContent = score;
    
    if (!modulesCompleted.includes('prereading')) {
        modulesCompleted.push('prereading');
        updateProgress();
        showAchievement('рдкреНрд░рдХреГрддрд┐ рдкрд░ рдЪрд┐рдВрддрди рдкреВрд░реНрдг!');
    }
    
    if (narrator) {
        narrator.speak("рдкреНрд░рдХреГрддрд┐ рдкрд░ рдЪрд┐рдВрддрди рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ рдХреЛ рдорд╛рдкрджрдВрдбреЛрдВ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЬрд╛рдВрдЪреЗрдВред");
    }
}

// Save listening notes
function saveListeningNotes() {
    const notes = document.getElementById('listeningNotes').value.trim();
    const narrative = document.getElementById('narrativeAccount').value.trim();
    
    if (notes.length < 20 || narrative.length < 50) {
        alert('рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рд╡рд┐рд╕реНрддреГрдд рдиреЛрдЯреНрд╕ рдФрд░ рдХрдерд╛ рд▓рд┐рдЦреЗрдВред');
        return;
    }
    
    // Save the notes (in a real app, this would be sent to a server)
    alert('рдЖрдкрдХреЗ рдиреЛрдЯреНрд╕ рдФрд░ рдХрдерд╛ рд╕рд╣реЗрдЬ рд▓реА рдЧрдИ рд╣реИрдВ!');
    
    // Update progress
    score += 15;
    document.getElementById('totalScore').textContent = score;
    
    if (!modulesCompleted.includes('activities')) {
        modulesCompleted.push('activities');
        updateProgress();
        showAchievement('рд╢реНрд░рд╡рдг рдЧрддрд┐рд╡рд┐рдзрд┐ рдкреВрд░реНрдг!');
    }
    
    if (narrator) {
        narrator.speak("рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛! рдЖрдкрдХреЗ рдиреЛрдЯреНрд╕ рдФрд░ рдХрдерд╛ рд╕рд╣реЗрдЬ рд▓реА рдЧрдИ рд╣реИрдВред");
    }
}

// Save writing
function saveWriting() {
    const writing = document.getElementById('writingPad').value.trim();
    
    if (writing.length < 100) {
        alert('рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рд╡рд┐рд╕реНрддреГрдд рд▓реЗрдЦ рд▓рд┐рдЦреЗрдВ (рдХрдо рд╕реЗ рдХрдо 100 рдЕрдХреНрд╖рд░)ред');
        return;
    }
    
    // Save the writing (in a real app, this would be sent to a server)
    alert('рдЖрдкрдХрд╛ рд▓реЗрдЦ рд╕рд╣реЗрдЬ рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!');
    
    // Update progress
    score += 15;
    document.getElementById('totalScore').textContent = score;
    
    if (narrator) {
        narrator.speak("рдЙрддреНрдХреГрд╖реНрдЯ рдХрд╛рд░реНрдп! рдЖрдкрдХрд╛ рд▓реЗрдЦ рд╕рд╣реЗрдЬ рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред");
    }
}

// Record speaking response
function recordSpeaking() {
    // In a real app, this would access the microphone and record audio
    alert('рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рдореЗрдВ, рдпрд╣ Web Audio API рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЖрдкрдХреА рдмреЛрд▓реА рд╣реБрдИ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдЧрд╛ред');
    
    // Update progress
    score += 10;
    document.getElementById('totalScore').textContent = score;
    
    if (narrator) {
        narrator.speak("рдХрд┐рд╕реА рдРрд╕реЗ рд╡реНрдпрдХреНрддрд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реЛрдЪреЗрдВ рдЬреЛ рджреГрдврд╝рддрд╛, рд╕рдВрдХрд▓реНрдк рдФрд░ рдЗрдЪреНрдЫрд╛рд╢рдХреНрддрд┐ рдЬреИрд╕реЗ рдЧреБрдг рдкреНрд░рджрд░реНрд╢рд┐рдд рдХрд░рддрд╛ рд╣реИред рдЙрдирдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВред");
    }
}

// Play listening activity
function playListeningActivity() {
    // Track user interaction for speech synthesis
    trackUserInteraction();
    
    // In a real app, this would play an audio file
    console.log('Playing listening activity audio');
    
    // Show the notes section
    const notesSection = document.querySelector('.listening-notes');
    if (notesSection) {
        notesSection.style.display = 'block';
    }
    
    // Use narrator to speak the text
    if (narrator) {
        // Create more comprehensive biographical text
        const biographicalText = 
            "рд╕реБрдорд┐рддреНрд░рд╛рдирдВрджрди рдкрдВрдд рдХрд╛ рдЬрдиреНрдо 20 рдордИ 1900 рдХреЛ рдЙрддреНрддрд░рд╛рдЦрдВрдб рдХреЗ рдХреМрд╕рд╛рдиреА-рдЕрд▓рдореЛрдбрд╝рд╛ рдореЗрдВ рд╣реБрдЖ рдерд╛ред " +
            "рдЙрдиреНрд╣реЛрдВрдиреЗ рдмрдЪрдкрди рд╕реЗ рд╣реА рдХрд╡рд┐рддрд╛ рд▓рд┐рдЦрдирд╛ рд╢реБрд░реВ рдХрд░ рджрд┐рдпрд╛ рдерд╛ред рдорд╛рддреНрд░ рд╕рд╛рдд рд╕рд╛рд▓ рдХреА рдЙрдореНрд░ рдореЗрдВ рд╕реНрдХреВрд▓ рдореЗрдВ рдХрд╛рд╡реНрдп рдкрд╛рда рдХреЗ рд▓рд┐рдП рдкреБрд░рд╕реНрдХреГрдд рд╣реБрдПред " +
            "рдЙрдиреНрд╣реЛрдВрдиреЗ 1915 рдореЗрдВ рд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ рд╕рд╛рд╣рд┐рддреНрдп рд╕реГрдЬрди рд╢реБрд░реВ рдХрд┐рдпрд╛ рдФрд░ рдЫрд╛рдпрд╛рд╡рд╛рдж рдХреЗ рдкреНрд░рдореБрдЦ рд╕реНрддрдВрдн рдХреЗ рд░реВрдк рдореЗрдВ рдкреНрд░рд╕рд┐рджреНрдзрд┐ рдкрд╛рдИред " +
            "рдкрдВрдд рдЬреА рдХреА рдЖрд░рдВрднрд┐рдХ рдХрд╡рд┐рддрд╛рдУрдВ рдореЗрдВ рдкреНрд░рдХреГрддрд┐ рдкреНрд░реЗрдо рдФрд░ рд░рд╣рд╕реНрдпрд╡рд╛рдж рдЭрд▓рдХрддрд╛ рд╣реИред " +
            "рдЗрд╕рдХреЗ рдмрд╛рдж рд╡реЗ рдорд╛рд░реНрдХреНрд╕ рдФрд░ рдорд╣рд╛рддреНрдорд╛ рдЧрд╛рдВрдзреА рдХреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ рд╕реЗ рдкреНрд░рднрд╛рд╡рд┐рдд рд╣реБрдПред " +
            "рдЗрдирдХреА рдмрд╛рдж рдХреА рдХрд╡рд┐рддрд╛рдУрдВ рдореЗрдВ рдЕрд░рд╡рд┐рдВрдж рджрд░реНрд╢рди рдХрд╛ рдкреНрд░рднрд╛рд╡ рд╕реНрдкрд╖реНрдЯ рдирдЬрд╝рд░ рдЖрддрд╛ рд╣реИред " +
            "рдЬреАрд╡рд┐рдХрд╛ рдХреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдкрдВрдд рдЬреА рдЙрджрдпрд╢рдВрдХрд░ рд╕рдВрд╕реНрдХреГрддрд┐ рдХреЗрдВрджреНрд░ рд╕реЗ рдЬреБрдбрд╝реЗред рдЖрдХрд╛рд╢рд╡рд╛рдгреА рдХреЗ рдкрд░рд╛рдорд░реНрд╢рджрд╛рддрд╛ рд░рд╣реЗред " +
            "1961 рдореЗрдВ рднрд╛рд░рдд рд╕рд░рдХрд╛рд░ рдиреЗ рдЗрдиреНрд╣реЗрдВ рдкрджреНрдорднреВрд╖рдг рд╕рдореНрдорд╛рди рд╕реЗ рдЕрд▓рдВрдХреГрдд рдХрд┐рдпрд╛ред " +
            "рд╣рд┐рдВрджреА рдХреЗ рдкрд╣рд▓реЗ рдЬреНрдЮрд╛рдирдкреАрда рдкреБрд░рд╕реНрдХрд╛рд░ рд╡рд┐рдЬреЗрддрд╛ рд╣реБрдПред";
            
        // Use speakInSequence for better narration quality
        if (typeof speakInSequence === 'function') {
            console.log('Using sequential speech for better narration quality');
            speakInSequence(biographicalText);
        } else {
            // Fall back to regular speak if speakInSequence isn't available
            narrator.speak(biographicalText);
        }
        
        // Show a visual indicator that audio is playing
        const listeningSection = document.querySelector('.listening-activity');
        if (listeningSection) {
            const existingIndicator = listeningSection.querySelector('.audio-playing');
            if (!existingIndicator) {
                const audioIndicator = document.createElement('div');
                audioIndicator.className = 'audio-playing';
                audioIndicator.innerHTML = '<div class="audio-wave"></div> рд╡рд╛рдЪрди рдЪрд▓ рд░рд╣рд╛ рд╣реИ...';
                
                // Find the button
                const button = listeningSection.querySelector('.interactive-btn');
                if (button) {
                    button.parentNode.insertBefore(audioIndicator, button.nextSibling);
                    
                    // Remove indicator after a reasonable time or when narration ends
                    if (narrator.onEndCallback) {
                        narrator.onEndCallback = function() {
                            if (audioIndicator.parentNode) {
                                audioIndicator.remove();
                            }
                        };
                    } else {
                        // Fallback timeout
                        setTimeout(() => {
                            if (audioIndicator.parentNode) {
                                audioIndicator.remove();
                            }
                        }, biographicalText.length * 80); // Approximate time to finish speaking
                    }
                }
            }
        }
    } else {
        // Show fallback message if narrator isn't available
        const fallbackMessage = "рд╕реБрдорд┐рддреНрд░рд╛рдирдВрджрди рдкрдВрдд рдХрд╛ рдЬрдиреНрдо 20 рдордИ 1900 рдХреЛ рдЙрддреНрддрд░рд╛рдЦрдВрдб рдХреЗ рдХреМрд╕рд╛рдиреА-рдЕрд▓рдореЛрдбрд╝рд╛ рдореЗрдВ рд╣реБрдЖ рдерд╛ред рдЙрдиреНрд╣реЛрдВрдиреЗ рдмрдЪрдкрди рд╕реЗ рд╣реА рдХрд╡рд┐рддрд╛ рд▓рд┐рдЦрдирд╛ рд╢реБрд░реВ рдХрд░ рджрд┐рдпрд╛ рдерд╛ред";
        
        if (window.narrator && typeof window.narrator.showFallbackMessage === 'function') {
            window.narrator.showFallbackMessage(fallbackMessage);
        } else {
            alert('рд╡рд╛рдЪрди рд╕реБрд╡рд┐рдзрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рд╡рд╛рдЪрди рдЪрд╛рд▓реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдСрдбрд┐рдпреЛ рдмрдЯрди рдХреЛ рд╕рдХреНрд░рд┐рдп рдХрд░реЗрдВред');
        }
    }
    
    // Update progress
    score += 5;
    document.getElementById('totalScore').textContent = score;
}

// Show resource
function showResource(resourceId) {
    // In a real app, this would show or load a specific resource
    alert(`рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рдореЗрдВ, рдпрд╣ рд╕рдВрд╕рд╛рдзрди рджрд┐рдЦрд╛рдПрдЧрд╛: ${resourceId}`);
    
    if (narrator) {
        switch(resourceId) {
            case 'pant-life':
                narrator.speak("рд╕реБрдорд┐рддреНрд░рд╛рдирдВрджрди рдкрдВрдд рдХрд╛ рдЬрдиреНрдо 20 рдордИ 1900 рдХреЛ рдЙрддреНрддрд░рд╛рдЦрдВрдб рдХреЗ рдХреМрд╕рд╛рдиреА-рдЕрд▓рдореЛрдбрд╝рд╛ рдореЗрдВ рд╣реБрдЖ рдерд╛ред рдЙрдиреНрд╣реЛрдВрдиреЗ рдмрдЪрдкрди рд╕реЗ рд╣реА рдХрд╡рд┐рддрд╛ рд▓рд┐рдЦрдирд╛ рд╢реБрд░реВ рдХрд░ рджрд┐рдпрд╛ рдерд╛ред рдЙрдиреНрд╣реЛрдВрдиреЗ 1915 рдореЗрдВ рд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ рд╕рд╛рд╣рд┐рддреНрдп рд╕реГрдЬрди рд╢реБрд░реВ рдХрд┐рдпрд╛ рдФрд░ рдЫрд╛рдпрд╛рд╡рд╛рдж рдХреЗ рдкреНрд░рдореБрдЦ рд╕реНрддрдВрдн рдХреЗ рд░реВрдк рдореЗрдВ рдкреНрд░рд╕рд┐рджреНрдзрд┐ рдкрд╛рдИред");
                break;
            case 'pant-photos':
                narrator.speak("рдпреЗ рдЪрд┐рддреНрд░ рд╕реБрдорд┐рддреНрд░рд╛рдирдВрджрди рдкрдВрдд рдХреЗ рдЬреАрд╡рди рдФрд░ рдЙрдирдХреА рдХрд╡рд┐рддрд╛рдУрдВ рдХреЛ рджрд░реНрд╢рд╛рддреЗ рд╣реИрдВред");
                break;
            case 'project-template':
                narrator.speak("рдпрд╣ рдЯреЗрдореНрдкрд▓реЗрдЯ рд╕реБрдорд┐рддреНрд░рд╛рдирдВрджрди рдкрдВрдд рдХреЗ рдЬреАрд╡рди рдФрд░ рдЙрдирдХреА рдХрд╡рд┐рддрд╛рдУрдВ рдкрд░ рдЖрдкрдХреЗ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХреЗ рд▓рд┐рдП рдПрдХ рд╕рдВрд░рдЪрдирд╛ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИ, рдЬрд┐рд╕рдореЗрдВ рдЙрдирдХреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ, рдЙрдирдХреЗ рд╕рдордп рдХреЗ рд╕рд╛рдорд╛рдЬрд┐рдХ рд╕рдВрджрд░реНрдн, рдФрд░ рдЖрдЬ рдХреЗ рд╕рдордп рдореЗрдВ рдЙрдирдХреА рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХрддрд╛ рдХреЗ рд▓рд┐рдП рдЦрдВрдб рд╢рд╛рдорд┐рд▓ рд╣реИрдВред");
                break;
        }
    }
}

// This is a duplicate function - the main one is at line 596
// Using empty implementation to avoid errors from existing calls
function _showAchievement(message) {
    // Delegate to the main implementation
    showAchievement(message);
}
