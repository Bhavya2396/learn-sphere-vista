/**
 * Story content and functionality for рддреЛрдк
 */

// Global variables to track narration state
let autoNarrationEnabled = false;
let narrationDisabledByUser = false;

// Story parts data
const storyParts = [
    {
        title: "рд▓реЗрдЦрдХ рдкрд░рд┐рдЪрдп",
        content: `
            <p>рд╡реАрд░реЗрди рдбрдВрдЧрд╡рд╛рд▓ рдХрд╛ рдЬрдиреНрдо 5 рдЕрдЧрд╕реНрдд 1947 рдХреЛ рдЙрддреНрддрд░рд╛рдЦрдВрдб рдХреЗ рдЯрд┐рд╣рд░реА рдЧрдврд╝рд╡рд╛рд▓ рдЬрд╝рд┐рд▓реЗ рдХреЗ рдХреАрд░реНрддрд┐рдирдЧрд░ рдореЗрдВ рд╣реБрдЖ рдерд╛ред рдЙрдиреНрд╣реЛрдВрдиреЗ рдЕрдкрдиреА рд╢реБрд░реБрдЖрддреА рд╢рд┐рдХреНрд╖рд╛ рдиреИрдиреАрддрд╛рд▓ рдореЗрдВ рдФрд░ рдЙрдЪреНрдЪ рд╢рд┐рдХреНрд╖рд╛ рдЗрд▓рд╛рд╣рд╛рдмрд╛рдж рдореЗрдВ рдкреВрд░реА рдХреАред рд╡реЗ рдкреЗрд╢реЗ рд╕реЗ <span class="highlight-vocab">рдкреНрд░рд╛рдзреНрдпрд╛рдкрдХ<span class="vocab-tooltip">рд╢рд┐рдХреНрд╖рдХ/рдЕрдзреНрдпрд╛рдкрдХ</span></span> рд╣реЛрдиреЗ рдХреЗ рд╕рд╛рде-рд╕рд╛рде рдкрддреНрд░рдХрд╛рд░рд┐рддрд╛ рд╕реЗ рднреА рдЬреБрдбрд╝реЗ рдереЗред</p>
            
            <div class="vocabulary-note">
                <div class="word">рдкреНрд░рд╛рдзреНрдпрд╛рдкрдХ</div>
                <div class="definition">рд╢рд┐рдХреНрд╖рдХ/рдЕрдзреНрдпрд╛рдкрдХ</div>
            </div>
            
            <p>рд╡реАрд░реЗрди рдХреА рдХрд╡рд┐рддрд╛рдУрдВ рдореЗрдВ рд╕рдорд╛рдЬ рдХреЗ рдЖрдо рд▓реЛрдЧреЛрдВ рдФрд░ <span class="highlight-vocab">рд╣рд╛рд╢рд┐рдП<span class="vocab-tooltip">рд╕рдорд╛рдЬ рдХреЗ рдХрд┐рдирд╛рд░реЗ</span></span> рдкрд░ рд╕реНрдерд┐рдд рдЬреАрд╡рди рдХреЗ рд╡рд┐рд▓рдХреНрд╖рдг рд╡рд┐рд╡рд░рдг рдФрд░ рджреГрд╢реНрдп рджреЗрдЦрдиреЗ рдХреЛ рдорд┐рд▓рддреЗ рд╣реИрдВред рдЙрдиреНрд╣реЛрдВрдиреЗ рдРрд╕реА рдХрдИ рдЪреАрдЬрд╝реЛрдВ рдФрд░ рдЬреАрд╡-рдЬрдВрддреБрдУрдВ рдХреЛ рдЕрдкрдиреА рдХрд╡рд┐рддрд╛рдУрдВ рдХрд╛ рд╡рд┐рд╖рдп рдмрдирд╛рдпрд╛, рдЬрд┐рдиреНрд╣реЗрдВ рд╣рдо рдЕрдХреНрд╕рд░ рджреЗрдЦрдХрд░ рднреА рдЕрдирджреЗрдЦрд╛ рдХрд░ рджреЗрддреЗ рд╣реИрдВред</p>
            
            <div class="vocabulary-note">
                <div class="word">рд╣рд╛рд╢рд┐рдП</div>
                <div class="definition">рд╕рдорд╛рдЬ рдХреЗ рдХрд┐рдирд╛рд░реЗ</div>
            </div>
            
            <p>рдЙрдирдХреЗ рдЕрдм рддрдХ рджреЛ рдХрд╡рд┐рддрд╛ рд╕рдВрдЧреНрд░рд╣, рдЗрд╕реА рджреБрдирд┐рдпрд╛ рдореЗрдВ рдФрд░ рджреБрд╖реНрдЪрдХреНрд░ рдореЗрдВ <span class="highlight-vocab">рд╕реНрд░рд╖реНрдЯрд╛<span class="vocab-tooltip">рд░рдЪрдирд╛рдХрд╛рд░</span></span>, рдкреНрд░рдХрд╛рд╢рд┐рдд рд╣реЛ рдЪреБрдХреЗ рд╣реИрдВред рдкрд╣рд▓реЗ рд╕рдВрдЧреНрд░рд╣ рдкрд░ рдЙрдиреНрд╣реЗрдВ рд╢реНрд░реАрдХрд╛рдВрдд рд╡рд░реНрдорд╛ рдкреБрд░рд╕реНрдХрд╛рд░ рдФрд░ рджреВрд╕рд░реЗ рдкрд░ рд╕рд╛рд╣рд┐рддреНрдп рдЕрдХрд╛рджреЗрдореА рдкреБрд░рд╕реНрдХрд╛рд░ рдорд┐рд▓рд╛ред рдЙрдирдХрд╛ рдирд┐рдзрди 28 рд╕рд┐рддрдВрдмрд░ 2015 рдХреЛ рд╣реБрдЖред</p>
            
            <div class="vocabulary-note">
                <div class="word">рд╕реНрд░рд╖реНрдЯрд╛</div>
                <div class="definition">рд░рдЪрдирд╛рдХрд╛рд░</div>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рд╡реАрд░реЗрди рдбрдВрдЧрд╡рд╛рд▓ рдХрд╛ рдЬрдиреНрдо рдХрдм рдФрд░ рдХрд╣рд╛рдБ рд╣реБрдЖ рдерд╛?</div>
                <div class="comprehension-question">2. рд╡реАрд░реЗрди рдбрдВрдЧрд╡рд╛рд▓ рдХреА рдХрд╡рд┐рддрд╛рдУрдВ рдХреА рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ рдХреНрдпрд╛ рдереАрдВ?</div>
                <div class="comprehension-question">3. рд╡реАрд░реЗрди рдбрдВрдЧрд╡рд╛рд▓ рдХреЗ рдХрд┐рд╕ рдХрд╡рд┐рддрд╛ рд╕рдВрдЧреНрд░рд╣ рдкрд░ рдЙрдиреНрд╣реЗрдВ рд╕рд╛рд╣рд┐рддреНрдп рдЕрдХрд╛рджреЗрдореА рдкреБрд░рд╕реНрдХрд╛рд░ рдорд┐рд▓рд╛?</div>
                <div class="comprehension-question">4. рд╡реАрд░реЗрди рдбрдВрдЧрд╡рд╛рд▓ рдХрд┐рд╕ рдкреЗрд╢реЗ рд╕реЗ рдЬреБрдбрд╝реЗ рдереЗ?</div>
            </div>
        `
    },
    {
        title: "рдХрд╡рд┐рддрд╛",
        content: `
            <div class="poem-text">
                рддреЛрдк<br>
                рдХрдВрдкрдиреА рдмрд╛рдЧ рдХреЗ рдореБрд╣рд╛рдиреЗ рдкрд░<br>
                рдзрд░ рд░рдЦреА рдЧрдИ рд╣реИ рдпрд╣ 1857 рдХреА рддреЛрдк<br>
                рдЗрд╕рдХреА рд╣реЛрддреА рд╣реИ рдмрдбрд╝реА рд╕рдореНрд╣рд╛рд▓, рд╡рд┐рд░рд╛рд╕рдд рдореЗрдВ рдорд┐рд▓реЗ<br>
                рдХрдВрдкрдиреА рдмрд╛рдЧ рдХреА рддрд░рд╣<br>
                рд╕рд╛рд▓ рдореЗрдВ рдЪрдордХрд╛рдИ рдЬрд╛рддреА рд╣реИ рджреЛ рдмрд╛рд░ред<br><br>
                
                рд╕реБрдмрд╣-рд╢рд╛рдо рдХрдВрдкрдиреА рдмрд╛рдЧ рдореЗрдВ рдЖрддреЗ рд╣реИрдВ рдмрд╣реБрдд рд╕реЗ рд╕реИрд▓рд╛рдиреА<br>
                рдЙрдиреНрд╣реЗрдВ рдмрддрд╛рддреА рд╣реИ рдпрд╣ рддреЛрдк<br>
                рдХрд┐ рдореИрдВ рдмрдбрд╝реА рдЬрдмрд░<br>
                рдЙрдбрд╝рд╛ рджрд┐рдП рдереЗ рдореИрдВрдиреЗ<br>
                рдЕрдЪреНрдЫреЗ-рдЕрдЪреНрдЫреЗ рд╕реВрд░рдорд╛рдУрдВ рдХреЗ рдзрдЬреНрдЬреЗ<br>
                рдЕрдкрдиреЗ рдЬрдорд╛рдиреЗ рдореЗрдВ<br><br>
                
                рдЕрдм рддреЛ рдмрд╣рд░рд╣рд╛рд▓<br>
                рдЫреЛрдЯреЗ рд▓рдбрд╝рдХреЛрдВ рдХреА рдШреБрдбрд╝рд╕рд╡рд╛рд░реА рд╕реЗ рдЕрдЧрд░ рдпрд╣ рдлрд╝рд╛рд░рд┐рдЧ рд╣реЛ<br>
                рддреЛ рдЙрд╕рдХреЗ рдКрдкрд░ рдмреИрдардХрд░<br>
                рдЪрд┐рдбрд╝рд┐рдпрд╛рдБ рд╣реА рдЕрдХрд╕рд░ рдХрд░рддреА рд╣реИрдВ рдЧрдкрд╢рдк<br>
                рдХрднреА-рдХрднреА рд╢реИрддрд╛рдиреА рдореЗрдВ рдЗрд╕рдХреЗ рднреАрддрд░ рднреА рдШреБрд╕ рдЬрд╛рддреА рд╣реИрдВ<br>
                рдЦрд╝рд╛рд╕ рдХрд░ рдЧреМрд░реИрдпреЗрдВ<br><br>
                
                рд╡реЗ рдмрддрд╛рддреА рд╣реИрдВ рдХрд┐ рджрд░рдЕрд╕рд▓ рдХрд┐рддрдиреА рднреА рдмрдбрд╝реА рд╣реЛ рддреЛрдк<br>
                рдПрдХ рджрд┐рди рддреЛ рд╣реЛрдирд╛ рд╣реА рд╣реИ рдЙрд╕рдХрд╛ рдореБрдБрд╣ рдмрдВрджред
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдореБрд╣рд╛рдиреЗ</div>
                <div class="definition">рдкреНрд░рд╡реЗрд╢ рджреНрд╡рд╛рд░ рдкрд░</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рд╕реИрд▓рд╛рдирд┐рдпреЛрдВ</div>
                <div class="definition">рджрд░реНрд╢рдиреАрдп рд╕реНрдерд▓реЛрдВ рдкрд░ рдЖрдиреЗ рд╡рд╛рд▓реЗ рдпрд╛рддреНрд░реА</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рд╕реВрд░рдорд╛рдУрдВ</div>
                <div class="definition">рд╡реАрд░реЛрдВ</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдзрдЬреНрдЬреЗ</div>
                <div class="definition">рдЪрд┐рдердбрд╝реЗ-рдЪрд┐рдердбрд╝реЗ рдХрд░рдирд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдлрд╝рд╛рд░рд┐рдЧ</div>
                <div class="definition">рдореБрдХреНрдд / рдЦрд╛рд▓реА</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдХрдВрдкрдиреА рдмрд╛рдЧ</div>
                <div class="definition">рдЧреБрд▓рд╛рдо рднрд╛рд░рдд рдореЗрдВ 'рдИрд╕реНрдЯ рдЗрдВрдбрд┐рдпрд╛ рдХрдВрдкрдиреА' рджреНрд╡рд╛рд░рд╛ рдЬрдЧрд╣-рдЬрдЧрд╣ рдкрд░ рдмрдирд╡рд╛рдП рдЧрдП рдмрд╛рдЧ-рдмрдЧреАрдЪреЛрдВ рдореЗрдВ рд╕реЗ рдХрд╛рдирдкреБрд░ рдореЗрдВ рдмрдирд╡рд╛рдпрд╛ рдЧрдпрд╛ рдПрдХ рдмрд╛рдЧ</div>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рддреЛрдк рдХрд╣рд╛рдБ рд░рдЦреА рд╣реБрдИ рд╣реИ?</div>
                <div class="comprehension-question">2. рддреЛрдк рдХреА рджреЗрдЦрднрд╛рд▓ рдХреИрд╕реЗ рд╣реЛрддреА рд╣реИ?</div>
                <div class="comprehension-question">3. рдЪреМрдХреАрджрд╛рд░ рд╕реИрд▓рд╛рдирд┐рдпреЛрдВ рдХреЛ рддреЛрдк рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреНрдпрд╛ рдмрддрд╛рддрд╛ рд╣реИ?</div>
                <div class="comprehension-question">4. рдХрд╡рд┐рддрд╛ рдореЗрдВ рддреЛрдк рдХреЛ рдПрдХ рджрд┐рди рдХреНрдпрд╛ рд╣реЛрдирд╛ рд╣реИ?</div>
            </div>
        `
    },
    {
        title: "рд╢рдмреНрджрд╛рд░реНрде рдФрд░ рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ",
        content: `
            <div class="vocabulary-section">
                <h3>рд╢рдмреНрджрд╛рд░реНрде рдФрд░ рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ</h3>
                <table class="vocabulary-table" style="width: 100%; border-collapse: collapse; margin-top: 20px;">
                    <thead>
                        <tr style="background-color: #f3f3f3;">
                            <th style="padding: 10px; border: 1px solid #ddd; text-align: left; font-weight: bold;">рд╢рдмреНрдж</th>
                            <th style="padding: 10px; border: 1px solid #ddd; text-align: left; font-weight: bold;">рдЕрд░реНрде</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рдореБрд╣рд╛рдиреЗ</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рдкреНрд░рд╡реЗрд╢ рджреНрд╡рд╛рд░ рдкрд░</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рдзрд░ рд░рдЦреА</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рд░рдЦреА рдЧрдИ</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рд╕рдореНрд╣рд╛рд▓</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рджреЗрдЦрднрд╛рд▓</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рд╡рд┐рд░рд╛рд╕рдд</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рдкреВрд░реНрд╡ рдкреАрдврд╝рд┐рдпреЛрдВ рд╕реЗ рдкреНрд░рд╛рдкреНрдд рд╡рд╕реНрддреБрдПрдБ</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рд╕реИрд▓рд╛рдиреА</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рджрд░реНрд╢рдиреАрдп рд╕реНрдерд▓реЛрдВ рдкрд░ рдЖрдиреЗ рд╡рд╛рд▓реЗ рдпрд╛рддреНрд░реА</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рд╕реВрд░рдорд╛(рдУрдВ)</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рд╡реАрд░</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рдзрдЬреНрдЬреЗ</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рдЪрд┐рдердбрд╝реЗ-рдЪрд┐рдердбрд╝реЗ рдХрд░рдирд╛</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рдлрд╝рд╛рд░рд┐рдЧ</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рдореБрдХреНрдд / рдЦрд╛рд▓реА</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: 500;">рдХрдВрдкрдиреА рдмрд╛рдЧ</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">рдЧреБрд▓рд╛рдо рднрд╛рд░рдд рдореЗрдВ 'рдИрд╕реНрдЯ рдЗрдВрдбрд┐рдпрд╛ рдХрдВрдкрдиреА' рджреНрд╡рд╛рд░рд╛ рдЬрдЧрд╣-рдЬрдЧрд╣ рдкрд░ рдмрдирд╡рд╛рдП рдЧрдП рдмрд╛рдЧ-рдмрдЧреАрдЪреЛрдВ рдореЗрдВ рд╕реЗ рдХрд╛рдирдкреБрд░ рдореЗрдВ рдмрдирд╡рд╛рдпрд╛ рдЧрдпрд╛ рдПрдХ рдмрд╛рдЧ</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        `
    }
];

// Show a specific part of the story
function showStoryPart(partNumber) {
    if (partNumber < 1 || partNumber > storyParts.length) return;
    
    console.log(`Loading story part ${partNumber}`);
    
    // Update navigation buttons
    document.querySelectorAll('.story-nav-btn').forEach((btn, index) => {
        btn.classList.toggle('active', index + 1 === partNumber);
        btn.setAttribute('aria-pressed', index + 1 === partNumber ? 'true' : 'false');
    });
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) {
        console.error('Story content container not found');
        return;
    }
    
    // Create a container for this part if it doesn't exist
    let partContainer = document.getElementById(`storyPart${partNumber}`);
    if (!partContainer) {
        partContainer = document.createElement('div');
        partContainer.id = `storyPart${partNumber}`;
        partContainer.className = 'story-part';
        storyContent.appendChild(partContainer);
    }
    
    // Hide all parts and show the selected one
    document.querySelectorAll('.story-part').forEach(part => {
        part.classList.remove('active');
    });
    partContainer.classList.add('active');
    
    // Load content if not already loaded
    if (!partContainer.innerHTML.trim()) {
        const part = storyParts[partNumber - 1];
        if (!part) {
            console.error(`Story part ${partNumber} not found`);
            return;
        }
        
        partContainer.innerHTML = `
            <h3 class="story-part-title">${part.title}</h3>
            ${part.content}
        `;
        
        // Add event listeners to vocabulary terms
        partContainer.querySelectorAll('.highlight-vocab').forEach(term => {
            term.addEventListener('click', function() {
                const word = this.textContent.split('\n')[0].trim();
                const definition = this.querySelector('.vocab-tooltip').textContent;
                
                if (window.narrator) {
                    window.narrator.speak(`${word}: ${definition}`);
                }
            });
        });
        
        // Add read aloud button for this part
        const readAloudBtn = document.createElement('button');
        readAloudBtn.className = 'interactive-btn read-part-btn';
        readAloudBtn.innerHTML = 'ЁЯФК рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ';
        readAloudBtn.setAttribute('aria-label', `рднрд╛рдЧ ${partNumber} рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ`);
        readAloudBtn.onclick = function() { readStoryPartAloud(partNumber, true); }; // true = manual call
        
        // Add button to the end of the part
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'button-container';
        buttonContainer.appendChild(readAloudBtn);
        partContainer.appendChild(buttonContainer);
    }
    
    // Scroll to top of story
    storyContent.scrollTop = 0;
    
    // Stop any ongoing narration when switching parts
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration due to part switch');
        window.narrator.stop();
        
        // Clear any reading indicators from previous parts
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Clear any paragraph highlights from previous parts
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
    }
    
    // Announce part change with narrator if available
    if (window.narrator) {
        // Small delay to ensure the previous narration has stopped
        setTimeout(() => {
            // Automatically start reading the new part when switching within story module
            console.log(`Auto-starting narration for story part ${partNumber}`);
            readStoryPartAloud(partNumber, false); // false = automatic call
        }, 100);
    }
}

// Read a specific story part aloud
function readStoryPartAloud(partNumber, isManualCall = true) {
    console.log(`Reading story part ${partNumber} aloud (manual: ${isManualCall})`);
    
    // Enable auto-narration only when user manually starts reading
    if (isManualCall) {
        autoNarrationEnabled = true;
        narrationDisabledByUser = false; // Re-enable auto-narration when user manually starts
    }
    
    // Track user interaction for speech synthesis
    if (typeof trackUserInteraction === 'function') {
        trackUserInteraction();
    }
    
    // Stop any ongoing narration first to avoid interruption errors
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration before starting new one');
        window.narrator.stop();
    }
    
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    const part = storyParts[partNumber - 1];
    if (!part) {
        console.error(`Story part ${partNumber} not found`);
        return;
    }
    
    // Extract plain text from the story part
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = part.content;
    
    // Get all paragraphs and remove vocabulary notes
    const paragraphs = tempDiv.querySelectorAll('p');
    
    // Get poem text if it exists
    const poemText = tempDiv.querySelector('.poem-text');
    
    // Filter out empty paragraphs and those that are part of vocabulary notes
    const validParagraphs = Array.from(paragraphs).filter(p => {
        // Skip if it's empty
        if (p.textContent.trim().length === 0) return false;
        
        // Skip if it's inside a vocabulary note
        if (p.closest('.vocabulary-note')) return false;
        
        // Skip if it's inside a comprehension check
        if (p.closest('.comprehension-check')) return false;
        
        // Skip if it's a button or interactive element
        if (p.closest('button') || p.tagName === 'BUTTON') return false;
        
        return true;
    });
    
    // Extract text content to read
    let storyText = '';
    
    // Add title
    storyText += `${part.title}. `;
    
    // Add paragraph content
    if (validParagraphs.length > 0) {
        storyText += validParagraphs
            .map(p => {
                let text = p.textContent.trim();
                // Remove vocabulary tooltip content that might be included
                text = text.replace(/\s+/g, ' '); // Normalize whitespace
                return text;
            })
            .filter(text => text.length > 0) // Remove empty strings
            .join(' ');
    }
    
    // Add poem content if it exists
    if (poemText) {
        if (storyText.length > 0) {
            storyText += " ";
        }
        storyText += poemText.textContent.replace(/\s+/g, ' ').trim();
    }
    
    console.log(`Prepared text for narration (${storyText.length} characters)`);
    
    // Read the text aloud
    if (window.narrator && window.narrator.enabled) {
        try {
            // Show reading indicator
            const partContainer = document.getElementById(`storyPart${partNumber}`);
            if (partContainer) {
                // Remove any existing reading indicators
                const existingIndicators = partContainer.querySelectorAll('.reading-indicator');
                existingIndicators.forEach(indicator => indicator.remove());
                
                // Create new reading indicator
                const readingIndicator = document.createElement('div');
                readingIndicator.className = 'reading-indicator';
                readingIndicator.id = `reading-indicator-${partNumber}`;
                readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдкрдврд╝рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...';
                
                // Find button container or create one if it doesn't exist
                let buttonContainer = partContainer.querySelector('.button-container');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.className = 'button-container';
                    partContainer.appendChild(buttonContainer);
                }
                
                buttonContainer.appendChild(readingIndicator);
                
                // Add stop button
                const stopButton = document.createElement('button');
                stopButton.className = 'interactive-btn stop-narration-btn';
                stopButton.innerHTML = 'тП╣я╕П рдкрдврд╝рдирд╛ рд░реЛрдХреЗрдВ';
                stopButton.onclick = stopNarration;
                readingIndicator.appendChild(stopButton);
                
                // Remove indicator when narration ends or after timeout
                window.readingTimeout = setTimeout(() => {
                    if (readingIndicator.parentNode) {
                        readingIndicator.classList.add('fade-out');
                        setTimeout(() => readingIndicator.remove(), 500);
                    }
                }, Math.min(storyText.length * 100, 60000)); // Dynamic timeout based on text length, max 1 minute
            }
            
            // Register narration end event
            if (window.narrator.onEndCallback) {
                window.narrator.onEndCallback = null;
            }
            
            window.narrator.onEndCallback = function() {
                const indicator = document.getElementById(`reading-indicator-${partNumber}`);
                if (indicator) {
                    indicator.classList.add('fade-out');
                    setTimeout(() => {
                        if (indicator.parentNode) indicator.remove();
                    }, 500);
                }
                
                if (window.readingTimeout && typeof clearTimeout === 'function') {
                    clearTimeout(window.readingTimeout);
                }
            };
            
            // Start narration
            window.narrator.speak(storyText);
            console.log('Narration started');
            
            // Highlight paragraphs as they are being read
            const elementsToHighlight = [...validParagraphs];
            if (poemText) {
                elementsToHighlight.push(poemText);
            }
            highlightParagraphsSequentially(elementsToHighlight);
            
        } catch (error) {
            console.error('Error starting narration:', error);
            alert('рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╡рд╛рдЪрди рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
        }
    } else {
        console.error('Narrator not available');
        alert('рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕реНрдкреАрдЪ рд╕рд┐рдВрдереЗрд╕рд┐рд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред');
    }
}

// Stop ongoing narration
function stopNarration() {
    if (window.narrator) {
        window.narrator.stop();
        console.log('Narration stopped');
        
        // Disable auto-narration when user manually stops
        autoNarrationEnabled = false;
        narrationDisabledByUser = true; // Mark that user has disabled narration
        
        // Remove all reading indicators
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Remove all paragraph highlights
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
        
        // Clear any timeouts
        if (window.readingTimeout && typeof clearTimeout === 'function') {
            clearTimeout(window.readingTimeout);
        }
        
        if (window.highlightTimeouts && typeof clearTimeout === 'function') {
            window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
            window.highlightTimeouts = [];
        }
    }
}

// Highlight paragraphs sequentially as they are being read
function highlightParagraphsSequentially(paragraphs) {
    // Clear any existing highlight timeouts
    if (window.highlightTimeouts && typeof clearTimeout === 'function') {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
    }
    
    window.highlightTimeouts = [];
    
    // Remove any existing highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Calculate approximate time per paragraph based on length
    const totalTextLength = paragraphs.reduce((sum, p) => sum + p.textContent.length, 0);
    let cumulativeLength = 0;
    
    // Estimate total reading time (about 15 characters per second)
    const totalReadingTime = totalTextLength / 15 * 1000;
    
    // Highlight each paragraph at the appropriate time
    paragraphs.forEach((paragraph, index) => {
        const textLength = paragraph.textContent.length;
        const startPercentage = cumulativeLength / totalTextLength;
        cumulativeLength += textLength;
        
        // Calculate when to highlight this paragraph
        const highlightTime = startPercentage * totalReadingTime;
        
        // Set timeout to add highlight
        const highlightTimeout = setTimeout(() => {
            // Remove highlight from previous paragraphs
            if (index > 0) {
                paragraphs[index - 1].classList.remove('paragraph-highlight');
            }
            
            // Add highlight to current paragraph
            paragraph.classList.add('paragraph-highlight');
            
            // Scroll to the paragraph
            paragraph.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, highlightTime);
        
        window.highlightTimeouts.push(highlightTimeout);
    });
    
    // Clear highlights when done
    const clearHighlightsTimeout = setTimeout(() => {
        paragraphs.forEach(p => p.classList.remove('paragraph-highlight'));
    }, totalReadingTime + 1000);
    
    window.highlightTimeouts.push(clearHighlightsTimeout);
}

// Highlight vocabulary words in the text
function highlightVocabulary() {
    const vocabTerms = document.querySelectorAll('.highlight-vocab');
    
    vocabTerms.forEach(term => {
        term.classList.toggle('active-highlight');
    });
    
    // Show a message that vocabulary highlighting is toggled
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = 'рд╢рдмреНрджрд╛рд░реНрде рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╣реИрдВред рдЕрд░реНрде рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╢рдмреНрджреЛрдВ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}

// Toggle print-friendly mode
function togglePrintMode() {
    document.body.classList.toggle('print-mode');
    
    // Show a message that print mode is toggled
    const isPrintMode = document.body.classList.contains('print-mode');
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = isPrintMode ? 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдкреНрд░рд┐рдВрдЯ рдлрд╝рдВрдХреНрд╢рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред' : 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}
