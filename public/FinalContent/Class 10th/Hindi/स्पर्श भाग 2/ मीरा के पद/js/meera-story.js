/**
 * Story content and functionality for Meera Ke Pad
 */

// Global variables to track narration state
let autoNarrationEnabled = false;
let narrationDisabledByUser = false;

// Story parts data
const storyParts = [
    {
        title: "рд▓реЗрдЦрдХ рдкрд░рд┐рдЪрдп",
        content: `
            <p>рдореАрд░рд╛ (1503-1546) рдХрд╛ рдЬрдиреНрдо рдЬреЛрдзрдкреБрд░ рдХреЗ рдЪреЛрдХрдбрд╝реА (рдХреБрдбрд╝рдХреА) рдЧрд╛рдБрд╡ рдореЗрдВ 1503 рдореЗрдВ рд╣реБрдЖ рдорд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИред 13 рд╡рд░реНрд╖ рдХреА рдЙрдореНрд░ рдореЗрдВ рдореЗрд╡рд╛рдбрд╝ рдХреЗ рдорд╣рд╛рд░рд╛рдгрд╛ рд╕рд╛рдВрдЧрд╛ рдХреЗ рдХреБрдБрд╡рд░ 
            рднреЛрдЬрд░рд╛рдЬ рд╕реЗ рдЙрдирдХрд╛ рд╡рд┐рд╡рд╛рд╣ рд╣реБрдЖред рдЙрдирдХрд╛ рдЬреАрд╡рди рджреБрдЦреЛрдВ рдХреА рдЫрд╛рдпрд╛ рдореЗрдВ рд╣реА рдмреАрддрд╛ред <span class="highlight-vocab">рдмрд╛рд▓реНрдпрд╛рд╡рд╕реНрдерд╛<span class="vocab-tooltip">рдмрдЪрдкрди</span></span> рдореЗрдВ рд╣реА рдорд╛рдБ рдХрд╛ рджреЗрд╣рд╛рдВрдд рд╣реЛ рдЧрдпрд╛ рдерд╛ред</p>
            
            <div class="vocabulary-note">
                <div class="word">рдмрд╛рд▓реНрдпрд╛рд╡рд╕реНрдерд╛</div>
                <div class="definition">рдмрдЪрдкрди</div>
            </div>
            
            <p>рд╡рд┐рд╡рд╛рд╣ рдХреЗ рдХреБрдЫ рд╣реА рд╕рд╛рд▓ рдмрд╛рдж рдкрд╣рд▓реЗ рдкрддрд┐, рдлрд┐рд░ рдкрд┐рддрд╛ рдФрд░ рдПрдХ рдпреБрджреНрдз рдХреЗ рджреМрд░рд╛рди рд╢реНрд╡рд╕реБрд░ рдХрд╛ рднреА рджреЗрд╣рд╛рдВрдд рд╣реЛ рдЧрдпрд╛ред рднреМрддрд┐рдХ рдЬреАрд╡рди рд╕реЗ 
            <span class="highlight-vocab">рдирд┐рд░рд╛рд╢<span class="vocab-tooltip">рд╣рддрд╛рд╢</span></span> рдореАрд░рд╛ рдиреЗ рдШрд░-рдкрд░рд┐рд╡рд╛рд░ рддреНрдпрд╛рдЧ рджрд┐рдпрд╛ рдФрд░ рд╡реГрдВрджрд╛рд╡рди рдореЗрдВ рдбреЗрд░рд╛ рдбрд╛рд▓ рдкреВрд░реА рддрд░рд╣ 
            <span class="highlight-vocab">рдЧрд┐рд░рдзрд░ рдЧреЛрдкрд╛рд▓<span class="vocab-tooltip">рд╢реНрд░реАрдХреГрд╖реНрдг рдХрд╛ рдПрдХ рдирд╛рдо</span></span> рдХреГрд╖реНрдг рдХреЗ рдкреНрд░рддрд┐ рд╕рдорд░реНрдкрд┐рдд рд╣реЛ рдЧрдИрдВред</p>
            
            <div class="vocabulary-note">
                <div class="word">рдирд┐рд░рд╛рд╢</div>
                <div class="definition">рд╣рддрд╛рд╢</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдЧрд┐рд░рдзрд░ рдЧреЛрдкрд╛рд▓</div>
                <div class="definition">рд╢реНрд░реАрдХреГрд╖реНрдг рдХрд╛ рдПрдХ рдирд╛рдо</div>
            </div>
            
            <p>рдордзреНрдпрдХрд╛рд▓реАрди рднрдХреНрддрд┐ рдЖрдВрджреЛрд▓рди рдХреА рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдкреНрд░реЗрд░рдгрд╛ рдиреЗ рдЬрд┐рди рдХрд╡рд┐рдпреЛрдВ рдХреЛ рдЬрдиреНрдо рджрд┐рдпрд╛ рдЙрдирдореЗрдВ рдореАрд░рд╛рдмрд╛рдИ рдХрд╛ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реНрдерд╛рди рд╣реИред рдЗрдирдХреЗ рдкрдж рдкреВрд░реЗ рдЙрддреНрддрд░ рднрд╛рд░рдд рд╕рд╣рд┐рдд рдЧреБрдЬрд░рд╛рдд, рдмрд┐рд╣рд╛рд░ рдФрд░ рдмрдВрдЧрд╛рд▓ рддрдХ рдкреНрд░рдЪрд▓рд┐рдд рд╣реИрдВред рдореАрд░рд╛ рд╣рд┐рдВрджреА рдФрд░ рдЧреБрдЬрд░рд╛рддреА рджреЛрдиреЛрдВ рдХреА рдХрд╡рдпрд┐рддреНрд░реА рдорд╛рдиреА рдЬрд╛рддреА рд╣реИрдВред рд╕рдВрдд 
            <span class="highlight-vocab">рд░реИрджрд╛рд╕<span class="vocab-tooltip">15рд╡реАрдВ-16рд╡реАрдВ рд╢рддрд╛рдмреНрджреА рдХреЗ рд╕рдВрдд рдФрд░ рдХрд╡рд┐</span></span> рдХреА рд╢рд┐рд╖реНрдпрд╛ рдореАрд░рд╛ рдХреА рдХреБрд▓ рд╕рд╛рдд-рдЖрда рдХреГрддрд┐рдпрд╛рдБ рд╣реА рдЙрдкрд▓рдмреНрдз рд╣реИрдВред</p>
            
            <div class="vocabulary-note">
                <div class="word">рд░реИрджрд╛рд╕</div>
                <div class="definition">15рд╡реАрдВ-16рд╡реАрдВ рд╢рддрд╛рдмреНрджреА рдХреЗ рд╕рдВрдд рдФрд░ рдХрд╡рд┐</div>
            </div>
            
            <p>рдореАрд░рд╛ рдХреА рднрдХреНрддрд┐ <span class="highlight-vocab">рджреИрдиреНрдп<span class="vocab-tooltip">рд╡рд┐рдирдп, рдирдореНрд░рддрд╛</span></span> рдФрд░ 
            <span class="highlight-vocab">рдорд╛рдзреБрд░реНрдпрднрд╛рд╡<span class="vocab-tooltip">рдкреНрд░реЗрдо рднрд╛рд╡</span></span> рдХреА рд╣реИред рдЗрди рдкрд░ рдпреЛрдЧрд┐рдпреЛрдВ, рд╕рдВрддреЛрдВ рдФрд░ рд╡реИрд╖реНрдгрд╡ рднрдХреНрддреЛрдВ рдХрд╛ рд╕рдореНрдорд┐рд▓рд┐рдд рдкреНрд░рднрд╛рд╡ рдкрдбрд╝рд╛ рд╣реИред рдореАрд░рд╛ рдХреЗ рдкрджреЛрдВ рдХреА рднрд╛рд╖рд╛ рдореЗрдВ рд░рд╛рдЬрд╕реНрдерд╛рдиреА, рдмреНрд░рдЬ рдФрд░ рдЧреБрдЬрд░рд╛рддреА рдХрд╛ рдорд┐рд╢реНрд░рдг рдкрд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рд╡рд╣реАрдВ рдкрдВрдЬрд╛рдмреА, рдЦрдбрд╝реА рдмреЛрд▓реА рдФрд░ рдкреВрд░реНрд╡реА рдХреЗ рдкреНрд░рдпреЛрдЧ рднреА рдорд┐рд▓ рдЬрд╛рддреЗ рд╣реИрдВред</p>
            
            <div class="vocabulary-note">
                <div class="word">рджреИрдиреНрдп</div>
                <div class="definition">рд╡рд┐рдирдп, рдирдореНрд░рддрд╛</div>
            </div>
            
            <div class="vocabulary-note">
                <div class="word">рдорд╛рдзреБрд░реНрдпрднрд╛рд╡</div>
                <div class="definition">рдкреНрд░реЗрдо рднрд╛рд╡</div>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдореАрд░рд╛ рдХрд╛ рдЬрдиреНрдо рдХрд╣рд╛рдБ рдФрд░ рдХрдм рд╣реБрдЖ рдерд╛?</div>
                <div class="comprehension-question">2. рдореАрд░рд╛ рдХрд┐рд╕рдХреА рд╢рд┐рд╖реНрдпрд╛ рдереАрдВ?</div>
                <div class="comprehension-question">3. рдореАрд░рд╛ рдХреА рднрдХреНрддрд┐ рдХреА рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ рдХреНрдпрд╛ рдереАрдВ?</div>
                <div class="comprehension-question">4. рдореАрд░рд╛ рдХреЗ рдкрджреЛрдВ рдХреА рднрд╛рд╖рд╛ рдореЗрдВ рдХрд┐рди рднрд╛рд╖рд╛рдУрдВ рдХрд╛ рдорд┐рд╢реНрд░рдг рдкрд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ?</div>
            </div>
        `
    },
    {
        title: "рдХрд╡рд┐рддрд╛",
        content: `
            <div class="poem-text">
                (1) рд╣рд░рд┐ рдЖрдк рд╣рд░реЛ рдЬрди рд░реА рднреАрд░ред рджреНрд░реЛрдкрджреА рд░реА рд▓рд╛рдЬ рд░рд╛рдЦреА, рдЖрдк рдмрдврд╝рд╛рдпреЛ рдЪреАрд░ред<br>
                рднрдЧрдд рдХрд╛рд░рдг рд░реВрдк рдирд░рд╣рд░рд┐, рдзрд░реНрдпреЛ рдЖрдк рд╕рд░реАрд░ред<br>
                рдмреВрдврд╝рддреЛ рдЧрдЬрд░рд╛рдЬ рд░рд╛рдЦреНрдпреЛ, рдХрд╛рдЯреА рдХреБрдгреНрдЬрд░ рдкреАрд░ред<br>
                рджрд╛рд╕реА рдореАрд░рд╛рдБ рд▓рд╛рд▓ рдЧрд┐рд░рдзрд░, рд╣рд░реЛ рдореНрд╣рд╛рд░реА рднреАрд░редред<br><br>
                
                (2) рд╕реНрдпрд╛рдо рдореНрд╣рд╛рдиреЗ рдЪрд╛рдХрд░ рд░рд╛рдЦреЛ рдЬреА, рдЧрд┐рд░рдзрд╛рд░реА рд▓рд╛рд▓рд╛ рдореНрд╣рд╛рдБрдиреЗ рдЪрд╛рдХрд░ рд░рд╛рдЦреЛрдЬреАред<br>
                рдЪрд╛рдХрд░ рд░рд╣рд╕реНрдпреВрдБ рдмрд╛рдЧ рд▓рдЧрд╛рд╕реНрдпреВрдБ рдирд┐рдд рдЙрда рджрд░рд╕рдг рдкрд╛рд╕реНрдпреВрдБред<br>
                рдмрд┐рдиреНрджрд░рд╛рд╡рди рд░реА рдХреБрдВрдЬ рдЧрд▓реА рдореЗрдВ, рдЧреЛрд╡рд┐рдиреНрдж рд▓реАрд▓рд╛ рдЧрд╛рд╕реНрдпреВрдБред<br>
                рдЪрд╛рдХрд░реА рдореЗрдВ рджрд░рд╕рдг рдкрд╛рд╕реНрдпреВрдБ, рд╕реБрдорд░рдг рдкрд╛рд╕реНрдпреВрдБ рдЦрд░рдЪреАред<br>
                рднрд╛рд╡ рднрдЧрддреА рдЬрд╛рдЧреАрд░реА рдкрд╛рд╕реНрдпреВрдБ, рддреАрдиреВрдВ рдмрд╛рддрд╛рдБ рд╕рд░рд╕реАред<br>
                рдореЛрд░ рдореБрдЧрдЯ рдкреАрддрд╛рдореНрдмрд░ рд╕реМрд╣реЗ, рдЧрд▓ рд╡реИрдЬрдиреНрддреА рдорд╛рд▓рд╛ред<br>
                рдмрд┐рдиреНрджрд░рд╛рд╡рди рдореЗрдВ рдзреЗрдиреБ рдЪрд░рд╛рд╡реЗ, рдореЛрд╣рди рдореБрд░рд▓реА рд╡рд╛рд▓рд╛ред<br>
                рдКрдБрдЪрд╛ рдКрдБрдЪрд╛ рдорд╣рд▓ рдмрдгрд╛рд╡рдВ рдмрд┐рдЪ рдмрд┐рдЪ рд░рд╛рдЦреВрдБ рдмрд╛рд░реАред<br>
                рд╕рд╛рдБрд╡рд░рд┐рдпрд╛ рд░рд╛ рджрд░рд╕рдг рдкрд╛рд╕реНрдпреВрдБ, рдкрд╣рд░ рдХреБрд╕реБрдореНрдмреА рд╕рд╛рдбрд╝реАред<br>
                рдЖрдзреА рд░рд╛рдд рдкреНрд░рднреБ рджрд░рд╕рдг, рджреАрдЬреНрдпреЛ рдЬрдордирд╛рдЬреА рд░реЗ рддреАрд░рд╛рдВред<br>
                рдореАрд░рд╛рдБ рд░рд╛ рдкреНрд░рднреБ рдЧрд┐рд░рдзрд░ рдирд╛рдЧрд░, рд╣рд┐рд╡рдбрд╝реЛ рдШрдгреЛ рдЕрдзреАрд░рд╛рдБредред
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдкрд╣рд▓реЗ рдкрдж рдореЗрдВ рдореАрд░рд╛ рдиреЗ рд╣рд░рд┐ рд╕реЗ рдЕрдкрдиреА рдкреАрдбрд╝рд╛ рд╣рд░рдиреЗ рдХреА рд╡рд┐рдирддреА рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХреА рд╣реИ?</div>
                <div class="comprehension-question">2. рджреВрд╕рд░реЗ рдкрдж рдореЗрдВ рдореАрд░рд╛рдмрд╛рдИ рд╢реНрдпрд╛рдо рдХреА рдЪрд╛рдХрд░реА рдХреНрдпреЛрдВ рдХрд░рдирд╛ рдЪрд╛рд╣рддреА рд╣реИрдВ?</div>
                <div class="comprehension-question">3. рдореАрд░рд╛рдмрд╛рдИ рдиреЗ рд╢реНрд░реАрдХреГрд╖реНрдг рдХреЗ рд░реВрдк-рд╕реМрдВрджрд░реНрдп рдХрд╛ рд╡рд░реНрдгрди рдХреИрд╕реЗ рдХрд┐рдпрд╛ рд╣реИ?</div>
                <div class="comprehension-question">4. рдореАрд░рд╛рдмрд╛рдИ рд╢реНрд░реАрдХреГрд╖реНрдг рдХреЛ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХреНрдпрд╛-рдХреНрдпрд╛ рдХрд╛рд░реНрдп рдХрд░рдиреЗ рдХреЛ рддреИрдпрд╛рд░ рд╣реИрдВ?</div>
            </div>
        `
    },
    {
        title: "рд╢рдмреНрджрд╛рд░реНрде рдФрд░ рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ",
        content: `
            <div class="shabdarth-tippaniyan-content">
                <h3>рд╢рдмреНрджрд╛рд░реНрде рдФрд░ рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ</h3>
                
                <div class="vocabulary-list">
                    <div class="vocab-item">
                        <span class="word">рдмрдврд╝рд╛рдпреЛ</span> - <span class="meaning">рдмрдврд╝рд╛рдирд╛</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рдЧрдЬрд░рд╛рдЬ</span> - <span class="meaning">рдРрд░рд╛рд╡рдд</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рдХреБрдВрдЬрд░</span> - <span class="meaning">рд╣рд╛рдереА</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рдкрд╛рд╕реНрдпреВрдБ</span> - <span class="meaning">рдкрд╛рдирд╛</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рд▓реАрд▓рд╛</span> - <span class="meaning">рд╡рд┐рд╡рд┐рдз рд░реВрдк</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рд╕реБрдорд░рдг</span> - <span class="meaning">рдпрд╛рдж рдХрд░рдирд╛ / рд╕реНрдорд░рдг</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рдЬрд╛рдЧреАрд░реА</span> - <span class="meaning">рдЬрд╛рдЧреАрд░ / рд╕рд╛рдореНрд░рд╛рдЬреНрдп</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рдкреАрддрд╛рдВрдмрд░</span> - <span class="meaning">рдкреАрд▓рд╛ рд╡рд╕реНрддреНрд░</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рд╡реИрдЬрдВрддреА</span> - <span class="meaning">рдПрдХ рдлреВрд▓</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рддреАрд░рд╛рдВ</span> - <span class="meaning">рдХрд┐рдирд╛рд░рд╛</span>
                    </div>
                    <div class="vocab-item">
                        <span class="word">рдЕрдзреАрд░рд╛рдБ (рдЕрдзреАрд░)</span> - <span class="meaning">рд╡реНрдпрд╛рдХреБрд▓ рд╣реЛрдирд╛</span>
                    </div>
                </div>
                
                <div class="tippaniyan-section">
                    <h4>рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ</h4>
                    <div class="note-item">
                        <strong>рджреНрд░реЛрдкрджреА рд░реА рд▓рд╛рдЬ рд░рд╛рдЦреА</strong> - рджреБрд░реНрдпреЛрдзрди рджреНрд╡рд╛рд░рд╛ рджреНрд░реЛрдкрджреА рдХрд╛ рдЪреАрд░рд╣рд░рдг рдХрд░рд╛рдиреЗ рдкрд░ рд╢реНрд░реАрдХреГрд╖реНрдг рдиреЗ рдЪреАрд░ рдХреЛ рдмрдврд╝рд╛рддреЗ-рдмрдврд╝рд╛рддреЗ рдЗрддрдирд╛ рдмрдврд╝рд╛ рджрд┐рдпрд╛ рдХрд┐ рджреБрдГрд╢рд╛рд╕рди рдХрд╛ рд╣рд╛рде рдердХ рдЧрдпрд╛
                    </div>
                    <div class="note-item">
                        <strong>рдХрд╛рдЯреА рдХреБрдВрдЬрд░ рдкреАрд░</strong> - рдХреБрдВрдЬрд░ рдХрд╛ рдХрд╖реНрдЯ рджреВрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдордЧрд░рдордЪреНрдЫ рдХреЛ рдорд╛рд░рд╛
                    </div>
                </div>
            </div>
        `
    }
];

// Show a specific part of the story
function showStoryPart(partNumber) {
    if (partNumber < 1 || partNumber > storyParts.length) return;
    
    console.log(`Loading story part ${partNumber}`);
    
    // Update navigation buttons
    document.querySelectorAll('.story-nav-btn').forEach((btn, index) => {
        btn.classList.toggle('active', index + 1 === partNumber);
        btn.setAttribute('aria-pressed', index + 1 === partNumber ? 'true' : 'false');
    });
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) {
        console.error('Story content container not found');
        return;
    }
    
    // Create a container for this part if it doesn't exist
    let partContainer = document.getElementById(`storyPart${partNumber}`);
    if (!partContainer) {
        partContainer = document.createElement('div');
        partContainer.id = `storyPart${partNumber}`;
        partContainer.className = 'story-part';
        storyContent.appendChild(partContainer);
    }
    
    // Hide all parts and show the selected one
    document.querySelectorAll('.story-part').forEach(part => {
        part.classList.remove('active');
    });
    partContainer.classList.add('active');
    
    // Load content if not already loaded
    if (!partContainer.innerHTML.trim()) {
        const part = storyParts[partNumber - 1];
        if (!part) {
            console.error(`Story part ${partNumber} not found`);
            return;
        }
        
        partContainer.innerHTML = `
            <h3 class="story-part-title">${part.title}</h3>
            ${part.content}
        `;
        
        // Add event listeners to vocabulary terms - highlighting only, no narration
        partContainer.querySelectorAll('.highlight-vocab').forEach(term => {
            term.addEventListener('click', function() {
                // Simply highlight the word without narration
                this.classList.toggle('active-highlight');
            });
        });
        
        // Add read aloud button for this part
        const readAloudBtn = document.createElement('button');
        readAloudBtn.className = 'interactive-btn read-part-btn';
        readAloudBtn.innerHTML = 'ЁЯФК рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ';
        readAloudBtn.setAttribute('aria-label', `рднрд╛рдЧ ${partNumber} рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ`);
        readAloudBtn.onclick = function() { readStoryPartAloud(partNumber, true); }; // true = manual call
        
        // Add button to the end of the part
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'button-container';
        buttonContainer.appendChild(readAloudBtn);
        partContainer.appendChild(buttonContainer);
    }
    
    // Scroll to top of story
    storyContent.scrollTop = 0;
    
    // Stop any ongoing narration when switching parts
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration due to part switch');
        window.narrator.stop();
        
        // Clear any reading indicators from previous parts
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Clear any paragraph highlights from previous parts
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
    }
    
    // Announce part change with narrator if available
    if (window.narrator) {
        // Small delay to ensure the previous narration has stopped
        setTimeout(() => {
            // Automatically start reading the new part when switching within story module
            console.log(`Auto-starting narration for story part ${partNumber}`);
            readStoryPartAloud(partNumber, false); // false = automatic call
        }, 100);
    }
}

// Read a specific story part aloud
function readStoryPartAloud(partNumber, isManualCall = true) {
    console.log(`Reading story part ${partNumber} aloud (manual: ${isManualCall})`);
    
    // Enable auto-narration only when user manually starts reading
    if (isManualCall) {
        autoNarrationEnabled = true;
        narrationDisabledByUser = false; // Re-enable auto-narration when user manually starts
    }
    
    // Track user interaction for speech synthesis
    if (typeof trackUserInteraction === 'function') {
        trackUserInteraction();
    }
    
    // Stop any ongoing narration first to avoid interruption errors
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration before starting new one');
        window.narrator.stop();
    }
    
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    const part = storyParts[partNumber - 1];
    if (!part) {
        console.error(`Story part ${partNumber} not found`);
        return;
    }
    
    // Extract plain text from the story part
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = part.content;
    
    // Get all paragraphs and remove vocabulary notes
    const paragraphs = tempDiv.querySelectorAll('p');
    
    // Get poem text if it exists
    const poemText = tempDiv.querySelector('.poem-text');
    
    // Filter out empty paragraphs and those that are part of vocabulary notes
    const validParagraphs = Array.from(paragraphs).filter(p => {
        // Skip if it's empty
        if (p.textContent.trim().length === 0) return false;
        
        // Skip if it's inside a vocabulary note
        if (p.closest('.vocabulary-note')) return false;
        
        // Skip if it's inside a comprehension check
        if (p.closest('.comprehension-check')) return false;
        
        // Skip if it's a button or interactive element
        if (p.closest('button') || p.tagName === 'BUTTON') return false;
        
        return true;
    });
    
    // Extract text content to read
    let storyText = '';
    
    // Add title
    storyText += `${part.title}. `;
    
    // Add paragraph content
    if (validParagraphs.length > 0) {
        storyText += validParagraphs
            .map(p => {
                let text = p.textContent.trim();
                // Remove vocabulary tooltip content that might be included
                text = text.replace(/\s+/g, ' '); // Normalize whitespace
                return text;
            })
            .filter(text => text.length > 0) // Remove empty strings
            .join(' ');
    }
    
    // Add poem content if it exists
    if (poemText) {
        if (storyText.length > 0) {
            storyText += " ";
        }
        storyText += poemText.textContent.replace(/\s+/g, ' ').trim();
    }
    
    console.log(`Prepared text for narration (${storyText.length} characters)`);
    
    // Read the text aloud
    if (window.narrator && window.narrator.enabled) {
        try {
            // Show reading indicator
            const partContainer = document.getElementById(`storyPart${partNumber}`);
            if (partContainer) {
                // Remove any existing reading indicators
                const existingIndicators = partContainer.querySelectorAll('.reading-indicator');
                existingIndicators.forEach(indicator => indicator.remove());
                
                // Create new reading indicator
                const readingIndicator = document.createElement('div');
                readingIndicator.className = 'reading-indicator';
                readingIndicator.id = `reading-indicator-${partNumber}`;
                readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдкрдврд╝рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...';
                
                // Find button container or create one if it doesn't exist
                let buttonContainer = partContainer.querySelector('.button-container');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.className = 'button-container';
                    partContainer.appendChild(buttonContainer);
                }
                
                buttonContainer.appendChild(readingIndicator);
                
                // Add stop button
                const stopButton = document.createElement('button');
                stopButton.className = 'interactive-btn stop-narration-btn';
                stopButton.innerHTML = 'тП╣я╕П рдкрдврд╝рдирд╛ рд░реЛрдХреЗрдВ';
                stopButton.onclick = stopNarration;
                readingIndicator.appendChild(stopButton);
                
                // Remove indicator when narration ends or after timeout
                window.readingTimeout = setTimeout(() => {
                    if (readingIndicator.parentNode) {
                        readingIndicator.classList.add('fade-out');
                        setTimeout(() => readingIndicator.remove(), 500);
                    }
                }, Math.min(storyText.length * 100, 60000)); // Dynamic timeout based on text length, max 1 minute
            }
            
            // Register narration end event
            if (window.narrator.onEndCallback) {
                window.narrator.onEndCallback = null;
            }
            
            window.narrator.onEndCallback = function() {
                const indicator = document.getElementById(`reading-indicator-${partNumber}`);
                if (indicator) {
                    indicator.classList.add('fade-out');
                    setTimeout(() => {
                        if (indicator.parentNode) indicator.remove();
                    }, 500);
                }
                
                if (window.readingTimeout && typeof clearTimeout === 'function') {
                    clearTimeout(window.readingTimeout);
                }
            };
            
            // Start narration
            window.narrator.speak(storyText);
            console.log('Narration started');
            
            // Highlight paragraphs as they are being read
            const elementsToHighlight = [...validParagraphs];
            if (poemText) {
                elementsToHighlight.push(poemText);
            }
            highlightParagraphsSequentially(elementsToHighlight);
            
        } catch (error) {
            console.error('Error starting narration:', error);
            alert('рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╡рд╛рдЪрди рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
        }
    } else {
        console.error('Narrator not available');
        alert('рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕реНрдкреАрдЪ рд╕рд┐рдВрдереЗрд╕рд┐рд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред');
    }
}

// Stop ongoing narration
function stopNarration() {
    if (window.narrator) {
        window.narrator.stop();
        console.log('Narration stopped');
        
        // Disable auto-narration when user manually stops
        autoNarrationEnabled = false;
        narrationDisabledByUser = true; // Mark that user has disabled narration
        
        // Remove all reading indicators
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Remove all paragraph highlights
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
        
        // Clear any timeouts
        if (window.readingTimeout && typeof clearTimeout === 'function') {
            clearTimeout(window.readingTimeout);
        }
        
        if (window.highlightTimeouts && typeof clearTimeout === 'function') {
            window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
            window.highlightTimeouts = [];
        }
    }
}

// Highlight paragraphs sequentially as they are being read
function highlightParagraphsSequentially(paragraphs) {
    // Clear any existing highlight timeouts
    if (window.highlightTimeouts && typeof clearTimeout === 'function') {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
    }
    
    window.highlightTimeouts = [];
    
    // Remove any existing highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Calculate approximate time per paragraph based on length
    const totalTextLength = paragraphs.reduce((sum, p) => sum + p.textContent.length, 0);
    let cumulativeLength = 0;
    
    // Estimate total reading time (about 15 characters per second)
    const totalReadingTime = totalTextLength / 15 * 1000;
    
    // Highlight each paragraph at the appropriate time
    paragraphs.forEach((paragraph, index) => {
        const textLength = paragraph.textContent.length;
        const startPercentage = cumulativeLength / totalTextLength;
        cumulativeLength += textLength;
        
        // Calculate when to highlight this paragraph
        const highlightTime = startPercentage * totalReadingTime;
        
        // Set timeout to add highlight
        const highlightTimeout = setTimeout(() => {
            // Remove highlight from previous paragraphs
            if (index > 0) {
                paragraphs[index - 1].classList.remove('paragraph-highlight');
            }
            
            // Add highlight to current paragraph
            paragraph.classList.add('paragraph-highlight');
            
            // Scroll to the paragraph
            paragraph.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, highlightTime);
        
        window.highlightTimeouts.push(highlightTimeout);
    });
    
    // Clear highlights when done
    const clearHighlightsTimeout = setTimeout(() => {
        paragraphs.forEach(p => p.classList.remove('paragraph-highlight'));
    }, totalReadingTime + 1000);
    
    window.highlightTimeouts.push(clearHighlightsTimeout);
}

// Highlight vocabulary words in the text
function highlightVocabulary() {
    const vocabTerms = document.querySelectorAll('.highlight-vocab');
    
    vocabTerms.forEach(term => {
        term.classList.toggle('active-highlight');
    });
    
    // Show a message that vocabulary highlighting is toggled
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = 'рд╢рдмреНрджрд╛рд░реНрде рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╣реИрдВред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}

// Toggle print-friendly mode
function togglePrintMode() {
    document.body.classList.toggle('print-mode');
    
    // Show a message that print mode is toggled
    const isPrintMode = document.body.classList.contains('print-mode');
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = isPrintMode ? 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдкреНрд░рд┐рдВрдЯ рдлрд╝рдВрдХреНрд╢рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред' : 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}


