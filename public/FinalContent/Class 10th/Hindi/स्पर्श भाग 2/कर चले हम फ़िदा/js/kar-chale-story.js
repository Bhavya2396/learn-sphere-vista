/**
 * Story content and functionality for Kar Chale Hum Fida
 */

// Narration state is now managed in main.js via globalNarrationState

// Story parts data
const storyParts = [
    {
        title: "рд▓реЗрдЦрдХ рдкрд░рд┐рдЪрдп",
        content: `
            <p>рдХреИрдлрд╝реА рдЖрдЬрд╝рдореА рдХрд╛ рдЬрдиреНрдо 19 рдЬрдирд╡рд░реА 1919 рдХреЛ рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢ рдХреЗ рдЖрдЬрд╝рдордЧрдврд╝ рдЬрд╝рд┐рд▓реЗ рдореЗрдВ рдордЬрдорд╛рдВ рдЧрд╛рдБрд╡ рдореЗрдВ рд╣реБрдЖ рдерд╛ред рдЕрджрдм рдХреА рджреБрдирд┐рдпрд╛ рдореЗрдВ рд╡реЗ рдЖрдЧреЗ рдЪрд▓рдХрд░ рдХреИрдлрд╝реА рдЖрдЬрд╝рдореА рдХреЗ рдирд╛рдо рд╕реЗ рдорд╢рд╣реВрд░ рд╣реБрдПред рдХреИрдлрд╝реА рдЖрдЬрд╝рдореА рдХреА рдЧрд┐рдирддреА <span class="highlight-vocab">рдкреНрд░рдЧрддрд┐рд╢реАрд▓<span class="vocab-tooltip">рдЖрдзреБрдирд┐рдХ рд╡рд┐рдЪрд╛рд░рдзрд╛рд░рд╛ рд╡рд╛рд▓реЗ</span></span> рдЙрд░реНрджреВ рдХрд╡рд┐рдпреЛрдВ рдХреА рдкрд╣рд▓реА рдкрдВрдХреНрддрд┐ рдореЗрдВ рдХреА рдЬрд╛рддреА рд╣реИред</p>
            
            <p>рдЙрдирдХреА рдХрд╡рд┐рддрд╛рдУрдВ рдореЗрдВ рдПрдХ рдУрд░ <span class="highlight-vocab">рд╕рд╛рдорд╛рдЬрд┐рдХ<span class="vocab-tooltip">рд╕рдорд╛рдЬ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд</span></span> рдФрд░ рд░рд╛рдЬрдиреИрддрд┐рдХ рдЬрд╛рдЧрд░реВрдХрддрд╛ рдХрд╛ рд╕рдорд╛рд╡реЗрд╢ рд╣реИ, рддреЛ рджреВрд╕рд░реА рдУрд░ рд╣реГрджрдп рдХреА рдХреЛрдорд▓рддрд╛ рднреА рд╣реИред</p>
            
            <p>рдпреБрд╡рд╛рд╡рд╕реНрдерд╛ рдореЗрдВ рдореБрд╢рд╛рдпрд░реЛрдВ рдореЗрдВ рд╡рд╛рд╣-рд╡рд╛рд╣реА рдкрд╛рдиреЗ рд╡рд╛рд▓реЗ рдХреИрдлрд╝реА рдЖрдЬрд╝рдореА рдиреЗ рдлрд╝рд┐рд▓реНрдореЛрдВ рдХреЗ рд▓рд┐рдП рд╕реИрдХрдбрд╝реЛрдВ рдмреЗрд╣рддрд░реАрди рдЧреАрдд рднреА рд▓рд┐рдЦреЗ рд╣реИрдВред 10 рдордИ 2002 рдХреЛ рдЙрдирдХрд╛ рдирд┐рдзрди рд╣реБрдЖред рдЙрдирдХреЗ рдкрд╛рдБрдЪ рдХрд╡рд┐рддрд╛ рд╕рдВрдЧреНрд░рд╣ рдкреНрд░рдХрд╛рд╢рд┐рдд рд╣реБрдП рд╣реИрдВ: <span class="highlight-vocab">рдЭрдВрдХрд╛рд░<span class="vocab-tooltip">рдПрдХ рдкреНрд░рдХрд╛рд░ рдХреА рдЖрд╡рд╛рдЬрд╝</span></span>, рдЖрдЦрд┐рд░-рдП-рд╢рдм, рдЖрд╡рд╛рд░рд╛ рд╕рдЬрд╝рджреЗ, рд╕рд░рдорд╛рдпрд╛ рдФрд░ рдлрд╝рд┐рд▓реНрдореА рдЧреАрддреЛрдВ рдХрд╛ рд╕рдВрдЧреНрд░рд╣ рдореЗрд░реА рдЖрд╡рд╛рдЬрд╝ рд╕реБрдиреЛред</p>
            
            <p>рдЙрдиреНрд╣реЗрдВ рдЕрдкрдиреЗ рд░рдЪрдирд╛рдХрд░реНрдо рдХреЗ рд▓рд┐рдП рд╕рд╛рд╣рд┐рддреНрдп рдЕрдХрд╛рджреЗрдореА рдкреБрд░рд╕реНрдХрд╛рд░ рд╕рд╣рд┐рдд рдХрдИ рдкреБрд░рд╕реНрдХрд╛рд░реЛрдВ рд╕реЗ рд╕рдореНрдорд╛рдирд┐рдд рдХрд┐рдпрд╛ рдЧрдпрд╛ред рдХреИрдлрд╝реА рдХрд▓рд╛рдХрд╛рд░реЛрдВ рдХреЗ рдкрд░рд┐рд╡рд╛рд░ рд╕реЗ рдереЗред рдЙрдирдХреЗ рддреАрдиреЛрдВ рдмрдбрд╝реЗ рднрд╛рдИ рднреА рд╢рд╛рдпрд░ рдереЗред рдЙрдирдХреА рдкрддреНрдиреА рд╢реМрдХрдд рдЖрдЬрд╝рдореА рдФрд░ рдмреЗрдЯреА рд╢рдмрд╛рдирд╛ рдЖрдЬрд╝рдореА рдорд╢рд╣реВрд░ <span class="highlight-vocab">рдЕрднрд┐рдиреЗрддреНрд░рд┐рдпрд╛рдБ<span class="vocab-tooltip">рдорд╣рд┐рд▓рд╛ рдЕрднрд┐рдиреЗрддрд╛</span></span> рд╣реИрдВред</p>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдХреИрдлрд╝реА рдЖрдЬрд╝рдореА рдХрд╛ рдЬрдиреНрдо рдХрдм рдФрд░ рдХрд╣рд╛рдБ рд╣реБрдЖ рдерд╛?</div>
                <div class="comprehension-question">2. рдХреИрдлрд╝реА рдЖрдЬрд╝рдореА рдХреА рдХрд╡рд┐рддрд╛рдУрдВ рдХреА рдореБрдЦреНрдп рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ рдХреНрдпрд╛ рд╣реИрдВ?</div>
                <div class="comprehension-question">3. рдХреИрдлрд╝реА рдЖрдЬрд╝рдореА рдХреЗ рдкреНрд░рдХрд╛рд╢рд┐рдд рдХрд╡рд┐рддрд╛ рд╕рдВрдЧреНрд░рд╣реЛрдВ рдХреЗ рдирд╛рдо рдХреНрдпрд╛ рд╣реИрдВ?</div>
                <div class="comprehension-question">4. рдХреИрдлрд╝реА рдЖрдЬрд╝рдореА рдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреНрдпрд╛ рдЬрд╛рдирдХрд╛рд░реА рджреА рдЧрдИ рд╣реИ?</div>
            </div>
        `
    },
    {
        title: "рдХрд╡рд┐рддрд╛",
        content: `
            <div class="poem-text">
                рдХрд░ рдЪрд▓реЗ рд╣рдо рдлрд╝рд┐рджрд╛ рдЬрд╛рдиреЛ-рддрди рд╕рд╛рдерд┐рдпреЛ<br>
                рдЕрдм рддреБрдореНрд╣рд╛рд░реЗ рд╣рд╡рд╛рд▓реЗ рд╡рддрди рд╕рд╛рдерд┐рдпреЛ<br><br>
                
                рд╕рд╛рдБрд╕ рдердорддреА рдЧрдИ, рдирдмреНрдЬрд╝ рдЬрдорддреА рдЧрдИ<br>
                рдлрд┐рд░ рднреА рдмрдврд╝рддреЗ рдХрджрдо рдХреЛ рди рд░реБрдХрдиреЗ рджрд┐рдпрд╛<br>
                рдХрдЯ рдЧрдП рд╕рд░ рд╣рдорд╛рд░реЗ рддреЛ рдХреБрдЫ рдЧрд╝рдо рдирд╣реАрдВ<br>
                рд╕рд░ рд╣рд┐рдорд╛рд▓рдп рдХрд╛ рд╣рдордиреЗ рди рдЭреБрдХрдиреЗ рджрд┐рдпрд╛<br>
                рдорд░рддреЗ-рдорд░рддреЗ рд░рд╣рд╛ рдмрд╛рдБрдХрдкрди рд╕рд╛рдерд┐рдпреЛ<br>
                рдЕрдм рддреБрдореНрд╣рд╛рд░реЗ рд╣рд╡рд╛рд▓реЗ рд╡рддрди рд╕рд╛рдерд┐рдпреЛ<br><br>
                
                рдЬрд╝рд┐рдВрджрд╛ рд░рд╣рдиреЗ рдХреЗ рдореМрд╕рдо рдмрд╣реБрдд рд╣реИрдВ<br>
                рдордЧрд░ рдЬрд╛рди рджреЗрдиреЗ рдХреА рд░реБрдд рд░реЛрдЬрд╝ рдЖрддреА рдирд╣реАрдВ<br>
                рд╣реБрд╕реНрди рдФрд░ рдЗрд╢реНрдХрд╝ рджреЛрдиреЛрдВ рдХреЛ рд░реБрд╕реНрд╡рд╛ рдХрд░реЗ<br>
                рд╡реЛ рдЬрд╡рд╛рдиреА рдЬреЛ рдЦрд╝реВрдБ рдореЗрдВ рдирд╣рд╛рддреА рдирд╣реАрдВ<br>
                рдЖрдЬ рдзрд░рддреА рдмрдиреА рд╣реИ рджреБрд▓рд╣рди рд╕рд╛рдерд┐рдпреЛ<br>
                рдЕрдм рддреБрдореНрд╣рд╛рд░реЗ рд╣рд╡рд╛рд▓реЗ рд╡рддрди рд╕рд╛рдерд┐рдпреЛ<br><br>
                
                рд░рд╛рд╣ рдХрд╝реБрд░реНрдмрд╛рдирд┐рдпреЛрдВ рдХреА рди рд╡реАрд░рд╛рди рд╣реЛ<br>
                рддреБрдо рд╕рдЬрд╛рддреЗ рд╣реА рд░рд╣рдирд╛ рдирдП рдХрд╝рд╛рдлрд╝рд┐рд▓реЗ<br>
                рдлрд╝рддрд╣ рдХрд╛ рдЬрд╢реНрди рдЗрд╕ рдЬрд╢реНрди рдХреЗ рдмрд╛рдж рд╣реИ<br>
                рдЬрд╝рд┐рдВрджрдЧреА рдореМрдд рд╕реЗ рдорд┐рд▓ рд░рд╣реА рд╣реИ рдЧрд▓реЗ<br>
                рдмрд╛рдБрдз рд▓реЛ рдЕрдкрдиреЗ рд╕рд░ рд╕реЗ рдХрдлрд╝рди рд╕рд╛рдерд┐рдпреЛ<br>
                рдЕрдм рддреБрдореНрд╣рд╛рд░реЗ рд╣рд╡рд╛рд▓реЗ рд╡рддрди рд╕рд╛рдерд┐рдпреЛ<br><br>
                
                рдЦреАрдВрдЪ рджреЛ рдЕрдкрдиреЗ рдЦрд╝реВрдБ рд╕реЗ рдЬрд╝рдореАрдВ рдкрд░ рд▓рдХреАрд░<br>
                рдЗрд╕ рддрд░рдлрд╝ рдЖрдиреЗ рдкрд╛рдП рди рд░рд╛рд╡рди рдХреЛрдИ<br>
                рддреЛрдбрд╝ рджреЛ рд╣рд╛рде рдЕрдЧрд░ рд╣рд╛рде рдЙрдардиреЗ рд▓рдЧреЗ<br>
                рдЫреВ рди рдкрд╛рдП рд╕реАрддрд╛ рдХрд╛ рджрд╛рдорди рдХреЛрдИ<br>
                рд░рд╛рдо рднреА рддреБрдо, рддреБрдореНрд╣реАрдВ рд▓рдХреНрд╖реНрдордг рд╕рд╛рдерд┐рдпреЛ<br>
                рдЕрдм рддреБрдореНрд╣рд╛рд░реЗ рд╣рд╡рд╛рд▓реЗ рд╡рддрди рд╕рд╛рдерд┐рдпреЛ
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдЗрд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ рд╕реИрдирд┐рдХ рдХрд┐рд╕реЗ рд╣рд╡рд╛рд▓реЗ рдХрд░рдХреЗ рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ?</div>
                <div class="comprehension-question">2. 'рд╕рд░ рд╣рд┐рдорд╛рд▓рдп рдХрд╛ рд╣рдордиреЗ рди рдЭреБрдХрдиреЗ рджрд┐рдпрд╛' рдкрдВрдХреНрддрд┐ рдореЗрдВ рд╣рд┐рдорд╛рд▓рдп рдХрд┐рд╕ рдмрд╛рдд рдХрд╛ рдкреНрд░рддреАрдХ рд╣реИ?</div>
                <div class="comprehension-question">3. рдХрд╡рд┐ рдиреЗ рдЗрд╕ рдХрд╡рд┐рддрд╛ рдореЗрдВ рдХрд┐рд╕ рдХрд╝рд╛рдлрд╝рд┐рд▓реЗ рдХреЛ рдЖрдЧреЗ рдмрдврд╝рд╛рддреЗ рд░рд╣рдиреЗ рдХреА рдмрд╛рдд рдХрд╣реА рд╣реИ?</div>
                <div class="comprehension-question">4. 'рд╕рд░ рдкрд░ рдХрдлрд╝рди рдмрд╛рдБрдзрдирд╛' рдХрд┐рд╕ рдУрд░ рд╕рдВрдХреЗрдд рдХрд░рддрд╛ рд╣реИ?</div>
            </div>
        `
    },
    {
        title: "рд╢рдмреНрджрд╛рд░реНрде",
        content: `
            <div class="vocabulary-section">
                <h3>рдХрд╡рд┐рддрд╛ рдХреЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╢рдмреНрдж рдФрд░ рдЙрдирдХреЗ рдЕрд░реНрде</h3>
                
                <div class="vocabulary-note">
                    <div class="word">рдлрд╝рд┐рджрд╛</div>
                    <div class="definition">рдиреНрдпреЛрдЫрд╛рд╡рд░</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рд╣рд╡рд╛рд▓реЗ</div>
                    <div class="definition">рд╕реБрдкреБрд░реНрдж</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдирдмреНрдЬрд╝</div>
                    <div class="definition">рдирд╛рдбрд╝реА</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдмрд╛рдБрдХрдкрди</div>
                    <div class="definition">рдирд┐рдбрд░рддрд╛, рдмрд╣рд╛рджреБрд░реА</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рд░реБрдд</div>
                    <div class="definition">рдореМрд╕рдо</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рд╣реБрд╕реНрди</div>
                    <div class="definition">рд╕реБрдВрджрд░рддрд╛</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдЗрд╢реНрдХрд╝</div>
                    <div class="definition">рдкреНрд░реЗрдо</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рд░реБрд╕реНрд╡рд╛</div>
                    <div class="definition">рдмрджрдирд╛рдо</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдЦрд╝реВрдБ</div>
                    <div class="definition">рд░рдХреНрдд, рд▓рд╣реВ</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдХрд╝реБрд░реНрдмрд╛рдирд┐рдпреЛрдВ</div>
                    <div class="definition">рддреНрдпрд╛рдЧ</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдХрд╛рдлрд╝рд┐рд▓рд╛</div>
                    <div class="definition">рдпрд╛рддреНрд░рд┐рдпреЛрдВ рдХрд╛ рд╕рдореВрд╣</div>
                </div>
            </div>
        `
    },
    {
        title: "рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ",
        content: `
            <div class="notes-section">
                <h3>рдХрд╡рд┐рддрд╛ рдкрд░ рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ</h3>
                
                <div class="note-item">
                    <h4>рджреЗрд╢рднрдХреНрддрд┐ рдФрд░ рдмрд▓рд┐рджрд╛рди</h4>
                    <p>"рдХрд░ рдЪрд▓реЗ рд╣рдо рдлрд╝рд┐рджрд╛" рдХрд╡рд┐рддрд╛ рджреЗрд╢рднрдХреНрддрд┐ рдФрд░ рдмрд▓рд┐рджрд╛рди рдХреА рднрд╛рд╡рдирд╛ рдХреЛ рджрд░реНрд╢рд╛рддреА рд╣реИред рдЗрд╕рдореЗрдВ рд╕реИрдирд┐рдХ рдЕрдкрдиреЗ рджреЗрд╢ рдХреЗ рдкреНрд░рддрд┐ рдЕрдкрдиреА рдЬрд┐рдореНрдореЗрджрд╛рд░реА рдХреЛ рдкреВрд░рд╛ рдХрд░рддреЗ рд╣реБрдП, рдЕрдкрдиреЗ рдкреНрд░рд╛рдгреЛрдВ рдХреА рдЪрд┐рдВрддрд╛ рдХрд┐рдП рдмрд┐рдирд╛ рджреЗрд╢ рдХреА рд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдмрд▓рд┐рджрд╛рди рджреЗрдиреЗ рдХреА рддрддреНрдкрд░рддрд╛ рд╡реНрдпрдХреНрдд рдХрд░рддреЗ рд╣реИрдВред</p>
                </div>
                
                <div class="note-item">
                    <h4>рдкреНрд░рддреАрдХ</h4>
                    <p>'рд╕рд░ рд╣рд┐рдорд╛рд▓рдп рдХрд╛ рд╣рдордиреЗ рди рдЭреБрдХрдиреЗ рджрд┐рдпрд╛' рдкрдВрдХреНрддрд┐ рдореЗрдВ рд╣рд┐рдорд╛рд▓рдп рднрд╛рд░рдд рдХреЗ рдЧреМрд░рд╡ рдФрд░ рдЕрдЦрдВрдбрддрд╛ рдХрд╛ рдкреНрд░рддреАрдХ рд╣реИред рд╕реИрдирд┐рдХреЛрдВ рдиреЗ рдЕрдкрдиреЗ рдмрд▓рд┐рджрд╛рди рд╕реЗ рджреЗрд╢ рдХреЗ рдЧреМрд░рд╡ рдФрд░ рдЕрдЦрдВрдбрддрд╛ рдХреЛ рдмрдирд╛рдП рд░рдЦрд╛ рд╣реИред</p>
                </div>
                
                <div class="note-item">
                    <h4>рд░рд╛рдорд╛рдпрдг рдХрд╛ рд╕рдВрджрд░реНрдн</h4>
                    <p>рдЕрдВрддрд┐рдо рдЕрдиреБрдЪреНрдЫреЗрдж рдореЗрдВ рдХрд╡рд┐ рдиреЗ рд░рд╛рдорд╛рдпрдг рдХреЗ рд╕рдВрджрд░реНрдн рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рд╣реИред рдЬрд╣рд╛рдВ рд╕реИрдирд┐рдХреЛрдВ рдХреЛ рд░рд╛рдо рдФрд░ рд▓рдХреНрд╖реНрдордг рдХреЗ рд░реВрдк рдореЗрдВ, рджреЗрд╢ рдХреЛ рд╕реАрддрд╛ рдХреЗ рд░реВрдк рдореЗрдВ рдФрд░ рд╢рддреНрд░реБрдУрдВ рдХреЛ рд░рд╛рд╡рдг рдХреЗ рд░реВрдк рдореЗрдВ рдЪрд┐рддреНрд░рд┐рдд рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред</p>
                </div>
                
                <div class="note-item">
                    <h4>рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рд╕рдВрджрд░реНрдн</h4>
                    <p>рдпрд╣ рдХрд╡рд┐рддрд╛ 1964 рдХреА рдлрд┐рд▓реНрдо 'рд╣рдХрд╝реАрдХрд╝рдд' рдХреЗ рд▓рд┐рдП рд▓рд┐рдЦреА рдЧрдИ рдереА, рдЬреЛ 1962 рдХреЗ рднрд╛рд░рдд-рдЪреАрди рдпреБрджреНрдз рдкрд░ рдЖрдзрд╛рд░рд┐рдд рдереАред рдЗрд╕ рдпреБрджреНрдз рдореЗрдВ рднрд╛рд░рддреАрдп рд╕реИрдирд┐рдХреЛрдВ рдиреЗ рдЕрдкрд╛рд░ рд╕рд╛рд╣рд╕ рдФрд░ рдмрд▓рд┐рджрд╛рди рдХрд╛ рдкрд░рд┐рдЪрдп рджрд┐рдпрд╛ рдерд╛ред</p>
                </div>
            </div>
        `
    }
];

// Show a specific part of the story
function showStoryPart(partNumber) {
    if (partNumber < 1 || partNumber > storyParts.length) return;
    
    console.log(`Loading story part ${partNumber}`);
    
    // Update navigation buttons
    document.querySelectorAll('.story-nav-btn').forEach((btn, index) => {
        btn.classList.toggle('active', index + 1 === partNumber);
        btn.setAttribute('aria-pressed', index + 1 === partNumber ? 'true' : 'false');
    });
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) {
        console.error('Story content container not found');
        return;
    }
    
    // Create a container for this part if it doesn't exist
    let partContainer = document.getElementById(`storyPart${partNumber}`);
    if (!partContainer) {
        partContainer = document.createElement('div');
        partContainer.id = `storyPart${partNumber}`;
        partContainer.className = 'story-part';
        storyContent.appendChild(partContainer);
    }
    
    // Hide all parts and show the selected one
    document.querySelectorAll('.story-part').forEach(part => {
        part.classList.remove('active');
    });
    partContainer.classList.add('active');
    
    // Load content if not already loaded
    if (!partContainer.innerHTML.trim()) {
        const part = storyParts[partNumber - 1];
        if (!part) {
            console.error(`Story part ${partNumber} not found`);
            return;
        }
        
        partContainer.innerHTML = `
            <h3 class="story-part-title">${part.title}</h3>
            ${part.content}
        `;
        
        // Add event listeners to vocabulary terms
        partContainer.querySelectorAll('.highlight-vocab').forEach(term => {
            term.addEventListener('click', function() {
                const word = this.textContent.split('\n')[0].trim();
                const definition = this.querySelector('.vocab-tooltip').textContent;
                
                if (window.narrator) {
                    window.narrator.speak(`${word}: ${definition}`);
                }
            });
        });
        
        // Add read aloud button for this part
        const readAloudBtn = document.createElement('button');
        readAloudBtn.className = 'interactive-btn read-part-btn';
        readAloudBtn.innerHTML = 'ЁЯФК рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ';
        readAloudBtn.setAttribute('aria-label', `рднрд╛рдЧ ${partNumber} рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ`);
        readAloudBtn.onclick = function() { readStoryPartAloud(partNumber, true); }; // true = manual call
        
        // Add button to the end of the part
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'button-container';
        buttonContainer.appendChild(readAloudBtn);
        partContainer.appendChild(buttonContainer);
    }
    
    // Scroll to top of story
    storyContent.scrollTop = 0;
    
    // Stop any ongoing narration when switching parts
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration due to part switch');
        window.narrator.stop();
        
        // Clear any reading indicators from previous parts
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Clear any paragraph highlights from previous parts
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
    }
    
    // Announce part change with narrator if available
    if (window.narrator && !globalNarrationState.disabledByUser) {
        // Update global narration state
        globalNarrationState.currentPart = partNumber;
        
        // Small delay to ensure the previous narration has stopped
        setTimeout(() => {
            // Automatically start reading the new part when switching within story module
            console.log(`Auto-starting narration for story part ${partNumber}`);
            readStoryPartAloud(partNumber, false); // false = automatic call
        }, 100);
    }
}

// Read a specific story part aloud
function readStoryPartAloud(partNumber, isManualCall = true) {
    console.log(`Reading story part ${partNumber} aloud (manual: ${isManualCall})`);
    
    // Enable auto-narration only when user manually starts reading
    if (isManualCall) {
        globalNarrationState.disabledByUser = false; // Re-enable auto-narration when user manually starts
        trackUserInteraction(); // Ensure user interaction is tracked
    }
    
    // Track user interaction for speech synthesis
    if (typeof trackUserInteraction === 'function') {
        trackUserInteraction();
    }
    
    // Stop any ongoing narration first to avoid interruption errors
    if (window.narrator && window.narrator.currentUtterance) {
        console.log('Stopping ongoing narration before starting new one');
        window.narrator.stop();
    }
    
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    const part = storyParts[partNumber - 1];
    if (!part) {
        console.error(`Story part ${partNumber} not found`);
        return;
    }
    
    // Extract plain text from the story part
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = part.content;
    
    // Get all paragraphs and remove vocabulary notes
    const paragraphs = tempDiv.querySelectorAll('p');
    
    // Get poem text if it exists
    const poemText = tempDiv.querySelector('.poem-text');
    
    // Filter out empty paragraphs and those that are part of vocabulary notes
    const validParagraphs = Array.from(paragraphs).filter(p => {
        // Skip if it's empty
        if (p.textContent.trim().length === 0) return false;
        
        // Skip if it's inside a vocabulary note
        if (p.closest('.vocabulary-note')) return false;
        
        // Skip if it's inside a comprehension check
        if (p.closest('.comprehension-check')) return false;
        
        // Skip if it's a button or interactive element
        if (p.closest('button') || p.tagName === 'BUTTON') return false;
        
        return true;
    });
    
    // Extract text content to read
    let storyText = '';
    
    // Add title
    storyText += `${part.title}. `;
    
    // Add paragraph content
    if (validParagraphs.length > 0) {
        storyText += validParagraphs
            .map(p => {
                let text = p.textContent.trim();
                // Remove vocabulary tooltip content that might be included
                text = text.replace(/\s+/g, ' '); // Normalize whitespace
                return text;
            })
            .filter(text => text.length > 0) // Remove empty strings
            .join(' ');
    }
    
    // Add poem content if it exists
    if (poemText) {
        if (storyText.length > 0) {
            storyText += " ";
        }
        storyText += poemText.textContent.replace(/\s+/g, ' ').trim();
    }
    
    console.log(`Prepared text for narration (${storyText.length} characters)`);
    
    // Read the text aloud
    if (window.narrator && window.narrator.enabled) {
        try {
            // Show reading indicator
            const partContainer = document.getElementById(`storyPart${partNumber}`);
            if (partContainer) {
                // Remove any existing reading indicators
                const existingIndicators = partContainer.querySelectorAll('.reading-indicator');
                existingIndicators.forEach(indicator => indicator.remove());
                
                // Create new reading indicator
                const readingIndicator = document.createElement('div');
                readingIndicator.className = 'reading-indicator';
                readingIndicator.id = `reading-indicator-${partNumber}`;
                readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдкрдврд╝рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...';
                
                // Find button container or create one if it doesn't exist
                let buttonContainer = partContainer.querySelector('.button-container');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.className = 'button-container';
                    partContainer.appendChild(buttonContainer);
                }
                
                buttonContainer.appendChild(readingIndicator);
                
                // Add stop button
                const stopButton = document.createElement('button');
                stopButton.className = 'interactive-btn stop-narration-btn';
                stopButton.innerHTML = 'тП╣я╕П рдкрдврд╝рдирд╛ рд░реЛрдХреЗрдВ';
                stopButton.onclick = stopNarration;
                readingIndicator.appendChild(stopButton);
                
                // Remove indicator when narration ends or after timeout
                window.readingTimeout = setTimeout(() => {
                    if (readingIndicator.parentNode) {
                        readingIndicator.classList.add('fade-out');
                        setTimeout(() => readingIndicator.remove(), 500);
                    }
                }, Math.min(storyText.length * 100, 60000)); // Dynamic timeout based on text length, max 1 minute
            }
            
            // Register narration end event
            if (window.narrator.onEndCallback) {
                window.narrator.onEndCallback = null;
            }
            
            window.narrator.onEndCallback = function() {
                const indicator = document.getElementById(`reading-indicator-${partNumber}`);
                if (indicator) {
                    indicator.classList.add('fade-out');
                    setTimeout(() => {
                        if (indicator.parentNode) indicator.remove();
                    }, 500);
                }
                
                if (window.readingTimeout && typeof clearTimeout === 'function') {
                    clearTimeout(window.readingTimeout);
                }
            };
            
            // Start narration
            window.narrator.speak(storyText);
            console.log('Narration started');
            
            // Highlight paragraphs as they are being read
            const elementsToHighlight = [...validParagraphs];
            if (poemText) {
                elementsToHighlight.push(poemText);
            }
            highlightParagraphsSequentially(elementsToHighlight);
            
        } catch (error) {
            console.error('Error starting narration:', error);
            alert('рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╡рд╛рдЪрди рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
        }
    } else {
        console.error('Narrator not available');
        alert('рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕реНрдкреАрдЪ рд╕рд┐рдВрдереЗрд╕рд┐рд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред');
    }
}

// Stop ongoing narration
function stopNarration() {
    if (window.narrator) {
        window.narrator.stop();
        console.log('Narration stopped');
        
        // Disable auto-narration when user manually stops
        globalNarrationState.disabledByUser = true; // Mark that user has disabled narration
        
        // Remove all reading indicators
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Remove all paragraph highlights
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
        
        // Clear any timeouts
        if (window.readingTimeout && typeof clearTimeout === 'function') {
            clearTimeout(window.readingTimeout);
        }
        
        if (window.highlightTimeouts && typeof clearTimeout === 'function') {
            window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
            window.highlightTimeouts = [];
        }
    }
}

// Highlight paragraphs sequentially as they are being read
function highlightParagraphsSequentially(paragraphs) {
    // Clear any existing highlight timeouts
    if (window.highlightTimeouts && typeof clearTimeout === 'function') {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
    }
    
    window.highlightTimeouts = [];
    
    // Remove any existing highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Calculate approximate time per paragraph based on length
    const totalTextLength = paragraphs.reduce((sum, p) => sum + p.textContent.length, 0);
    let cumulativeLength = 0;
    
    // Estimate total reading time (about 15 characters per second)
    const totalReadingTime = totalTextLength / 15 * 1000;
    
    // Highlight each paragraph at the appropriate time
    paragraphs.forEach((paragraph, index) => {
        const textLength = paragraph.textContent.length;
        const startPercentage = cumulativeLength / totalTextLength;
        cumulativeLength += textLength;
        
        // Calculate when to highlight this paragraph
        const highlightTime = startPercentage * totalReadingTime;
        
        // Set timeout to add highlight
        const highlightTimeout = setTimeout(() => {
            // Remove highlight from previous paragraphs
            if (index > 0) {
                paragraphs[index - 1].classList.remove('paragraph-highlight');
            }
            
            // Add highlight to current paragraph
            paragraph.classList.add('paragraph-highlight');
            
            // Scroll to the paragraph
            paragraph.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, highlightTime);
        
        window.highlightTimeouts.push(highlightTimeout);
    });
    
    // Clear highlights when done
    const clearHighlightsTimeout = setTimeout(() => {
        paragraphs.forEach(p => p.classList.remove('paragraph-highlight'));
    }, totalReadingTime + 1000);
    
    window.highlightTimeouts.push(clearHighlightsTimeout);
}

// Highlight vocabulary words in the text
function highlightVocabulary() {
    const vocabTerms = document.querySelectorAll('.highlight-vocab');
    
    vocabTerms.forEach(term => {
        term.classList.toggle('active-highlight');
    });
    
    // Show a message that vocabulary highlighting is toggled
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = 'рд╢рдмреНрджрд╛рд░реНрде рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╣реИрдВред рдЕрд░реНрде рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╢рдмреНрджреЛрдВ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}

// Toggle print-friendly mode
function togglePrintMode() {
    document.body.classList.toggle('print-mode');
    
    // Show a message that print mode is toggled
    const isPrintMode = document.body.classList.contains('print-mode');
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = isPrintMode ? 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдкреНрд░рд┐рдВрдЯ рдлрд╝рдВрдХреНрд╢рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред' : 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}
