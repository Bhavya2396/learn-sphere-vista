/**
 * Story content and functionality for Tatara-Vamiro Katha
 */

// CRITICAL DEBUG: Confirm this file is being loaded
console.log('=== TATARA-VAMIRO-STORY.JS LOADED ===');
console.log('This should appear if tatara-vamiro-story.js is being executed');

// Make sure showStoryPart is available globally
window.showStoryPart = function(partNumber) {
    console.log('=== GLOBAL showStoryPart CALLED ===', partNumber);
    return showStoryPartInternal(partNumber);
};

// Make sure other functions are available globally
window.toggleReadAloud = function() {
    console.log('=== GLOBAL toggleReadAloud CALLED ===');
    return toggleReadAloudInternal();
};

window.highlightVocabulary = function() {
    console.log('=== GLOBAL highlightVocabulary CALLED ===');
    return highlightVocabularyInternal();
};

window.togglePrintMode = function() {
    console.log('=== GLOBAL togglePrintMode CALLED ===');
    return togglePrintModeInternal();
};

// Global variables to track narration state
let autoNarrationEnabled = true; // Set to true to match reference file behavior
let narrationDisabledByUser = false;
let currentStoryPart = 1;

// Track if we're in the story module
let isStoryModuleActive = false;

// Debug flag to enable verbose logging (use global from main.js)
// DEBUG_NARRATION is declared in main.js

// Story parts data
const storyParts = [
    {
        title: "рднрд╛рдЧ 1",
        content: `
            <div class="story-text">
                <p>рдЕрдВрджрдорд╛рди рджреНрд╡реАрдкрд╕рдореВрд╣ рдХрд╛ рдЕрдВрддрд┐рдо рджрдХреНрд╖рд┐рдгреА рджреНрд╡реАрдк рд╣реИ <span class="highlight-vocab">рд▓рд┐рдЯрд┐рд▓ рдЕрдВрджрдорд╛рди<span class="vocab-tooltip">рдЫреЛрдЯрд╛ рдЕрдВрджрдорд╛рди рджреНрд╡реАрдк</span></span>ред рдпрд╣ рдкреЛрд░реНрдЯ рдмреНрд▓реЗрдпрд░ рд╕реЗ рд▓рдЧрднрдЧ рд╕реМ рдХрд┐рд▓реЛрдореАрдЯрд░ рджреВрд░ рд╕реНрдерд┐рдд рд╣реИред рдЗрд╕рдХреЗ рдмрд╛рдж рдирд┐рдХреЛрдмрд╛рд░ рджреНрд╡реАрдкрд╕рдореВрд╣ рдХреА рд╢реНрд░реГрдВрдЦрд▓рд╛ рдЖрд░рдВрдн рд╣реЛрддреА рд╣реИ рдЬреЛ рдирд┐рдХреЛрдмрд╛рд░реА рдЬрдирдЬрд╛рддрд┐ рдХреА рдЖрджрд┐рдо рд╕рдВрд╕реНрдХреГрддрд┐ рдХреЗ рдХреЗрдВрджреНрд░ рд╣реИрдВред рдирд┐рдХреЛрдмрд╛рд░ рджреНрд╡реАрдкрд╕рдореВрд╣ рдХрд╛ рдкрд╣рд▓рд╛ рдкреНрд░рдореБрдЦ рджреНрд╡реАрдк рд╣реИ рдХрд╛рд░-рдирд┐рдХреЛрдмрд╛рд░ рдЬреЛ рд▓рд┐рдЯрд┐рд▓ рдЕрдВрджрдорд╛рди рд╕реЗ 96 рдХрд┐.рдореА. рджреВрд░ рд╣реИред рдирд┐рдХреЛрдмрд╛рд░рд┐рдпреЛрдВ рдХрд╛ рд╡рд┐рд╢реНрд╡рд╛рд╕ рд╣реИ рдХрд┐ рдкреНрд░рд╛рдЪреАрди рдХрд╛рд▓ рдореЗрдВ рдпреЗ рджреЛрдиреЛрдВ рджреНрд╡реАрдк рдПрдХ рд╣реА рдереЗред рдЗрдирдХреЗ рд╡рд┐рднрдХреНрдд рд╣реЛрдиреЗ рдХреА рдПрдХ рд▓реЛрдХрдХрдерд╛ рд╣реИ рдЬреЛ рдЖрдЬ рднреА рджреЛрд╣рд░рд╛рдИ рдЬрд╛рддреА рд╣реИред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рд▓рд┐рдЯрд┐рд▓ рдЕрдВрджрдорд╛рди</div>
                    <div class="definition">рдЫреЛрдЯрд╛ рдЕрдВрджрдорд╛рди рджреНрд╡реАрдк</div>
                </div>
                
                <p>рд╕рджрд┐рдпреЛрдВ рдкреВрд░реНрд╡, рдЬрдм рд▓рд┐рдЯрд┐рд▓ рдЕрдВрджрдорд╛рди рдФрд░ рдХрд╛рд░-рдирд┐рдХреЛрдмрд╛рд░ рдЖрдкрд╕ рдореЗрдВ рдЬреБрдбрд╝реЗ рд╣реБрдП рдереЗ рддрдм рд╡рд╣рд╛рдБ рдПрдХ рд╕реБрдВрджрд░ рд╕рд╛ рдЧрд╛рдБрд╡ рдерд╛ред рдкрд╛рд╕ рдореЗрдВ рдПрдХ рд╕реБрдВрджрд░ рдФрд░ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдпреБрд╡рдХ рд░рд╣рд╛ рдХрд░рддрд╛ рдерд╛ред рдЙрд╕рдХрд╛ рдирд╛рдо рдерд╛ <span class="highlight-vocab">рддрддрд╛рдБрд░рд╛<span class="vocab-tooltip">рдПрдХ рд╕реБрдВрджрд░ рдФрд░ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдпреБрд╡рдХ рдХрд╛ рдирд╛рдо</span></span>ред рдирд┐рдХреЛрдмрд╛рд░реА рдЙрд╕реЗ рдмреЗрд╣рдж рдкреНрд░реЗрдо рдХрд░рддреЗ рдереЗред рддрддрд╛рдБрд░рд╛ рдПрдХ рдиреЗрдХ рдФрд░ рдорджрджрдЧрд╛рд░ рд╡реНрдпрдХреНрддрд┐ рдерд╛ред рд╕рджреИрд╡ рджреВрд╕рд░реЛрдВ рдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рддрддреНрдкрд░ рд░рд╣рддрд╛ред рдЕрдкрдиреЗ рдЧрд╛рдБрд╡рд╡рд╛рд▓реЛрдВ рдХреЛ рд╣реА рдирд╣реАрдВ, рдЕрдкрд┐рддреБ рд╕рдореВрдЪреЗ рджреНрд╡реАрдкрд╡рд╛рд╕рд┐рдпреЛрдВ рдХреА рд╕реЗрд╡рд╛ рдХрд░рдирд╛ рдЕрдкрдирд╛ рдкрд░рдо рдХрд░реНрддрд╡реНрдп рд╕рдордЭрддрд╛ рдерд╛ред рдЙрд╕рдХреЗ рдЗрд╕ рддреНрдпрд╛рдЧ рдХреА рд╡рдЬрд╣ рд╕реЗ рд╡рд╣ рдЪрд░реНрдЪрд┐рдд рдерд╛ред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рддрддрд╛рдБрд░рд╛</div>
                    <div class="definition">рдПрдХ рд╕реБрдВрджрд░ рдФрд░ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдпреБрд╡рдХ рдХрд╛ рдирд╛рдо</div>
                </div>
                
                <p>рд╕рднреА рдЙрд╕рдХрд╛ рдЖрджрд░ рдХрд░рддреЗред рд╡рдХреНрдд рдореБрд╕реАрдмрдд рдореЗрдВ рдЙрд╕реЗ рд╕реНрдорд░рдг рдХрд░рддреЗ рдФрд░ рд╡рд╣ рднрд╛рдЧрд╛-рднрд╛рдЧрд╛ рд╡рд╣рд╛рдБ рдкрд╣реБрдБрдЪ рдЬрд╛рддрд╛ред рджреВрд╕рд░реЗ рдЧрд╛рдБрд╡реЛрдВ рдореЗрдВ рднреА рдкрд░реНрд╡-рддреНрдпреЛрд╣рд╛рд░реЛрдВ рдХреЗ рд╕рдордп рдЙрд╕реЗ рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рдЖрдордВрддреНрд░рд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ред рдЙрд╕рдХрд╛ рд╡реНрдпрдХреНрддрд┐рддреНрд╡ рддреЛ рдЖрдХрд░реНрд╖рдХ рдерд╛ рд╣реА, рд╕рд╛рде рд╣реА <span class="highlight-vocab">рдЖрддреНрдореАрдп<span class="vocab-tooltip">рдЕрдкрдирд╛</span></span> рд╕реНрд╡рднрд╛рд╡ рдХреА рд╡рдЬрд╣ рд╕реЗ рд▓реЛрдЧ рдЙрд╕рдХреЗ рдХрд░реАрдм рд░рд╣рдирд╛ рдЪрд╛рд╣рддреЗред рдкрд╛рд░рдВрдкрд░рд┐рдХ рдкреЛрд╢рд╛рдХ рдХреЗ рд╕рд╛рде рд╡рд╣ рдЕрдкрдиреА рдХрдорд░ рдореЗрдВ рд╕рджреИрд╡ рдПрдХ рд▓рдХрдбрд╝реА рдХреА рддрд▓рд╡рд╛рд░ рдмрд╛рдБрдзреЗ рд░рд╣рддрд╛ред рд▓реЛрдЧреЛрдВ рдХрд╛ рдордд рдерд╛, рдмрд╛рд╡рдЬреВрдж рд▓рдХрдбрд╝реА рдХреА рд╣реЛрдиреЗ рдкрд░, рдЙрд╕ рддрд▓рд╡рд╛рд░ рдореЗрдВ рдЕрджреНрднреБрдд рджреИрд╡реАрдп рд╢рдХреНрддрд┐ рдереАред рддрддрд╛рдБрд░рд╛ рдЕрдкрдиреА рддрд▓рд╡рд╛рд░ рдХреЛ рдХрднреА рдЕрд▓рдЧ рди рд╣реЛрдиреЗ рджреЗрддрд╛ред рдЙрд╕рдХрд╛ рджреВрд╕рд░реЛрдВ рдХреЗ рд╕рд╛рдордиреЗ рдЙрдкрдпреЛрдЧ рднреА рди рдХрд░рддрд╛ред рдХрд┐рдВрддреБ рдЙрд╕рдХреЗ рдЪрд░реНрдЪрд┐рдд рд╕рд╛рд╣рд╕рд┐рдХ рдХрд╛рд░рдирд╛рдореЛрдВ рдХреЗ рдХрд╛рд░рдг рд▓реЛрдЧ-рдмрд╛рдЧ рддрд▓рд╡рд╛рд░ рдореЗрдВ рдЕрджреНрднреБрдд рд╢рдХреНрддрд┐ рдХрд╛ рд╣реЛрдирд╛ рдорд╛рдирддреЗ рдереЗред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рдЖрддреНрдореАрдп</div>
                    <div class="definition">рдЕрдкрдирд╛</div>
                </div>
                
                <p>рддрддрд╛рдБрд░рд╛ рдХреА рддрд▓рд╡рд╛рд░ рдПрдХ <span class="highlight-vocab">рд╡рд┐рд▓рдХреНрд╖рдг<span class="vocab-tooltip">рдЕрд╕рд╛рдзрд╛рд░рдг</span></span> рд░рд╣рд╕реНрдп рдереАред рдПрдХ рд╢рд╛рдо рддрддрд╛рдБрд░рд╛ рджрд┐рдирднрд░ рдХреЗ рдЕрдердХ рдкрд░рд┐рд╢реНрд░рдо рдХреЗ рдмрд╛рдж рд╕рдореБрджреНрд░ рдХрд┐рдирд╛рд░реЗ рдЯрд╣рд▓рдиреЗ рдирд┐рдХрд▓ рдкрдбрд╝рд╛ред рд╕реВрд░рдЬ рд╕рдореБрджреНрд░ рд╕реЗ рд▓рдЧреЗ рдХреНрд╖рд┐рддрд┐рдЬ рддрд▓реЗ рдбреВрдмрдиреЗ рдХреЛ рдерд╛ред рд╕рдореБрджреНрд░ рд╕реЗ рдардВрдбреА рдмрдпрд╛рд░реЗрдВ рдЖ рд░рд╣реА рдереАрдВред рдкрдХреНрд╖рд┐рдпреЛрдВ рдХреА рд╕рд╛рдпрдВрдХрд╛рд▓реАрди рдЪрд╣рдЪрд╣рд╛рд╣рдЯреЗрдВ рд╢рдиреИрдГ рд╢рдиреИрдГ рдХреНрд╖реАрдг рд╣реЛрдиреЗ рдХреЛ рдереАрдВред рдЙрд╕рдХрд╛ рдорди рд╢рд╛рдВрдд рдерд╛ред рд╡рд┐рдЪрд╛рд░рдордЧреНрди рддрддрд╛рдБрд░рд╛ рд╕рдореБрджреНрд░реА рдмрд╛рд▓реВ рдкрд░ рдмреИрдардХрд░ рд╕реВрд░рдЬ рдХреА рдЕрдВрддрд┐рдо рд░рдВрдЧ-рдмрд┐рд░рдВрдЧреА рдХрд┐рд░рдгреЛрдВ рдХреЛ рд╕рдореБрджреНрд░ рдкрд░ рдирд┐рд╣рд╛рд░рдиреЗ рд▓рдЧрд╛ред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рд╡рд┐рд▓рдХреНрд╖рдг</div>
                    <div class="definition">рдЕрд╕рд╛рдзрд╛рд░рдг</div>
                </div>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рдЕрдВрджрдорд╛рди рджреНрд╡реАрдкрд╕рдореВрд╣ рдХрд╛ рдЕрдВрддрд┐рдо рджрдХреНрд╖рд┐рдгреА рджреНрд╡реАрдк рдХреМрди рд╕рд╛ рд╣реИ?</div>
                <div class="comprehension-question">2. рддрддрд╛рдБрд░рд╛ рдХреМрди рдерд╛ рдФрд░ рдЙрд╕рдХреА рдХреНрдпрд╛ рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ рдереАрдВ?</div>
                <div class="comprehension-question">3. рддрддрд╛рдБрд░рд╛ рдХреЗ рдкрд╛рд╕ рдХреМрди рд╕реА рд╡рд┐рд╢реЗрд╖ рд╡рд╕реНрддреБ рдереА рдЬрд┐рд╕реЗ рд╡рд╣ рд╣рдореЗрд╢рд╛ рдЕрдкрдиреЗ рд╕рд╛рде рд░рдЦрддрд╛ рдерд╛?</div>
                <div class="comprehension-question">4. рдирд┐рдХреЛрдмрд╛рд░рд┐рдпреЛрдВ рдХрд╛ рдХреНрдпрд╛ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдерд╛?</div>
            </div>
        `
    },
    {
        title: "рднрд╛рдЧ 2",
        content: `
            <div class="story-text">
                <p>рддрднреА рдХрд╣реАрдВ рдкрд╛рд╕ рд╕реЗ рдЙрд╕реЗ рдордзреБрд░ рдЧреАрдд рдЧреВрдБрдЬрддрд╛ рд╕реБрдирд╛рдИ рджрд┐рдпрд╛ред рдЧреАрдд рдорд╛рдиреЛ рдмрд╣рддрд╛ рд╣реБрдЖ рдЙрд╕рдХреА рддрд░рдлрд╝ рдЖ рд░рд╣рд╛ рд╣реЛред рдмреАрдЪ-рдмреАрдЪ рдореЗрдВ рд▓рд╣рд░реЛрдВ рдХрд╛ рд╕рдВрдЧреАрдд рд╕реБрдирд╛рдИ рджреЗрддрд╛ред рдЧрд╛рдпрди рдЗрддрдирд╛ рдкреНрд░рднрд╛рд╡реА рдерд╛ рдХрд┐ рд╡рд╣ рдЕрдкрдиреА рд╕реБрдз-рдмреБрдз рдЦреЛрдиреЗ рд▓рдЧрд╛ред рд▓рд╣рд░реЛрдВ рдХреЗ рдПрдХ рдкреНрд░рдмрд▓ рд╡реЗрдЧ рдиреЗ рдЙрд╕рдХреА <span class="highlight-vocab">рддрдВрджреНрд░рд╛<span class="vocab-tooltip">рдПрдХрд╛рдЧреНрд░рддрд╛</span></span> рднрдВрдЧ рдХреАред <span class="highlight-vocab">рдЪреИрддрдиреНрдп<span class="vocab-tooltip">рд╕рдЬрдЧ</span></span> рд╣реЛрддреЗ рд╣реА рд╡рд╣ рдЙрдзрд░ рдмрдврд╝рдиреЗ рдХреЛ рд╡рд┐рд╡рд╢ рд╣реЛ рдЙрдард╛ рдЬрд┐рдзрд░ рд╕реЗ рдЕрдм рднреА рдЧреАрдд рдХреЗ рд╕реНрд╡рд░ рдмрд╣ рд░рд╣реЗ рдереЗред рд╡рд╣ <span class="highlight-vocab">рд╡рд┐рдХрд▓<span class="vocab-tooltip">рдмреЗрдЪреИрди/рд╡реНрдпрд╛рдХреБрд▓</span></span> рд╕рд╛ рдЙрд╕ рддрд░рдлрд╝ рдмрдврд╝рддрд╛ рдЧрдпрд╛ред рдЕрдВрддрддрдГ рдЙрд╕рдХреА рдирдЬрд╝рд░ рдПрдХ рдпреБрд╡рддреА рдкрд░ рдкрдбрд╝реА рдЬреЛ рдврд▓рддреА рд╣реБрдИ рд╢рд╛рдо рдХреЗ рд╕реМрдВрджрд░реНрдп рдореЗрдВ рдмреЗрд╕реБрдз, рдПрдХрдЯрдХ рд╕рдореБрджреНрд░ рдХреА рджреЗрд╣ рдкрд░ рдбреВрдмрддреЗ рдЖрдХрд░реНрд╖рдХ рд░рдВрдЧреЛрдВ рдХреЛ рдирд┐рд╣рд╛рд░рддреЗ рд╣реБрдП рдЧрд╛ рд░рд╣реА рдереАред рдпрд╣ рдПрдХ рд╢реНрд░реГрдВрдЧрд╛рд░ рдЧреАрдд рдерд╛ред рдЙрд╕реЗ рдЬреНрдЮрд╛рдд рд╣реА рди рд╣реЛ рд╕рдХрд╛ рдХрд┐ рдХреЛрдИ рдЕрдЬрдирдмреА рдпреБрд╡рдХ рдЙрд╕реЗ рдирд┐рдГрд╢рдмреНрдж рддрд╛рдХреЗ рдЬрд╛ рд░рд╣рд╛ рд╣реИред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рддрдВрджреНрд░рд╛</div>
                    <div class="definition">рдПрдХрд╛рдЧреНрд░рддрд╛</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдЪреИрддрдиреНрдп</div>
                    <div class="definition">рд╕рдЬрдЧ</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рд╡рд┐рдХрд▓</div>
                    <div class="definition">рдмреЗрдЪреИрди/рд╡реНрдпрд╛рдХреБрд▓</div>
                </div>
                
                <p>рдПрдХрд╛рдПрдХ рдПрдХ рдКрдБрдЪреА рд▓рд╣рд░ рдЙрдареА рдФрд░ рдЙрд╕реЗ рднрд┐рдЧреЛ рдЧрдИред рд╡рд╣ рд╣рдбрд╝рдмрдбрд╝рд╛рд╣рдЯ рдореЗрдВ рдЧрд╛рдирд╛ рднреВрд▓ рдЧрдИред рдЗрд╕рдХреЗ рдкрд╣рд▓реЗ рдХрд┐ рд╡рд╣ рд╕рд╛рдорд╛рдиреНрдп рд╣реЛ рдкрд╛рддреА, рдЙрд╕рдиреЗ рдЕрдкрдиреЗ рдХрд╛рдиреЛрдВ рдореЗрдВ рдЧреВрдБрдЬрддреА рдЧрдВрднреАрд░ рдЖрдХрд░реНрд╖рдХ рдЖрд╡рд╛рдЬрд╝ рд╕реБрдиреАред "рддреБрдордиреЗ рдПрдХрд╛рдПрдХ рдЗрддрдирд╛ рдордзреБрд░ рдЧрд╛рдирд╛ рдЕрдзреВрд░рд╛ рдХреНрдпреЛрдВ рдЫреЛрдбрд╝ рджрд┐рдпрд╛?" рддрддрд╛рдБрд░рд╛ рдиреЗ рд╡рд┐рдирдореНрд░рддрд╛рдкреВрд░реНрд╡рдХ рдХрд╣рд╛ред рдЕрдкрдиреЗ рд╕рд╛рдордиреЗ рдПрдХ рд╕реБрдВрджрд░ рдпреБрд╡рдХ рдХреЛ рджреЗрдЦрдХрд░ рд╡рд╣ рд╡рд┐рд╕реНрдорд┐рдд рд╣реБрдИред рдЙрд╕рдХреЗ рднреАрддрд░ рдХрд┐рд╕реА рдХреЛрдорд▓ рднрд╛рд╡рдирд╛ рдХрд╛ <span class="highlight-vocab">рд╕рдВрдЪрд╛рд░<span class="vocab-tooltip">рдЙрддреНрдкрдиреНрди рд╣реЛрдирд╛ (рднрд╛рд╡рдирд╛ рдХрд╛)</span></span> рд╣реБрдЖред рдХрд┐рдВрддреБ рдЕрдкрдиреЗ рдХреЛ рд╕рдВрдпрддрдХрд░ рдЙрд╕рдиреЗ рдмреЗрд░реБрдЦреА рдХреЗ рд╕рд╛рде рдЬрд╡рд╛рдм рджрд┐рдпрд╛ред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рд╕рдВрдЪрд╛рд░</div>
                    <div class="definition">рдЙрддреНрдкрдиреНрди рд╣реЛрдирд╛ (рднрд╛рд╡рдирд╛ рдХрд╛)</div>
                </div>
                
                <p>"рдкрд╣рд▓реЗ рдмрддрд╛рдУ! рддреБрдо рдХреМрди рд╣реЛ, рдЗрд╕ рддрд░рд╣ рдореБрдЭреЗ рдШреВрд░рдиреЗ рдФрд░ рдЗрд╕ <span class="highlight-vocab">рдЕрд╕рдВрдЧрдд<span class="vocab-tooltip">рдЕрдиреБрдЪрд┐рдд</span></span> рдкреНрд░рд╢реНрди рдХрд╛ рдХрд╛рд░рдг? рдЕрдкрдиреЗ рдЧрд╛рдБрд╡ рдХреЗ рдЕрд▓рд╛рд╡рд╛ рдХрд┐рд╕реА рдФрд░ рдЧрд╛рдБрд╡ рдХреЗ рдпреБрд╡рдХ рдХреЗ рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдиреЗ рдХреЛ рдореИрдВ рдмрд╛рдзреНрдп рдирд╣реАрдВред рдпрд╣ рддреБрдо рднреА рдЬрд╛рдирддреЗ рд╣реЛ"ред рддрддрд╛рдБрд░рд╛ рдорд╛рдиреЛ рд╕реБрдз-рдмреБрдз рдЦреЛрдП рд╣реБрдП рдерд╛ред рдЬрд╡рд╛рдм рджреЗрдиреЗ рдХреЗ рд╕реНрдерд╛рди рдкрд░ рдЙрд╕рдиреЗ рдкреБрдирдГ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рджреЛрд╣рд░рд╛рдпрд╛ред "рддреБрдордиреЗ рдЧрд╛рдирд╛ рдХреНрдпреЛрдВ рд░реЛрдХ рджрд┐рдпрд╛? рдЧрд╛рдУ, рдЧреАрдд рдкреВрд░рд╛ рдХрд░реЛред рд╕рдЪрдореБрдЪ рддреБрдордиреЗ рдмрд╣реБрдд рд╕реБрд░реАрд▓рд╛ рдХрдВрда рдкрд╛рдпрд╛ рд╣реИ"ред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рдЕрд╕рдВрдЧрдд</div>
                    <div class="definition">рдЕрдиреБрдЪрд┐рдд</div>
                </div>
                
                <p>"рдпрд╣ рддреЛ рдореЗрд░реЗ рдкреНрд░рд╢реНрди рдХрд╛ рдЙрддреНрддрд░ рди рд╣реБрдЖ?" рдпреБрд╡рддреА рдиреЗ рдХрд╣рд╛ред "рд╕рдЪ рдмрддрд╛рдУ рддреБрдо рдХреМрди рд╣реЛ? рд▓рдкрд╛рддреА рдЧрд╛рдБрд╡ рдореЗрдВ рддреБрдореНрд╣реЗрдВ рдХрднреА рджреЗрдЦрд╛ рдирд╣реАрдВ"ред рддрддрд╛рдБрд░рд╛ рдорд╛рдиреЛ <span class="highlight-vocab">рд╕рдореНрдореЛрд╣рд┐рдд<span class="vocab-tooltip">рдореБрдЧреНрдз</span></span> рдерд╛ред рдЙрд╕рдХреЗ рдХрд╛рдиреЛрдВ рдореЗрдВ рдпреБрд╡рддреА рдХреА рдЖрд╡рд╛рдЬрд╝ рдареАрдХ рд╕реЗ рдкрд╣реБрдБрдЪ рди рд╕рдХреАред рдЙрд╕рдиреЗ рдкреБрдирдГ рд╡рд┐рдирдп рдХреА, "рддреБрдордиреЗ рдЧрд╛рдирд╛ рдХреНрдпреЛрдВ рд░реЛрдХ рджрд┐рдпрд╛? рдЧрд╛рдУ рди?" рдпреБрд╡рддреА <span class="highlight-vocab">рдЭреБрдВрдЭрд▓рд╛<span class="vocab-tooltip">рдЪрд┐рдврд╝рдирд╛</span></span> рдЙрдареАред рд╡рд╣ рдХреБрдЫ рдФрд░ рд╕реЛрдЪрдиреЗ рд▓рдЧреАред рдЕрдВрддрддрдГ рдЙрд╕рдиреЗ рдирд┐рд╢реНрдЪрдпрдкреВрд░реНрд╡рдХ рдПрдХ рдмрд╛рд░ рдкреБрдирдГ рд▓рдЧрднрдЧ рд╡рд┐рд░реЛрдз рдХрд░рддреЗ рд╣реБрдП рдХрдбрд╝реЗ рд╕реНрд╡рд░ рдореЗрдВ рдХрд╣рд╛ред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рд╕рдореНрдореЛрд╣рд┐рдд</div>
                    <div class="definition">рдореБрдЧреНрдз</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдЭреБрдВрдЭрд▓рд╛</div>
                    <div class="definition">рдЪрд┐рдврд╝рдирд╛</div>
                </div>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рддрддрд╛рдБрд░рд╛ рдХрд╛ рдорди рдХрд┐рд╕ рдЪреАрдЬрд╝ рд╕реЗ рдореЛрд╣рд┐рдд рд╣реБрдЖ?</div>
                <div class="comprehension-question">2. рдпреБрд╡рддреА рдиреЗ рддрддрд╛рдБрд░рд╛ рдХреЛ рдХреНрдпрд╛ рдЬрд╡рд╛рдм рджрд┐рдпрд╛?</div>
                <div class="comprehension-question">3. рдпреБрд╡рддреА рдХреМрди рд╕реЗ рдЧрд╛рдБрд╡ рд╕реЗ рдереА?</div>
                <div class="comprehension-question">4. рддрддрд╛рдБрд░рд╛ рдиреЗ рдпреБрд╡рддреА рд╕реЗ рдХреНрдпрд╛ рдЖрдЧреНрд░рд╣ рдХрд┐рдпрд╛?</div>
            </div>
        `
    },
    {
        title: "рднрд╛рдЧ 3",
        content: `
            <div class="story-text">
                <p>"рдвреАрдарддрд╛ рдХреА рд╣рдж рд╣реИред рдореИрдВ рдЬрдм рд╕реЗ рдкрд░рд┐рдЪрдп рдкреВрдЫ рд░рд╣реА рд╣реВрдБ рдФрд░ рддреБрдо рдмрд╕ рдПрдХ рд╣реА рд░рд╛рдЧ рдЕрд▓рд╛рдк рд░рд╣реЗ рд╣реЛред рдЧреАрдд рдЧрд╛рдУ-рдЧреАрдд рдЧрд╛рдУ, рдЖрдЦрд┐рд░ рдХреНрдпреЛрдВ? рдХреНрдпрд╛ рддреБрдореНрд╣реЗрдВ рдЧрд╛рдБрд╡ рдХрд╛ рдирд┐рдпрдо рдирд╣реАрдВ рдорд╛рд▓реВрдо?" рдЗрддрдирд╛ рдмреЛрд▓рдХрд░ рд╡рд╣ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рддреЗрдЬрд╝реА рд╕реЗ рдореБрдбрд╝реАред рддрддрд╛рдБрд░рд╛ рдХреЛ рдорд╛рдиреЛ рдХреБрдЫ рд╣реЛрд╢ рдЖрдпрд╛ред рдЙрд╕реЗ рдЕрдкрдиреА рдЧрд▓рддреА рдХрд╛ рдЕрд╣рд╕рд╛рд╕ рд╣реБрдЖред рд╡рд╣ рдЙрд╕рдХреЗ рд╕рд╛рдордиреЗ рд░рд╛рд╕реНрддрд╛ рд░реЛрдХрдХрд░, рдорд╛рдиреЛ рдЧрд┐рдбрд╝рдЧрд┐рдбрд╝рд╛рдиреЗ рд▓рдЧрд╛ред</p>
                
                <p>"рдореБрдЭреЗ рдорд╛рдлрд╝ рдХрд░ рджреЛред рдЬреАрд╡рди рдореЗрдВ рдкрд╣рд▓реА рдмрд╛рд░ рдореИрдВ рдЗрд╕ рддрд░рд╣ рд╡рд┐рдЪрд▓рд┐рдд рд╣реБрдЖ рд╣реВрдБред рддреБрдореНрд╣реЗрдВ рджреЗрдЦрдХрд░ рдореЗрд░реА рдЪреЗрддрдирд╛ рд▓реБрдкреНрдд рд╣реЛ рдЧрдИ рдереАред рдореИрдВ рддреБрдореНрд╣рд╛рд░рд╛ рд░рд╛рд╕реНрддрд╛ рдЫреЛрдбрд╝ рджреВрдВрдЧрд╛ред рдмрд╕ рдЕрдкрдирд╛ рдирд╛рдо рдмрддрд╛ рджреЛред" рддрддрд╛рдБрд░рд╛ рдиреЗ рд╡рд┐рд╡рд╢рддрд╛ рдореЗрдВ рдЖрдЧреНрд░рд╣ рдХрд┐рдпрд╛ред рдЙрд╕рдХреА рдЖрдБрдЦреЗрдВ рдпреБрд╡рддреА рдХреЗ рдЪреЗрд╣рд░реЗ рдкрд░ рдХреЗрдВрджреНрд░рд┐рдд рдереАрдВред рдЙрд╕рдХреЗ рдЪреЗрд╣рд░реЗ рдкрд░ рд╕рдЪреНрдЪреА рд╡рд┐рдирдп рдереАред</p>
                
                <p>"рд╡рд╛... рдореА... рд░реЛ..." рдПрдХ рд░рд╕ рдШреЛрд▓рддреА рдЖрд╡рд╛рдЬрд╝ рдЙрд╕рдХреЗ рдХрд╛рдиреЛрдВ рдореЗрдВ рдкрд╣реБрдБрдЪреАред</p>
                
                <p>"рд╡рд╛рдореАрд░реЛ... рд╡рд╛... рдореА... рд░реЛ... рд╡рд╛рд╣ рдХрд┐рддрдирд╛ рд╕реБрдВрджрд░ рдирд╛рдо рд╣реИред рдХрд▓ рднреА рдЖрдУрдЧреА рди рдпрд╣рд╛рдБ?" рддрддрд╛рдБрд░рд╛ рдиреЗ рдпрд╛рдЪрдирд╛ рднрд░реЗ рд╕реНрд╡рд░ рдореЗрдВ рдХрд╣рд╛ред</p>
                
                <p>"рдирд╣реАрдВ... рд╢рд╛рдпрдж... рдХрднреА рдирд╣реАрдВред" рд╡рд╛рдореАрд░реЛ рдиреЗ <span class="highlight-vocab">рдЕрдиреНрдпрдордирд╕реНрдХрддрд╛рдкреВрд░реНрд╡рдХ<span class="vocab-tooltip">рдЬрд┐рд╕рдХрд╛ рдЪрд┐рддреНрдд рдХрд╣реАрдВ рдФрд░ рд╣реЛ</span></span> рдХрд╣рд╛ рдФрд░ рдЭрдЯрдХреЗ рд╕реЗ рд▓рдкрд╛рддреА рдХреА рддрд░рдлрд╝ рдмреЗрд╕реБрдз рд╕реА рджреМрдбрд╝ рдкрдбрд╝реАред рдкреАрдЫреЗ рддрддрд╛рдБрд░рд╛ рдХреЗ рд╡рд╛рдХреНрдп рдЧреВрдВрдЬ рд░рд╣реЗ рдереЗред "рд╡рд╛рдореАрд░реЛ... рдореЗрд░рд╛ рдирд╛рдо рддрддрд╛рдБрд░рд╛ рд╣реИред рдХрд▓ рдореИрдВ рдЗрд╕реА рдЪрдЯреНрдЯрд╛рди рдкрд░ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реВрдБрдЧрд╛... рддреБрдореНрд╣рд╛рд░реА рдмрд╛рдЯ рдЬреЛрд╣реВрдБрдЧрд╛... рдЬрд╝рд░реВрд░ рдЖрдирд╛..." рд╡рд╛рдореАрд░реЛ рд░реБрдХреА рдирд╣реАрдВ, рднрд╛рдЧрддреА рд╣реА рдЧрдИред рддрддрд╛рдБрд░рд╛ рдЙрд╕реЗ рдЬрд╛рддреЗ рд╣реБрдП рдирд┐рд╣рд╛рд░рддрд╛ рд░рд╣рд╛ред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рдЕрдиреНрдпрдордирд╕реНрдХрддрд╛рдкреВрд░реНрд╡рдХ</div>
                    <div class="definition">рдЬрд┐рд╕рдХрд╛ рдЪрд┐рддреНрдд рдХрд╣реАрдВ рдФрд░ рд╣реЛ</div>
                </div>
                
                <p>рд╡рд╛рдореАрд░реЛ рдШрд░ рдкрд╣реБрдБрдЪрдХрд░ рднреАрддрд░ рд╣реА рднреАрддрд░ рдХреБрдЫ рдмреЗрдЪреИрдиреА рдорд╣рд╕реВрд╕ рдХрд░рдиреЗ рд▓рдЧреАред рдЙрд╕рдХреЗ рднреАрддрд░ рддрддрд╛рдБрд░рд╛ рд╕реЗ рдореБрдХреНрдд рд╣реЛрдиреЗ рдХреА рдПрдХ рдЭреВрдареА рдЫрдЯрдкрдЯрд╛рд╣рдЯ рдереАред рдПрдХ рдЭрд▓реНрд▓рд╛рд╣рдЯ рдореЗрдВ рдЙрд╕рдиреЗ рджрд░рд╡рд╛рдЬрд╝рд╛ рдмрдВрдж рдХрд┐рдпрд╛ рдФрд░ рдорди рдХреЛ рдХрд┐рд╕реА рдФрд░ рджрд┐рд╢рд╛ рдореЗрдВ рд▓реЗ рдЬрд╛рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд┐рдпрд╛ред рдмрд╛рд░-рдмрд╛рд░ рддрддрд╛рдБрд░рд╛ рдХрд╛ рдпрд╛рдЪрдирд╛ рднрд░рд╛ рдЪреЗрд╣рд░рд╛ рдЙрд╕рдХреА рдЖрдБрдЦреЛрдВ рдореЗрдВ рддреИрд░ рдЬрд╛рддрд╛ред рдЙрд╕рдиреЗ рддрддрд╛рдБрд░рд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХрдИ рдХрд╣рд╛рдирд┐рдпрд╛рдБ рд╕реБрди рд░рдЦреА рдереАрдВред рдЙрд╕рдХреА рдХрд▓реНрдкрдирд╛ рдореЗрдВ рд╡рд╣ рдПрдХ рдЕрджреНрднреБрдд рд╕рд╛рд╣рд╕реА рдпреБрд╡рдХ рдерд╛ред рдХрд┐рдВрддреБ рд╡рд╣реА рддрддрд╛рдБрд░рд╛ рдЙрд╕рдХреЗ рд╕рдореНрдореБрдЦ рдПрдХ рдЕрд▓рдЧ рд░реВрдк рдореЗрдВ рдЖрдпрд╛ред рд╕реБрдВрджрд░, рдмрд▓рд┐рд╖реНрда рдХрд┐рдВрддреБ рдмреЗрд╣рдж рд╢рд╛рдВрдд, рд╕рднреНрдп рдФрд░ рднреЛрд▓рд╛ред рдЙрд╕рдХрд╛ рд╡реНрдпрдХреНрддрд┐рддреНрд╡ рдХрджрд╛рдЪрд┐рдд рд╡реИрд╕рд╛ рд╣реА рдерд╛ рдЬреИрд╕рд╛ рд╡рд╣ рдЕрдкрдиреЗ рдЬреАрд╡рди-рд╕рд╛рдереА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реЛрдЪрддреА рд░рд╣реА рдереАред</p>
                
                <p>рдХрд┐рдВрддреБ рдПрдХ рджреВрд╕рд░реЗ рдЧрд╛рдБрд╡ рдХреЗ рдпреБрд╡рдХ рдХреЗ рд╕рд╛рде рдпрд╣ рд╕рдВрдмрдВрдз рдкрд░рдВрдкрд░рд╛ рдХреЗ рд╡рд┐рд░реБрджреНрдз рдерд╛ред рдЕрддрдПрд╡ рдЙрд╕рдиреЗ рдЙрд╕реЗ рднреВрд▓ рдЬрд╛рдирд╛ рд╣реА рд╢реНрд░реЗрдпрд╕реНрдХрд░ рд╕рдордЭрд╛ред рдХрд┐рдВрддреБ рдпрд╣ рдЕрд╕рдВрднрд╡ рдЬрд╛рди рдкрдбрд╝рд╛ред рддрддрд╛рдБрд░рд╛ рдмрд╛рд░-рдмрд╛рд░ рдЙрд╕рдХреА рдЖрдБрдЦреЛрдВ рдХреЗ рд╕рд╛рдордиреЗ рдерд╛ред <span class="highlight-vocab">рдирд┐рд░реНрдирд┐рдореЗрд╖<span class="vocab-tooltip">рдмрд┐рдирд╛ рдкрд▓рдХ рдЭрдкрдХрд╛рдП</span></span> рдпрд╛рдЪрдХ рдХреА рддрд░рд╣ рдкреНрд░рддреАрдХреНрд╖рд╛ рдореЗрдВ рдбреВрдмрд╛ рд╣реБрдЖред рдХрд┐рд╕реА рддрд░рд╣ рд░рд╛рдд рдмреАрддреАред рджреЛрдиреЛрдВ рдХреЗ рд╣реГрджрдп рд╡реНрдпрдерд┐рдд рдереЗред рдХрд┐рд╕реА рддрд░рд╣ рдЖрдБрдЪрд░рд╣рд┐рдд рдПрдХ рдардВрдбрд╛ рдФрд░ рдКрдмрд╛рдК рджрд┐рди рдЧреБрдЬрд╝рд░рдиреЗ рд▓рдЧрд╛ред рд╢рд╛рдо рдХреА рдкреНрд░рддреАрдХреНрд╖рд╛ рдереАред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рдирд┐рд░реНрдирд┐рдореЗрд╖</div>
                    <div class="definition">рдмрд┐рдирд╛ рдкрд▓рдХ рдЭрдкрдХрд╛рдП</div>
                </div>
                
                <p>рддрддрд╛рдБрд░рд╛ рдХреЗ рд▓рд┐рдП рдорд╛рдиреЛ рдкреВрд░реЗ рдЬреАрд╡рди рдХреА рдЕрдХреЗрд▓реА рдкреНрд░рддреАрдХреНрд╖рд╛ рдереАред рдЙрд╕рдХреЗ рдЧрдВрднреАрд░ рдФрд░ рд╢рд╛рдВрдд рдЬреАрд╡рди рдореЗрдВ рдРрд╕рд╛ рдкрд╣рд▓реА рдмрд╛рд░ рд╣реБрдЖ рдерд╛ред рд╡рд╣ <span class="highlight-vocab">рдЕрдЪрдВрднрд┐рдд<span class="vocab-tooltip">рдЪрдХрд┐рдд</span></span> рдерд╛, рд╕рд╛рде рд╣реА <span class="highlight-vocab">рд░реЛрдорд╛рдВрдЪрд┐рдд<span class="vocab-tooltip">рдкреБрд▓рдХрд┐рдд</span></span> рднреАред рджрд┐рди рдврд▓рдиреЗ рдХреЗ рдХрд╛рдлрд╝реА рдкрд╣рд▓реЗ рд╡рд╣ рд▓рдкрд╛рддреА рдХреА рдЙрд╕ рд╕рдореБрджреНрд░реА рдЪрдЯреНрдЯрд╛рди рдкрд░ рдкрд╣реБрдБрдЪ рдЧрдпрд╛ред рд╡рд╛рдореАрд░реЛ рдХреА рдкреНрд░рддреАрдХреНрд╖рд╛ рдореЗрдВ рдПрдХ-рдПрдХ рдкрд▓ рдкрд╣рд╛рдбрд╝ рдХреА рддрд░рд╣ рднрд╛рд░реА рдерд╛ред рдЙрд╕рдХреЗ рднреАрддрд░ рдПрдХ <span class="highlight-vocab">рдЖрд╢рдВрдХрд╛<span class="vocab-tooltip">рдбрд░</span></span> рднреА рджреМрдбрд╝ рд░рд╣реА рдереАред рдЕрдЧрд░ рд╡рд╛рдореАрд░реЛ рди рдЖрдИ рддреЛ? рд╡рд╣ рдХреБрдЫ рдирд┐рд░реНрдгрдп рдирд╣реАрдВ рдХрд░ рдкрд╛ рд░рд╣рд╛ рдерд╛ред рд╕рд┐рд░реНрдлрд╝ рдкреНрд░рддреАрдХреНрд╖рд╛рд░рдд рдерд╛ред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рдЕрдЪрдВрднрд┐рдд</div>
                    <div class="definition">рдЪрдХрд┐рдд</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рд░реЛрдорд╛рдВрдЪрд┐рдд</div>
                    <div class="definition">рдкреБрд▓рдХрд┐рдд</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдЖрд╢рдВрдХрд╛</div>
                    <div class="definition">рдбрд░</div>
                </div>
                
                <p>рдмрд╕ рдЖрд╕ рдХреА рдПрдХ рдХрд┐рд░рдг рдереА рдЬреЛ рд╕рдореБрджреНрд░ рдХреА рджреЗрд╣ рдкрд░ рдбреВрдмрддреА рдХрд┐рд░рдгреЛрдВ рдХреА рддрд░рд╣ рдХрднреА рднреА рдбреВрдм рд╕рдХрддреА рдереАред рд╡рд╣ рдмрд╛рд░-рдмрд╛рд░ рд▓рдкрд╛рддреА рдХреЗ рд░рд╛рд╕реНрддреЗ рдкрд░ рдирдЬрд╝рд░реЗрдВ рджреМрдбрд╝рд╛рддрд╛ред рд╕рд╣рд╕рд╛ рдирд╛рд░рд┐рдпрд▓ рдХреЗ рдЭреБрд░рдореБрдЯреЛрдВ рдореЗрдВ рдЙрд╕реЗ рдПрдХ рдЖрдХреГрддрд┐ рдХреБрдЫ рд╕рд╛рдлрд╝ рд╣реБрдИ... рдХреБрдЫ рдФрд░... рдХреБрдЫ рдФрд░ред рдЙрд╕рдХреА рдЦреБрд╢реА рдХрд╛ рдард┐рдХрд╛рдирд╛ рди рд░рд╣рд╛ред рд╕рдЪрдореБрдЪ рд╡рд╣ рд╡рд╛рдореАрд░реЛ рдереАред рд▓рдЧрд╛ рдЬреИрд╕реЗ рд╡рд╣ рдШрдмрд░рд╛рд╣рдЯ рдореЗрдВ рдереАред рд╡рд╣ рдЕрдкрдиреЗ рдХреЛ рдЫреБрдкрд╛рддреЗ рд╣реБрдП рдмрдврд╝ рд░рд╣реА рдереАред рдмреАрдЪ-рдмреАрдЪ рдореЗрдВ рдЗрдзрд░-рдЙрдзрд░ рджреГрд╖реНрдЯрд┐ рджреМрдбрд╝рд╛рдирд╛ рди рднреВрд▓рддреАред рдлрд┐рд░ рддреЗрдЬрд╝ рдХрджрдореЛрдВ рд╕реЗ рдЪрд▓рддреА рд╣реБрдИ рддрддрд╛рдБрд░рд╛ рдХреЗ рд╕рд╛рдордиреЗ рдЖрдХрд░ рдард┐рдардХ рдЧрдИред</p>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рд╡рд╛рдореАрд░реЛ рдХрд╛ рдирд╛рдо рдЬрд╛рдирдиреЗ рдХреЗ рдмрд╛рдж рддрддрд╛рдБрд░рд╛ рдиреЗ рдХреНрдпрд╛ рдХрд╣рд╛?</div>
                <div class="comprehension-question">2. рд╡рд╛рдореАрд░реЛ рдХреЛ рддрддрд╛рдБрд░рд╛ рдХрд╛ рд╡реНрдпрдХреНрддрд┐рддреНрд╡ рдХреИрд╕рд╛ рд▓рдЧрд╛?</div>
                <div class="comprehension-question">3. рдкрд░рдВрдкрд░рд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рддрддрд╛рдБрд░рд╛ рдФрд░ рд╡рд╛рдореАрд░реЛ рдХрд╛ рд╕рдВрдмрдВрдз рдХреНрдпреЛрдВ рд╕рдВрднрд╡ рдирд╣реАрдВ рдерд╛?</div>
                <div class="comprehension-question">4. рддрддрд╛рдБрд░рд╛ рдФрд░ рд╡рд╛рдореАрд░реЛ рдХреА рдХрд╣рд╛рдиреА рд╕реЗ рдХреНрдпрд╛ рд╕реАрдЦ рдорд┐рд▓рддреА рд╣реИ?</div>
            </div>
        `
    },
    {
        title: "рднрд╛рдЧ 4",
        content: `
            <div class="story-text">
                <p>рджреЛрдиреЛрдВ рд╢рдмреНрджрд╣реАрди рдереЗред рдХреБрдЫ рдерд╛ рдЬреЛ рджреЛрдиреЛрдВ рдХреЗ рднреАрддрд░ рдмрд╣ рд░рд╣рд╛ рдерд╛ред рдПрдХрдЯрдХ рдирд┐рд╣рд╛рд░рддреЗ рд╣реБрдП рд╡реЗ рдЬрд╛рдиреЗ рдХрдм рддрдХ рдЦрдбрд╝реЗ рд░рд╣реЗред рд╕реВрд░рдЬ рд╕рдореБрджреНрд░ рдХреА рд▓рд╣рд░реЛрдВ рдореЗрдВ рдХрд╣реАрдВ рдЦреЛ рдЧрдпрд╛ рдерд╛ред рдЕрдБрдзреЗрд░рд╛ рдмрдврд╝ рд░рд╣рд╛ рдерд╛ред рдЕрдЪрд╛рдирдХ рд╡рд╛рдореАрд░реЛ рдХреБрдЫ рд╕рдЪреЗрдд рд╣реБрдИ рдФрд░ рдШрд░ рдХреА рддрд░рдлрд╝ рджреМрдбрд╝ рдкрдбрд╝реАред рддрддрд╛рдБрд░рд╛ рдЕрдм рднреА рд╡рд╣реАрдВ рдЦрдбрд╝рд╛ рдерд╛... <span class="highlight-vocab">рдирд┐рд╢реНрдЪрд▓<span class="vocab-tooltip">рд╕реНрдерд┐рд░</span></span>... рд╢рдмреНрджрд╣реАрди... ред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рдирд┐рд╢реНрдЪрд▓</div>
                    <div class="definition">рд╕реНрдерд┐рд░</div>
                </div>
                
                <p>рджреЛрдиреЛрдВ рд░реЛрдЬрд╝ рдЙрд╕реА рдЬрдЧрд╣ рдкрд╣реБрдБрдЪрддреЗ рдФрд░ рдореВрд░реНрддрд┐рд╡рдд рдПрдХ-рджреВрд╕рд░реЗ рдХреЛ <span class="highlight-vocab">рдирд┐рд░реНрдирд┐рдореЗрд╖<span class="vocab-tooltip">рдмрд┐рдирд╛ рдкрд▓рдХ рдЭрдкрдХрд╛рдП</span></span> рддрд╛рдХрддреЗ рд░рд╣рддреЗред рдмрд╕ рднреАрддрд░ рд╕рдорд░реНрдкрдг рдерд╛ рдЬреЛ рдЕрдирд╡рд░рдд рдЧрд╣рд░рд╛ рд░рд╣рд╛ рдерд╛ред рд▓рдкрд╛рддреА рдХреЗ рдХреБрдЫ рдпреБрд╡рдХреЛрдВ рдиреЗ рдЗрд╕ рдореВрдХ рдкреНрд░реЗрдо рдХреЛ рднрд╛рдБрдк рд▓рд┐рдпрд╛ рдФрд░ рдЦрдмрд░ рд╣рд╡рд╛ рдХреА рддрд░рд╣ рдмрд╣ рдЙрдареАред</p>
                
                <p>рд╡рд╛рдореАрд░реЛ рд▓рдкрд╛рддреА рдЧреНрд░рд╛рдо рдХреА рдереА рдФрд░ рддрддрд╛рдБрд░рд╛ рдкрд╛рд╕рд╛ рдХрд╛ред рджреЛрдиреЛрдВ рдХрд╛ рд╕рдВрдмрдВрдз рд╕рдВрднрд╡ рди рдерд╛ред рд░реАрддрд┐ рдЕрдиреБрд╕рд╛рд░ рджреЛрдиреЛрдВ рдХреЛ рдПрдХ рд╣реА рдЧрд╛рдБрд╡ рдХрд╛ рд╣реЛрдирд╛ рдЖрд╡рд╢реНрдпрдХ рдерд╛ред рд╡рд╛рдореАрд░реЛ рдФрд░ рддрддрд╛рдБрд░рд╛ рдХреЛ рд╕рдордЭрд╛рдиреЗ-рдмреБрдЭрд╛рдиреЗ рдХреЗ рдХрдИ рдкреНрд░рдпрд╛рд╕ рд╣реБрдП рдХрд┐рдВрддреБ рджреЛрдиреЛрдВ рдЕрдбрд┐рдЧ рд░рд╣реЗред рд╡реЗ рдирд┐рдпрдорддрдГ рд▓рдкрд╛рддреА рдХреЗ рдЙрд╕реА рд╕рдореБрджреНрд░реА рдХрд┐рдирд╛рд░реЗ рдкрд░ рдорд┐рд▓рддреЗ рд░рд╣реЗред <span class="highlight-vocab">рдЕрдлрд╝рд╡рд╛рд╣реЗрдВ<span class="vocab-tooltip">рдЙрдбрд╝рддреА рдЦрд╝рдмрд░</span></span> рдлреИрд▓рддреА рд░рд╣реАрдВред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рдЕрдлрд╝рд╡рд╛рд╣реЗрдВ</div>
                    <div class="definition">рдЙрдбрд╝рддреА рдЦрд╝рдмрд░</div>
                </div>
                
                <p>рдХреБрдЫ рд╕рдордп рдмрд╛рдж рдкрд╛рд╕рд╛ рдЧрд╛рдБрд╡ рдореЗрдВ 'рдкрд╢реБ-рдкрд░реНрд╡' рдХрд╛ рдЖрдпреЛрдЬрди рд╣реБрдЖред рдкрд╢реБ-рдкрд░реНрд╡ рдореЗрдВ рд╣реГрд╖реНрдЯ-рдкреБрд╖реНрдЯ рдкрд╢реБрдУрдВ рдХреЗ рдкреНрд░рджрд░реНрд╢рди рдХреЗ рдЕрддрд┐рд░рд┐рдХреНрдд рдкрд╢реБрдУрдВ рд╕реЗ рдпреБрд╡рдХреЛрдВ рдХреА рд╢рдХреНрддрд┐ рдкрд░реАрдХреНрд╖рд╛ рдкреНрд░рддрд┐рдпреЛрдЧрд┐рддрд╛ рднреА рд╣реЛрддреА рд╣реИред рд╡рд░реНрд╖ рдореЗрдВ рдПрдХ рдмрд╛рд░ рд╕рднреА рдЧрд╛рдБрд╡ рдХреЗ рд▓реЛрдЧ рд╣рд┐рд╕реНрд╕рд╛ рд▓реЗрддреЗ рд╣реИрдВред рдмрд╛рдж рдореЗрдВ рдиреГрддреНрдп-рд╕рдВрдЧреАрдд рдФрд░ рднреЛрдЬрди рдХрд╛ рднреА рдЖрдпреЛрдЬрди рд╣реЛрддрд╛ рд╣реИред рд╢рд╛рдо рд╕реЗ рд╕рднреА рд▓реЛрдЧ рдкрд╛рд╕рд╛ рдореЗрдВ рдПрдХрддреНрд░рд┐рдд рд╣реЛрдиреЗ рд▓рдЧреЗред рдзреАрд░реЗ-рдзреАрд░реЗ рд╡рд┐рднрд┐рдиреНрди рдХрд╛рд░реНрдпрдХреНрд░рдо рд╢реБрд░реВ рд╣реБрдПред рддрддрд╛рдБрд░рд╛ рдХрд╛ рдорди рдЗрди рдХрд╛рд░реНрдпрдХреНрд░рдореЛрдВ рдореЗрдВ рддрдирд┐рдХ рди рдерд╛ред рдЙрд╕рдХреА рд╡реНрдпрд╛рдХреБрд▓ рдЖрдБрдЦреЗрдВ рд╡рд╛рдореАрд░реЛ рдХреЛ рдвреВрдБрдврд╝рдиреЗ рдореЗрдВ рд╡реНрдпрд╕реНрдд рдереАрдВред</p>
                
                <p>рдирд╛рд░рд┐рдпрд▓ рдХреЗ рдЭреБрдВрдб рдХреЗ рдПрдХ рдкреЗрдбрд╝ рдХреЗ рдкреАрдЫреЗ рд╕реЗ рдЙрд╕реЗ рдЬреИрд╕реЗ рдХреЛрдИ рдЭрд╛рдБрдХрддрд╛ рджрд┐рдЦрд╛ред рдЙрд╕рдиреЗ рдереЛрдбрд╝рд╛ рдФрд░ рдХрд░реАрдм рдЬрд╛рдХрд░ рдкрд╣рдЪрд╛рдирдиреЗ рдХреА рдЪреЗрд╖реНрдЯрд╛ рдХреАред рд╡рд╣ рд╡рд╛рдореАрд░реЛ рдереА рдЬреЛ рднрдпрд╡рд╢ рд╕рд╛рдордиреЗ рдЖрдиреЗ рдореЗрдВ рдЭрд┐рдЭрдХ рд░рд╣реА рдереАред рдЙрд╕рдХреА рдЖрдБрдЦреЗрдВ рддрд░рд▓ рдереАрдВред рд╣реЛрдВрда рдХрд╛рдБрдк рд░рд╣реЗ рдереЗред рддрддрд╛рдБрд░рд╛ рдХреЛ рджреЗрдЦрддреЗ рд╣реА рд╡рд╣ рдлреВрдЯрдХрд░ рд░реЛрдиреЗ рд▓рдЧреАред рддрддрд╛рдБрд░рд╛ <span class="highlight-vocab">рд╡рд┐рд╣реНрд╡рд▓<span class="vocab-tooltip">рдмреЗрдЪреИрди</span></span> рд╣реБрдЖред рдЙрд╕рд╕реЗ рдХреБрдЫ рдмреЛрд▓рддреЗ рд╣реА рдирд╣реАрдВ рдмрди рд░рд╣рд╛ рдерд╛ред рд░реЛрдиреЗ рдХреА рдЖрд╡рд╛рдЬрд╝ рд▓рдЧрд╛рддрд╛рд░ рдКрдБрдЪреА рд╣реЛрддреА рдЬрд╛ рд░рд╣реА рдереАред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рд╡рд┐рд╣реНрд╡рд▓</div>
                    <div class="definition">рдмреЗрдЪреИрди</div>
                </div>
                
                <p>рддрддрд╛рдБрд░рд╛ <span class="highlight-vocab">рдХрд┐рдВрдХрд░реНрддрд╡реНрдпрд╡рд┐рдореВрдврд╝<span class="vocab-tooltip">рдХрд░реНрддрд╡реНрдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рднреНрд░рдорд┐рдд</span></span> рдерд╛ред рд╡рд╛рдореАрд░реЛ рдХреЗ рд░реБрджрди рд╕реНрд╡рд░реЛрдВ рдХреЛ рд╕реБрдирдХрд░ рдЙрд╕рдХреА рдорд╛рдБ рд╡рд╣рд╛рдБ рдкрд╣реБрдБрдЪреА рдФрд░ рджреЛрдиреЛрдВ рдХреЛ рджреЗрдЦрдХрд░ рдЖрдЧ рдмрдмреВрд▓рд╛ рд╣реЛ рдЙрдареАред рд╕рд╛рд░реЗ рдЧрд╛рдБрд╡рд╡рд╛рд▓реЛрдВ рдХреА рдЙрдкрд╕реНрдерд┐рддрд┐ рдореЗрдВ рдпрд╣ рджреГрд╢реНрдп рдЙрд╕реЗ рдЕрдкрдорд╛рдирдЬрдирдХ рд▓рдЧрд╛ред рдЗрд╕ рдмреАрдЪ рдЧрд╛рдБрд╡ рдХреЗ рдХреБрдЫ рд▓реЛрдЧ рднреА рд╡рд╣рд╛рдБ рдкрд╣реБрдБрдЪ рдЧрдПред рд╡рд╛рдореАрд░реЛ рдХреА рдорд╛рдБ рдХреНрд░реЛрдз рдореЗрдВ <span class="highlight-vocab">рдЙрдлрди<span class="vocab-tooltip">рдЙрдмрд▓рдирд╛</span></span> рдЙрдареАред рдЙрд╕рдиреЗ рддрддрд╛рдБрд░рд╛ рдХреЛ рддрд░рд╣-рддрд░рд╣ рд╕реЗ рдЕрдкрдорд╛рдирд┐рдд рдХрд┐рдпрд╛ред рдЧрд╛рдБрд╡ рдХреЗ рд▓реЛрдЧ рднреА рддрддрд╛рдБрд░рд╛ рдХреЗ рд╡рд┐рд░реЛрдз рдореЗрдВ рдЖрд╡рд╛рдЬрд╝реЗрдВ рдЙрдард╛рдиреЗ рд▓рдЧреЗред рдпрд╣ рддрддрд╛рдБрд░рд╛ рдХреЗ рд▓рд┐рдП рдЕрд╕рд╣рдиреАрдп рдерд╛ред рд╡рд╛рдореАрд░реЛ рдЕрдм рднреА рд░реЛрдП рдЬрд╛ рд░рд╣реА рдереАред рддрддрд╛рдБрд░рд╛ рднреА рдЧреБрд╕реНрд╕реЗ рд╕реЗ рднрд░ рдЙрдард╛ред рдЙрд╕реЗ рдЬрд╣рд╛рдБ рд╡рд┐рд╡рд╛рд╣ рдХреА <span class="highlight-vocab">рдирд┐рд╖реЗрдз рдкрд░рдВрдкрд░рд╛<span class="vocab-tooltip">рд╡рд╣ рдкрд░рдВрдкрд░рд╛ рдЬрд┐рд╕ рдкрд░ рд░реЛрдХ рд▓рдЧреА рд╣реЛ</span></span> рдкрд░ рдХреНрд╖реЛрдн рдерд╛ рд╡рд╣реАрдВ рдЕрдкрдиреА рдЕрд╕рд╣рд╛рдпрддрд╛ рдкрд░ рдЦреАрдЭред рд╡рд╛рдореАрд░реЛ рдХрд╛ рджреБрдЦ рдЙрд╕реЗ рдФрд░ рдЧрд╣рд░рд╛ рдХрд░ рд░рд╣рд╛ рдерд╛ред рдЙрд╕реЗ рдорд╛рд▓реВрдо рди рдерд╛ рдХрд┐ рдХреНрдпрд╛ рдХрджрдо рдЙрдард╛рдирд╛ рдЪрд╛рд╣рд┐рдП?</p>
                
                <div class="vocabulary-note">
                    <div class="word">рдХрд┐рдВрдХрд░реНрддрд╡реНрдпрд╡рд┐рдореВрдврд╝</div>
                    <div class="definition">рдХрд░реНрддрд╡реНрдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рднреНрд░рдорд┐рдд</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдЙрдлрди</div>
                    <div class="definition">рдЙрдмрд▓рдирд╛</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдирд┐рд╖реЗрдз рдкрд░рдВрдкрд░рд╛</div>
                    <div class="definition">рд╡рд╣ рдкрд░рдВрдкрд░рд╛ рдЬрд┐рд╕ рдкрд░ рд░реЛрдХ рд▓рдЧреА рд╣реЛ</div>
                </div>
                
                <p>рдЕрдирд╛рдпрд╛рд╕ рдЙрд╕рдХрд╛ рд╣рд╛рде рддрд▓рд╡рд╛рд░ рдХреА рдореВрда рдкрд░ рдЬрд╛ рдЯрд┐рдХрд╛ред рдХреНрд░реЛрдз рдореЗрдВ рдЙрд╕рдиреЗ рддрд▓рд╡рд╛рд░ рдирд┐рдХрд╛рд▓реА рдФрд░ рдХреБрдЫ рд╡рд┐рдЪрд╛рд░ рдХрд░рддрд╛ рд░рд╣рд╛ред рдХреНрд░реЛрдз рд▓рдЧрд╛рддрд╛рд░ рдЕрдЧреНрдирд┐ рдХреА рддрд░рд╣ рдмрдврд╝ рд░рд╣рд╛ рдерд╛ред рд▓реЛрдЧ рд╕рд╣рдо рдЙрдареЗред рдПрдХ рд╕рдиреНрдирд╛рдЯрд╛-рд╕рд╛ рдЦрд┐рдВрдЪ рдЧрдпрд╛ред рдЬрдм рдХреЛрдИ рд░рд╛рд╣ рди рд╕реВрдЭреА рддреЛ рдХреНрд░реЛрдз рдХрд╛ <span class="highlight-vocab">рд╢рдорди<span class="vocab-tooltip">рд╢рд╛рдВрдд рдХрд░рдирд╛</span></span> рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрд╕рдореЗрдВ рд╢рдХреНрддрд┐ рднрд░ рдЙрд╕реЗ рдзрд░рддреА рдореЗрдВ <span class="highlight-vocab">рдШреЛрдВрдк<span class="vocab-tooltip">рднреЛрдВрдХрдирд╛</span></span> рджрд┐рдпрд╛ рдФрд░ рддрд╛рдХрдд рд╕реЗ рдЙрд╕реЗ рдЦреАрдВрдЪрдиреЗ рд▓рдЧрд╛ред рд╡рд╣ рдкрд╕реАрдиреЗ рд╕реЗ рдирд╣рд╛ рдЙрдард╛ред рд╕рдм рдШрдмрд░рд╛рдП рд╣реБрдП рдереЗред рд╡рд╣ рддрд▓рд╡рд╛рд░ рдХреЛ рдЕрдкрдиреА рддрд░рдлрд╝ рдЦреАрдВрдЪрддреЗ рдЦреАрдВрдЪрддреЗ рджреВрд░ рддрдХ рдкрд╣реБрдБрдЪ рдЧрдпрд╛ред рд╡рд╣ рд╣рд╛рдБрдл рд░рд╣рд╛ рдерд╛ред рдЕрдЪрд╛рдирдХ рдЬрд╣рд╛рдБ рддрдХ рд▓рдХреАрд░ рдЦрд┐рдВрдЪ рдЧрдИ рдереА, рд╡рд╣рд╛рдБ рдПрдХ <span class="highlight-vocab">рджрд░рд╛рд░<span class="vocab-tooltip">рд░реЗрдЦрд╛ рдХреА рддрд░рд╣ рдХрд╛ рд▓рдВрдмрд╛ рдЫрд┐рджреНрд░ рдЬреЛ рдлрдЯрдиреЗ рдХреЗ рдХрд╛рд░рдг рдкрдбрд╝ рдЬрд╛рддрд╛ рд╣реИ</span></span> рд╣реЛрдиреЗ рд▓рдЧреАред рдорд╛рдиреЛ рдзрд░рддреА рджреЛ рдЯреБрдХрдбрд╝реЛрдВ рдореЗрдВ рдмрдБрдЯрдиреЗ рд▓рдЧреА рд╣реЛред рдПрдХ рдЧрдбрд╝рдЧрдбрд╝рд╛рд╣рдЯ-рд╕реА рдЧреВрдВрдЬрдиреЗ рд▓рдЧреА рдФрд░ рд▓рдХреАрд░ рдХреА рд╕реАрдз рдореЗрдВ рдзрд░рддреА рдлрдЯрддреА рд╣реА рдЬрд╛ рд░рд╣реА рдереАред рджреНрд╡реАрдк рдХреЗ рдЕрдВрддрд┐рдо рд╕рд┐рд░реЗ рддрдХ рддрддрд╛рдБрд░рд╛ рдзрд░рддреА рдХреЛ рдорд╛рдиреЛ рдХреНрд░реЛрдз рдореЗрдВ рдХрд╛рдЯрддрд╛ рдЬрд╛ рд░рд╣рд╛ рдерд╛ред рд╕рднреА <span class="highlight-vocab">рднрдпрд╛рдХреБрд▓<span class="vocab-tooltip">рдбрд░рд╛ рд╣реБрдЖ</span></span> рд╣реЛ рдЙрдареЗред рд▓реЛрдЧреЛрдВ рдиреЗ рдРрд╕реЗ рджреГрд╢реНрдп рдХреА рдХрд▓реНрдкрдирд╛ рди рдХреА рдереА, рд╡реЗ рд╕рд┐рд╣рд░ рдЙрдареЗред рдЙрдзрд░ рд╡рд╛рдореАрд░реЛ рдлрдЯрддреА рд╣реБрдИ рдзрд░рддреА рдХреЗ рдХрд┐рдирд╛рд░реЗ рдЪреАрдЦрддреА рд╣реБрдИ рджреМрдбрд╝ рд░рд╣реА рдереА-рддрддрд╛рдБрд░рд╛... рддрддрд╛рдБрд░рд╛... рддрддрд╛рдБрд░рд╛ред рдЙрд╕рдХреА рдХрд░реБрдг рдЪреАрдЦ рдорд╛рдиреЛ рдЧрдбрд╝рдЧрдбрд╝рд╛рд╣рдЯ рдореЗрдВ рдбреВрдм рдЧрдИред рддрддрд╛рдБрд░рд╛ рджреБрд░реНрднрд╛рдЧреНрдпрд╡рд╢ рджреВрд╕рд░реА рддрд░рдлрд╝ рдерд╛ред рджреНрд╡реАрдк рдХреЗ рдЕрдВрддрд┐рдо рд╕рд┐рд░реЗ рддрдХ рдзрд░рддреА рдХреЛ рдЪрд╛рдХрддрд╛ рд╡рд╣ рдЬреИрд╕реЗ рд╣реА рдЕрдВрддрд┐рдо рдЫреЛрд░ рдкрд░ рдкрд╣реБрдБрдЪрд╛, рджреНрд╡реАрдк рджреЛ рдЯреБрдХрдбрд╝реЛрдВ рдореЗрдВ рд╡рд┐рднрдХреНрдд рд╣реЛ рдЪреБрдХрд╛ рдерд╛ред рдПрдХ рддрд░рдлрд╝ рддрддрд╛рдБрд░рд╛ рдерд╛ рджреВрд╕рд░реА рддрд░рдлрд╝ рд╡рд╛рдореАрд░реЛред рддрддрд╛рдБрд░рд╛ рдХреЛ рдЬреИрд╕реЗ рд╣реА рд╣реЛрд╢ рдЖрдпрд╛, рдЙрд╕рдиреЗ рджреЗрдЦрд╛ рдЙрд╕рдХреА рддрд░рдлрд╝ рдХрд╛ рджреНрд╡реАрдк рд╕рдореБрджреНрд░ рдореЗрдВ рдзрдБрд╕рдиреЗ рд▓рдЧрд╛ рд╣реИред рд╡рд╣ рдЫрдЯрдкрдЯрд╛рдиреЗ рд▓рдЧрд╛ред рдЙрд╕рдиреЗ рдЫрд▓рд╛рдБрдЧ рд▓рдЧрд╛рдХрд░ рджреВрд╕рд░рд╛ рд╕рд┐рд░рд╛ рдерд╛рдордирд╛ рдЪрд╛рд╣рд╛ рдХрд┐рдВрддреБ рдкрдХрдбрд╝ рдвреАрд▓реА рдкрдбрд╝ рдЧрдИред рд╡рд╣ рдиреАрдЪреЗ рдХреА рддрд░рдлрд╝ рдлрд┐рд╕рд▓рдиреЗ рд▓рдЧрд╛ред рд╡рд╣ рд▓рдЧрд╛рддрд╛рд░ рд╕рдореБрджреНрд░ рдХреА рд╕рддрд╣ рдХреА рддрд░рдлрд╝ рдлрд┐рд╕рд▓ рд░рд╣рд╛ рдерд╛ред рдЙрд╕рдХреЗ рдореБрдБрд╣ рд╕реЗ рд╕рд┐рд░реНрдлрд╝ рдПрдХ рд╣реА рдЪреАрдЦ рдЙрднрд░рдХрд░ рдбреВрдм рд░рд╣реА рдереА, "рд╡рд╛рдореАрд░реЛ... рд╡рд╛рдореАрд░реЛ... рд╡рд╛рдореАрд░реЛ... рд╡рд╛рдореАрд░реЛ..." ред рдЙрдзрд░ рд╡рд╛рдореАрд░реЛ рднреА "рддрддрд╛рдБрд░рд╛... рддрддрд╛рдБрд░рд╛... рддрд╛... рддрд╛рдБ... рд░рд╛" рдкреБрдХрд╛рд░ рд░рд╣реА рдереАред</p>
                
                <div class="vocabulary-note">
                    <div class="word">рд╢рдорди</div>
                    <div class="definition">рд╢рд╛рдВрдд рдХрд░рдирд╛</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рдШреЛрдВрдк</div>
                    <div class="definition">рднреЛрдВрдХрдирд╛</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рджрд░рд╛рд░</div>
                    <div class="definition">рд░реЗрдЦрд╛ рдХреА рддрд░рд╣ рдХрд╛ рд▓рдВрдмрд╛ рдЫрд┐рджреНрд░ рдЬреЛ рдлрдЯрдиреЗ рдХреЗ рдХрд╛рд░рдг рдкрдбрд╝ рдЬрд╛рддрд╛ рд╣реИ</div>
                </div>
                
                <div class="vocabulary-note">
                    <div class="word">рднрдпрд╛рдХреБрд▓</div>
                    <div class="definition">рдбрд░рд╛ рд╣реБрдЖ</div>
                </div>
                
                <p>рддрддрд╛рдБрд░рд╛ рд▓рд╣реВрд▓реБрд╣рд╛рди рд╣реЛ рдЪреБрдХрд╛ рдерд╛... рд╡рд╣ рдЕрдЪреЗрдд рд╣реЛрдиреЗ рд▓рдЧрд╛ рдФрд░ рдХреБрдЫ рджреЗрд░ рдмрд╛рдж рдЙрд╕реЗ рдХреЛрдИ рд╣реЛрд╢ рдирд╣реАрдВ рд░рд╣рд╛ред рд╡рд╣ рдХрдЯреЗ рд╣реБрдП рджреНрд╡реАрдк рдХреЗ рдЕрдВрддрд┐рдо рднреВрдЦрдВрдб рдкрд░ рдкрдбрд╝рд╛ рд╣реБрдЖ рдерд╛ рдЬреЛ рдХрд┐ рджреВрд╕рд░реЗ рд╣рд┐рд╕реНрд╕реЗ рд╕реЗ рд╕рдВрдпреЛрдЧрд╡рд╢ рдЬреБрдбрд╝рд╛ рдерд╛ред рдмрд╣рддрд╛ рд╣реБрдЖ рддрддрд╛рдБрд░рд╛ рдХрд╣рд╛рдБ рдкрд╣реБрдБрдЪрд╛, рдмрд╛рдж рдореЗрдВ рдЙрд╕рдХрд╛ рдХреНрдпрд╛ рд╣реБрдЖ рдХреЛрдИ рдирд╣реАрдВ рдЬрд╛рдирддрд╛ред рдЗрдзрд░ рд╡рд╛рдореАрд░реЛ рдкрд╛рдЧрд▓ рд╣реЛ рдЙрдареАред рд╡рд╣ рд╣рд░ рд╕рдордп рддрддрд╛рдБрд░рд╛ рдХреЛ рдЦреЛрдЬрддреА рд╣реБрдИ рдЙрд╕реА рдЬрдЧрд╣ рдкрд╣реБрдБрдЪрддреА рдФрд░ рдШрдВрдЯреЛрдВ рдмреИрдареА рд░рд╣рддреАред рдЙрд╕рдиреЗ рдЦрд╛рдирд╛-рдкреАрдирд╛ рдЫреЛрдбрд╝ рджрд┐рдпрд╛ред рдкрд░рд┐рд╡рд╛рд░ рд╕реЗ рд╡рд╣ рдПрдХ рддрд░рд╣ рд╡рд┐рд▓рдЧ рд╣реЛ рдЧрдИред рд▓реЛрдЧреЛрдВ рдиреЗ рдЙрд╕реЗ рдвреВрдБрдврд╝рдиреЗ рдХреА рдмрд╣реБрдд рдХреЛрд╢рд┐рд╢ рдХреА рдХрд┐рдВрддреБ рдХреЛрдИ рд╕реБрд░рд╛рдЧ рди рдорд┐рд▓ рд╕рдХрд╛ред</p>
                
                <p>рдЖрдЬ рди рддрддрд╛рдБрд░рд╛ рд╣реИ рди рд╡рд╛рдореАрд░реЛ рдХрд┐рдВрддреБ рдЙрдирдХреА рдпрд╣ рдкреНрд░реЗрдордХрдерд╛ рдШрд░-рдШрд░ рдореЗрдВ рд╕реБрдирд╛рдИ рдЬрд╛рддреА рд╣реИред рдирд┐рдХреЛрдмрд╛рд░рд┐рдпреЛрдВ рдХрд╛ рдордд рд╣реИ рдХрд┐ рддрддрд╛рдБрд░рд╛ рдХреА рддрд▓рд╡рд╛рд░ рд╕реЗ рдХрд╛рд░-рдирд┐рдХреЛрдмрд╛рд░ рдХреЗ рдЬреЛ рдЯреБрдХрдбрд╝реЗ рд╣реБрдП, рдЙрд╕рдореЗрдВ рджреВрд╕рд░рд╛ рд▓рд┐рдЯрд┐рд▓ рдЕрдВрджрдорд╛рди рд╣реИ рдЬреЛ рдХрд╛рд░-рдирд┐рдХреЛрдмрд╛рд░ рд╕реЗ рдЖрдЬ 96 рдХрд┐.рдореА. рджреВрд░ рд╕реНрдерд┐рдд рд╣реИред рдирд┐рдХреЛрдмрд╛рд░реА рдЗрд╕ рдШрдЯрдирд╛ рдХреЗ рдмрд╛рдж рджреВрд╕рд░реЗ рдЧрд╛рдБрд╡реЛрдВ рдореЗрдВ рднреА рдЖрдкрд╕реА рд╡реИрд╡рд╛рд╣рд┐рдХ рд╕рдВрдмрдВрдз рдХрд░рдиреЗ рд▓рдЧреЗред рддрддрд╛рдБрд░рд╛-рд╡рд╛рдореАрд░реЛ рдХреА рддреНрдпрд╛рдЧрдордпреА рдореГрддреНрдпреБ рд╢рд╛рдпрдж рдЗрд╕реА рд╕реБрдЦрдж рдкрд░рд┐рд╡рд░реНрддрди рдХреЗ рд▓рд┐рдП рдереАред</p>
            </div>
            
            <div class="comprehension-check">
                <h3>ЁЯУЭ рдмреЛрдз рдкреНрд░рд╢реНрди</h3>
                <div class="comprehension-question">1. рддрддрд╛рдБрд░рд╛ рдФрд░ рд╡рд╛рдореАрд░реЛ рдХреЗ рдорд┐рд▓рдиреЗ рдкрд░ рдХреНрдпрд╛ рд╣реБрдЖ?</div>
                <div class="comprehension-question">2. рдкрд╢реБ-рдкрд░реНрд╡ рдореЗрдВ рдХреНрдпрд╛-рдХреНрдпрд╛ рд╣реЛрддрд╛ рдерд╛?</div>
                <div class="comprehension-question">3. рддрддрд╛рдБрд░рд╛ рдиреЗ рдХреНрд░реЛрдз рдореЗрдВ рдХреНрдпрд╛ рдХрд┐рдпрд╛?</div>
                <div class="comprehension-question">4. рддрддрд╛рдБрд░рд╛-рд╡рд╛рдореАрд░реЛ рдХреА рдХрд╣рд╛рдиреА рдХрд╛ рдХреНрдпрд╛ рдкрд░рд┐рдгрд╛рдо рд╣реБрдЖ?</div>
            </div>
        `
    }
];

// Show a specific part of the story
function showStoryPartInternal(partNumber) {
    // CRITICAL DEBUG: Confirm this function is being called
    console.log('=== TATARA-VAMIRO showStoryPart CALLED ===');
    console.log(`=== TATARA-VAMIRO showStoryPart(${partNumber}) ===`);
    
    // Simplified implementation to match reference file behavior
    console.log(`[DEBUG] showStoryPart(${partNumber}) called`);
    
    // Validate part number
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    // Get part title
    const partTitle = storyParts[partNumber-1].title;
    
    // Log part switch (matching reference file)
    console.log(`Switched to part ${partNumber}: ${partTitle}`);
    
    // Set story module as active
    isStoryModuleActive = true;
    currentStoryPart = partNumber;
    console.log(`Active tab part: ${currentStoryPart}, requested part: ${partNumber}`);
    
    console.log(`[DEBUG] Story module state: isStoryModuleActive=${isStoryModuleActive}, currentStoryPart=${currentStoryPart}`);
    
    // Update global narration state
    if (window.globalNarrationState) {
        window.globalNarrationState.currentModule = 'story';
        window.globalNarrationState.currentPart = partNumber;
    }
    
    // Update navigation buttons
    document.querySelectorAll('.story-nav-btn').forEach((btn, index) => {
        if (index === partNumber - 1) {
            btn.classList.add('active');
            btn.setAttribute('aria-pressed', 'true');
        } else {
            btn.classList.remove('active');
            btn.setAttribute('aria-pressed', 'false');
        }
    });
    
    // Get the story content container
    const storyContent = document.getElementById('storyContent');
    if (!storyContent) {
        console.error('Story content container not found');
        return;
    }
    
    // Create a container for this part if it doesn't exist
    let partContainer = document.getElementById(`storyPart${partNumber}`);
    if (!partContainer) {
        partContainer = document.createElement('div');
        partContainer.id = `storyPart${partNumber}`;
        partContainer.className = 'story-part';
        storyContent.appendChild(partContainer);
    }
    
    // Hide all parts and show the selected one
    document.querySelectorAll('.story-part').forEach(part => {
        part.classList.remove('active');
    });
    partContainer.classList.add('active');
    
    // Load content if not already loaded
    if (!partContainer.innerHTML.trim()) {
        const part = storyParts[partNumber - 1];
        if (!part) {
            console.error(`Story part ${partNumber} not found`);
            return;
        }
        
        partContainer.innerHTML = `
            <h3 class="story-part-title">${part.title}</h3>
            ${part.content}
        `;
        
        // Add event listeners to vocabulary terms
        partContainer.querySelectorAll('.highlight-vocab').forEach(term => {
            term.addEventListener('click', function() {
                const word = this.textContent.split('\n')[0].trim();
                const definition = this.querySelector('.vocab-tooltip').textContent;
                
                if (window.narrator) {
                    window.narrator.speak(`${word}: ${definition}`);
                }
            });
        });
        
        // Add read aloud button for this part
        const readAloudBtn = document.createElement('button');
        readAloudBtn.className = 'interactive-btn read-part-btn';
        readAloudBtn.innerHTML = 'ЁЯФК рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ';
        readAloudBtn.setAttribute('aria-label', `рднрд╛рдЧ ${partNumber} рдкрдврд╝рдХрд░ рд╕реБрдирд╛рдПрдБ`);
        readAloudBtn.onclick = function() { readStoryPartAloud(partNumber, true); }; // true = manual call
        
        // Add button to the end of the part
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'button-container';
        buttonContainer.appendChild(readAloudBtn);
        partContainer.appendChild(buttonContainer);
    }
    
    // Scroll to top of story
    storyContent.scrollTop = 0;
    
    // Stop any ongoing narration immediately
    if (window.speechSynthesis) {
        window.speechSynthesis.cancel();
    }
    
    if (window.narrator) {
        window.narrator.stop();
        
        // Clear any reading indicators
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            if (indicator.parentNode) indicator.remove();
        });
        
        // Clear any paragraph highlights
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
    }
    
    // Clear any timeouts
    if (window.readingTimeout) clearTimeout(window.readingTimeout);
    if (window.highlightTimeouts) {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
        window.highlightTimeouts = [];
    }
    
    // CRITICAL: Start narration immediately for this part
    // This is what the reference file does
    console.log(`Setting up narration timeout for part ${partNumber}`);
    setTimeout(() => {
        console.log(`Narration timeout fired for part ${partNumber}, isStoryModuleActive: ${isStoryModuleActive}`);
        if (isStoryModuleActive) {
            console.log(`Auto-starting narration for story part ${partNumber}`);
            readStoryPartAloud(partNumber, false);
        } else {
            console.log(`Story module not active, skipping narration for part ${partNumber}`);
        }
    }, 100);
}

// Read a specific story part aloud
function readStoryPartAloud(partNumber, isManualCall = true) {
    // Simplified implementation to match reference file behavior
    console.log(`[DEBUG] readStoryPartAloud(${partNumber}, ${isManualCall}) called`);
    console.log(`Starting narration for part ${partNumber}`);
    
    // Check if we're still in the story module
    if (!isStoryModuleActive) {
        console.log('Narration skipped - no longer in story module');
        return;
    }
    
    console.log(`[DEBUG] Proceeding with narration for part ${partNumber}`);
    
    // Enable auto-narration when user manually starts reading
    if (isManualCall) {
        autoNarrationEnabled = true;
        narrationDisabledByUser = false;
    }
    
    // Track user interaction for speech synthesis
    if (typeof trackUserInteraction === 'function') {
        trackUserInteraction();
    }
    
    if (partNumber < 1 || partNumber > storyParts.length) {
        console.error(`Invalid part number: ${partNumber}`);
        return;
    }
    
    // Stop any ongoing narration immediately
    if (window.speechSynthesis) {
        window.speechSynthesis.cancel();
    }
    
    if (window.narrator) {
        window.narrator.stop();
    }
    
    // Process the story part immediately
    console.log(`[DEBUG] Calling readStoryPartAloudInternal for part ${partNumber}`);
    readStoryPartAloudInternal(partNumber, isManualCall);
}

// Internal function to handle the actual narration
function readStoryPartAloudInternal(partNumber, isManualCall = true) {
    console.log(`[DEBUG] readStoryPartAloudInternal(${partNumber}, ${isManualCall}) called`);
    
    const part = storyParts[partNumber - 1];
    if (!part) {
        console.error(`Story part ${partNumber} not found`);
        return;
    }
    
    // Double-check we're still in story module
    if (!isStoryModuleActive) {
        console.log('Story module no longer active, skipping narration');
        return;
    }
    
    console.log(`[DEBUG] Processing story part ${partNumber}: ${part.title}`);
    
    // Extract plain text from the story part
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = part.content;
    
    // Get all paragraphs and remove vocabulary notes
    const paragraphs = tempDiv.querySelectorAll('p');
    
    // Get story text if it exists
    const storyText = tempDiv.querySelector('.story-text');
    
    // Filter out empty paragraphs and those that are part of vocabulary notes
    const validParagraphs = Array.from(paragraphs).filter(p => {
        // Skip if it's empty
        if (p.textContent.trim().length === 0) {
            return false;
        }
        
        // Skip if it's inside a vocabulary note
        if (p.closest('.vocabulary-note')) {
            return false;
        }
        
        // Skip if it's inside a comprehension check
        if (p.closest('.comprehension-check')) {
            return false;
        }
        
        // Skip if it's a button or interactive element
        if (p.closest('button') || p.tagName === 'BUTTON') {
            return false;
        }
        
        return true;
    });
    
    // Log paragraph processing (matching reference file)
    console.log(`[DEBUG] Found ${validParagraphs.length} valid paragraphs for part ${partNumber}`);
    console.log(`Processing ${validParagraphs.length} paragraphs for part ${partNumber}`);
    
    // Extract text content to read
    let storyTextContent = '';
    
    // Add title
    storyTextContent += `${part.title}. `;
    
    // Add paragraph content
    if (validParagraphs.length > 0) {
        const paragraphTexts = validParagraphs
            .map(p => {
                // Create a clone of the paragraph to work with
                const pClone = p.cloneNode(true);
                
                // Remove all vocabulary tooltips from the clone
                const tooltips = pClone.querySelectorAll('.vocab-tooltip');
                tooltips.forEach(tooltip => tooltip.remove());
                
                // Get the text without tooltips
                let text = pClone.textContent.trim();
                
                // Normalize whitespace
                text = text.replace(/\s+/g, ' ');
                return text;
            })
            .filter(text => text.length > 0); // Remove empty strings
        
        storyTextContent += paragraphTexts.join(' ');
    }
    
    // Read the text aloud
    if (window.narrator && window.narrator.enabled) {
        // Make sure user interaction is tracked
        if (typeof trackUserInteraction === 'function') {
            const interacted = trackUserInteraction();
            
            // Force user interaction to true if it's not already set
            if (!interacted && window.userInteracted !== undefined) {
                window.userInteracted = true;
            }
        }
        
        try {
            // Show reading indicator
            const partContainer = document.getElementById(`storyPart${partNumber}`);
            if (partContainer) {
                // Remove any existing reading indicators
                const existingIndicators = partContainer.querySelectorAll('.reading-indicator');
                existingIndicators.forEach(indicator => indicator.remove());
                
                // Create new reading indicator
                const readingIndicator = document.createElement('div');
                readingIndicator.className = 'reading-indicator';
                readingIndicator.id = `reading-indicator-${partNumber}`;
                readingIndicator.innerHTML = '<div class="reading-spinner"></div> рдкрдврд╝рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...';
                
                // Find button container or create one if it doesn't exist
                let buttonContainer = partContainer.querySelector('.button-container');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.className = 'button-container';
                    partContainer.appendChild(buttonContainer);
                }
                
                buttonContainer.appendChild(readingIndicator);
                
                // Add stop button
                const stopButton = document.createElement('button');
                stopButton.className = 'interactive-btn stop-narration-btn';
                stopButton.innerHTML = 'тП╣я╕П рдкрдврд╝рдирд╛ рд░реЛрдХреЗрдВ';
                stopButton.onclick = stopNarration;
                readingIndicator.appendChild(stopButton);
                
                // Remove indicator when narration ends or after timeout
                window.readingTimeout = setTimeout(() => {
                    if (readingIndicator.parentNode) {
                        readingIndicator.classList.add('fade-out');
                        setTimeout(() => readingIndicator.remove(), 500);
                    }
                }, Math.min(storyTextContent.length * 100, 60000)); // Dynamic timeout based on text length, max 1 minute
            }
            
            // Register narration end event
            if (window.narrator.onEndCallback) {
                window.narrator.onEndCallback = null;
            }
            
            window.narrator.onEndCallback = function() {
                const indicator = document.getElementById(`reading-indicator-${partNumber}`);
                if (indicator) {
                    indicator.classList.add('fade-out');
                    setTimeout(() => {
                        if (indicator.parentNode) indicator.remove();
                    }, 500);
                }
                
                if (window.readingTimeout && typeof clearTimeout === 'function') {
                    clearTimeout(window.readingTimeout);
                }
            };
            
            // Start narration
            try {
                // Ensure speech synthesis is available and ready
                if (window.speechSynthesis) {
                    if (DEBUG_NARRATION) {
                        console.log(`[NARRATION DEBUG] Starting narration in readStoryPartAloudInternal for part ${partNumber}`);
                        console.log(`[NARRATION DEBUG] Speech synthesis state before cancel:`, {
                            speaking: window.speechSynthesis.speaking,
                            pending: window.speechSynthesis.pending,
                            paused: window.speechSynthesis.paused
                        });
                        
                        // Log full debug state
                        if (typeof window.debugNarration === 'function') {
                            window.debugNarration();
                        }
                    }
                    
                    // Reset the speech synthesis if it's in a bad state
                    window.speechSynthesis.cancel();
                    
                    if (DEBUG_NARRATION) {
                        console.log(`[NARRATION DEBUG] Speech synthesis state after cancel:`, {
                            speaking: window.speechSynthesis.speaking,
                            pending: window.speechSynthesis.pending,
                            paused: window.speechSynthesis.paused
                        });
                    }
                    
                    // Small pause to ensure the reset is complete
                    setTimeout(() => {
                        try {
                            // Check if we're still in the story module
                            if (!isStoryModuleActive) {
                                if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Story module no longer active before starting chunks, aborting narration`);
                                return;
                            }
                            
                            // Split the content into manageable chunks
                            const chunks = splitTextIntoChunks(storyTextContent, 200);
                            
                            if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Split story content into ${chunks.length} chunks`);
                            
                            // Speak each chunk sequentially
                            speakChunksSequentially(chunks);
                        } catch (innerError) {
                            // Handle error silently
                            if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Error in narration timeout:`, innerError);
                        }
                    }, 100);
                }
            } catch (e) {
                // Handle error silently
                if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Error in narration start:`, e);
            }
            
            // Highlight paragraphs as they are being read
            const elementsToHighlight = [...validParagraphs];
            if (storyText) {
                elementsToHighlight.push(storyText);
            }
            highlightParagraphsSequentially(elementsToHighlight);
            
        } catch (error) {
            alert('рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╡рд╛рдЪрди рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
        }
    } else {
        alert('рдЖрдкрдХреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕реНрдкреАрдЪ рд╕рд┐рдВрдереЗрд╕рд┐рд╕ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред');
    }
}

// Stop ongoing narration
function stopNarration() {
    if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] stopNarration() called`);
    
    if (window.narrator) {
        // First cancel speech synthesis directly
        if (window.speechSynthesis) {
            if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Speech synthesis state before cancel in stopNarration:`, {
                speaking: window.speechSynthesis.speaking,
                pending: window.speechSynthesis.pending,
                paused: window.speechSynthesis.paused
            });
            
            console.log('Canceling speech synthesis directly from stopNarration');
            window.speechSynthesis.cancel();
            
            if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Speech synthesis state after cancel in stopNarration:`, {
                speaking: window.speechSynthesis.speaking,
                pending: window.speechSynthesis.pending,
                paused: window.speechSynthesis.paused
            });
        }
        
        // Then use narrator's stop method
        if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Calling narrator.stop() in stopNarration`);
        window.narrator.stop();
        
        // Disable auto-narration when user manually stops
        autoNarrationEnabled = false;
        narrationDisabledByUser = true; // Mark that user has disabled narration
        
        // Update global narration state
        if (window.globalNarrationState) {
            window.globalNarrationState.disabledByUser = true;
        }
        
        // Remove all reading indicators
        document.querySelectorAll('.reading-indicator').forEach(indicator => {
            indicator.classList.add('fade-out');
            setTimeout(() => {
                if (indicator.parentNode) indicator.remove();
            }, 500);
        });
        
        // Remove all paragraph highlights
        document.querySelectorAll('.paragraph-highlight').forEach(p => {
            p.classList.remove('paragraph-highlight');
        });
        
        // Clear any timeouts
        if (window.readingTimeout && typeof clearTimeout === 'function') {
            clearTimeout(window.readingTimeout);
            window.readingTimeout = null;
        }
        
        if (window.highlightTimeouts && typeof clearTimeout === 'function') {
            window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
            window.highlightTimeouts = [];
        }
        
        console.log('Narration stopped by user');
    }
}

// Highlight paragraphs sequentially as they are being read
function highlightParagraphsSequentially(paragraphs) {
    // Clear any existing highlight timeouts
    if (window.highlightTimeouts && typeof clearTimeout === 'function') {
        window.highlightTimeouts.forEach(timeout => clearTimeout(timeout));
    }
    
    window.highlightTimeouts = [];
    
    // Remove any existing highlights
    document.querySelectorAll('.paragraph-highlight').forEach(p => {
        p.classList.remove('paragraph-highlight');
    });
    
    // Calculate approximate time per paragraph based on length
    const totalTextLength = paragraphs.reduce((sum, p) => sum + p.textContent.length, 0);
    let cumulativeLength = 0;
    
    // Estimate total reading time (about 12 characters per second - slightly slower for better sync)
    const totalReadingTime = totalTextLength / 12 * 1000;
    
    // Highlight each paragraph at the appropriate time
    paragraphs.forEach((paragraph, index) => {
        const textLength = paragraph.textContent.length;
        const startPercentage = cumulativeLength / totalTextLength;
        cumulativeLength += textLength;
        
        // Calculate when to highlight this paragraph
        const highlightTime = startPercentage * totalReadingTime;
        
        // Set timeout to add highlight
        const highlightTimeout = setTimeout(() => {
            // Only proceed if narration is still active (check for reading indicator)
            if (document.querySelector('.reading-indicator')) {
                // Remove highlight from previous paragraphs
                if (index > 0) {
                    paragraphs[index - 1].classList.remove('paragraph-highlight');
                }
                
                // Add highlight to current paragraph
                paragraph.classList.add('paragraph-highlight');
                
                // Scroll to the paragraph with proper container reference
                const container = document.querySelector('.story-content');
                if (container) {
                    // Calculate if paragraph is visible
                    const paragraphRect = paragraph.getBoundingClientRect();
                    const containerRect = container.getBoundingClientRect();
                    
                    // If paragraph is not fully visible, scroll to it
                    if (paragraphRect.top < containerRect.top || 
                        paragraphRect.bottom > containerRect.bottom) {
                        container.scrollTop = paragraph.offsetTop - container.offsetTop - 100;
                    }
                } else {
                    // Fallback if container not found
                    paragraph.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }
        }, highlightTime);
        
        window.highlightTimeouts.push(highlightTimeout);
    });
    
    // Clear highlights when done
    const clearHighlightsTimeout = setTimeout(() => {
        paragraphs.forEach(p => p.classList.remove('paragraph-highlight'));
    }, totalReadingTime + 1000);
    
    window.highlightTimeouts.push(clearHighlightsTimeout);
}

// Highlight vocabulary words in the text
function highlightVocabularyInternal() {
    const vocabTerms = document.querySelectorAll('.highlight-vocab');
    
    vocabTerms.forEach(term => {
        term.classList.toggle('active-highlight');
    });
    
    // Show a message that vocabulary highlighting is toggled
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = 'рд╢рдмреНрджрд╛рд░реНрде рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╣реИрдВред рдЕрд░реНрде рд╕реБрдирдиреЗ рдХреЗ рд▓рд┐рдП рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд┐рдП рдЧрдП рд╢рдмреНрджреЛрдВ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}

// Toggle read aloud functionality
function toggleReadAloudInternal() {
    // Force user interaction flag
    if (window.userInteracted !== undefined) {
        window.userInteracted = true;
    }
    
    // Cancel any ongoing speech
    if (window.speechSynthesis) {
        window.speechSynthesis.cancel();
    }
    
    // Get the currently active story part
    const activeBtn = document.querySelector('.story-nav-btn.active');
    if (activeBtn) {
        try {
            // Extract the part number from the onclick attribute
            const onclickAttr = activeBtn.getAttribute('onclick');
            const match = onclickAttr.match(/showStoryPart\((\d+)\)/);
            if (match && match[1]) {
                const partNumber = parseInt(match[1]);
                
                // Cancel any ongoing narration first
                if (window.narrator && window.narrator.currentUtterance) {
                    window.narrator.stop();
                }
                
                // Wait a moment to ensure any previous narration has stopped
                setTimeout(() => {
                    // Call the read aloud function with the current part number
                    readStoryPartAloud(partNumber, true); // true means it's a manual call
                }, 100);
            }
        } catch (e) {
            // Handle error silently
        }
    } else {
        // If no active button is found, default to part 1
        setTimeout(() => {
            readStoryPartAloud(1, true);
        }, 100);
    }
}

// Split text into manageable chunks for narration
function splitTextIntoChunks(text, chunkSize = 200) {
    // Try to split at sentence boundaries
    const sentences = text.match(/[^.!?ред]+[.!?ред]+/g) || [];
    
    if (sentences.length === 0) {
        return [text];
    }
    
    const chunks = [];
    let currentChunk = '';
    
    sentences.forEach(sentence => {
        // If adding this sentence would make the chunk too long, start a new chunk
        if (currentChunk.length + sentence.length > chunkSize) {
            if (currentChunk) {
                chunks.push(currentChunk);
            }
            currentChunk = sentence;
        } else {
            currentChunk += sentence;
        }
    });
    
    // Add the last chunk if it's not empty
    if (currentChunk) {
        chunks.push(currentChunk);
    }
    
    return chunks.length ? chunks : [text];
}

// Speak text chunks sequentially
function speakChunksSequentially(chunks, index = 0) {
    if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] speakChunksSequentially(chunks[${chunks.length}], ${index}) called`);
    
    if (index >= chunks.length) {
        if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] All chunks processed, ending sequence`);
        return;
    }
    
    // Check if narration should continue
    if (window.narrator && !window.narrator.enabled) {
        if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Narration stopped - narrator disabled`);
        console.log('Narration stopped - narrator disabled');
        return;
    }
    
    // CRITICAL CHECK: Check if we're still in story module
    if (!isStoryModuleActive) {
        if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Story module no longer active in speakChunksSequentially, stopping narration`);
        // Force immediate speech synthesis cancellation
        if (window.speechSynthesis) {
            if (DEBUG_NARRATION) console.log(`[NARRATION DEBUG] Force canceling speech synthesis in speakChunksSequentially`);
            window.speechSynthesis.cancel();
        }
        return;
    }
    
    try {
        const utterance = new SpeechSynthesisUtterance(chunks[index]);
        
        // Add debug logging
        console.log(`Speaking chunk ${index+1} of ${chunks.length}, length: ${chunks[index].length}`);
        
        // Apply voice settings if available
        if (window.narrator && window.narrator.voice) {
            utterance.voice = window.narrator.voice;
            
            // Apply the same optimization parameters as in the narrator
            if (window.narrator.optimizeVoiceParameters) {
                window.narrator.optimizeVoiceParameters(utterance);
            }
        }
        
        // Set event handlers
        utterance.onend = () => {
            // Speak the next chunk after a small delay
            setTimeout(() => {
                speakChunksSequentially(chunks, index + 1);
            }, 150); // Slightly shorter delay for better continuous narration
        };
        utterance.onerror = (event) => {
            console.error("Error speaking chunk:", event);
            // If error is interrupted, it's likely due to tab switching, so stop
            if (event.error === 'interrupted') {
                console.log('Narration interrupted - stopping sequence');
                return;
            }
            // Try to continue with the next chunk even if there's an error
            setTimeout(() => {
                speakChunksSequentially(chunks, index + 1);
            }, 500);
        };
        
        // Store current utterance in narrator for tracking
        if (window.narrator) {
            window.narrator.currentUtterance = utterance;
        }
        
        // Speak the chunk
        window.speechSynthesis.speak(utterance);
    } catch (e) {
        console.error("Error in speakChunksSequentially:", e);
        // Try to continue with the next chunk
        setTimeout(() => {
            speakChunksSequentially(chunks, index + 1);
        }, 500);
    }
}

// Toggle print-friendly mode
function togglePrintModeInternal() {
    document.body.classList.toggle('print-mode');
    
    // Show a message that print mode is toggled
    const isPrintMode = document.body.classList.contains('print-mode');
    const feedbackMsg = document.createElement('div');
    feedbackMsg.className = 'feedback-message success show';
    feedbackMsg.textContent = isPrintMode ? 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рд╕рдХреНрд░рд┐рдпред рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдкреНрд░рд┐рдВрдЯ рдлрд╝рдВрдХреНрд╢рди рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред' : 
        'рдкреНрд░рд┐рдВрдЯ рдореЛрдб рдирд┐рд╖реНрдХреНрд░рд┐рдпред';
    
    // Find the story content container
    const storyContent = document.getElementById('storyContent');
    if (storyContent) {
        storyContent.appendChild(feedbackMsg);
        
        // Remove the message after a few seconds
        setTimeout(() => {
            feedbackMsg.classList.remove('show');
            setTimeout(() => feedbackMsg.remove(), 500);
        }, 3000);
    }
}
